{
  "description": null,
  "format": "quiz",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "hard",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/how-do-you-abort-a-web-request-using-abortcontrollers",
    "importance": "mid",
    "languages": [],
    "nextQuestions": [],
    "premium": false,
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "how-do-you-abort-a-web-request-using-abortcontrollers",
    "subtitle": null,
    "title": "How do you abort a web request using `AbortController`?",
    "topics": [
      "javascript",
      "network"
    ]
  },
  "solution": "var Component=(()=>{var d=Object.create;var l=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var f=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),m=(r,e)=>{for(var t in e)l(r,t,{get:e[t],enumerable:!0})},c=(r,e,t,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of g(e))!b.call(r,o)&&o!==t&&l(r,o,{get:()=>e[o],enumerable:!(s=u(e,o))||s.enumerable});return r};var C=(r,e,t)=>(t=r!=null?d(p(r)):{},c(e||!r||!r.__esModule?l(t,\"default\",{value:r,enumerable:!0}):t,r)),A=r=>c(l({},\"__esModule\",{value:!0}),r);var a=f((I,i)=>{i.exports=_jsx_runtime});var y={};m(y,{default:()=>R,frontmatter:()=>q});var n=C(a()),q={title:\"How do you abort a web request using `AbortController`?\"};function h(r){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",h3:\"h3\",ul:\"ul\",li:\"li\",hr:\"hr\",strong:\"strong\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"AbortController\"}),\" is a Web API for canceling ongoing asynchronous operations like fetch requests.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const controller = new AbortController();\nconst signal = controller.signal;\n\nfetch('YOUR_API_URL', { signal })\n  .then((response) => {\n    // Handle response\n  })\n  .catch((error) => {\n    if (error.name === 'AbortError') {\n      console.log('Request aborted');\n    } else {\n      console.error('Error:', error);\n    }\n  });\n\n// Call abort() to abort the request\ncontroller.abort();\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Use Cases\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Canceling requests based on user actions, like canceling a search.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Prioritizing the latest requests in scenarios with multiple simultaneous requests.\"}),`\n`]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"AbortController\"}),\" is a powerful Web API introduced in 2019 that empowers developers to gracefully cancel ongoing asynchronous operations like fetch requests. It offers a mechanism to signal to the underlying network layer that the request is no longer required, preventing unnecessary resource consumption and improving user experience.\"]}),`\n`,(0,n.jsxs)(e.h2,{children:[\"How to Use \",(0,n.jsx)(e.code,{children:\"AbortController\"}),\"?\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"To use \",(0,n.jsx)(e.code,{children:\"AbortController\"}),\", you need to follow these steps:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[\"Create an \",(0,n.jsx)(e.code,{children:\"AbortController\"}),\" Instance\"]}),\": Initialize an \",(0,n.jsx)(e.code,{children:\"AbortController\"}),\" instance, which creates a signal that can be used to abort requests.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Pass the Signal to the Request\"}),\": Pass the signal to the request, typically through the \",(0,n.jsx)(e.code,{children:\"signal\"}),\" property in the request options.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Abort the Request\"}),\": Call the \",(0,n.jsx)(e.code,{children:\"abort\"}),\" method on the \",(0,n.jsx)(e.code,{children:\"AbortController\"}),\" instance to cancel the ongoing request. Here is an example of how to use AbortController with the Fetch API:\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const controller = new AbortController();\nconst signal = controller.signal;\n\nfetch('YOUR_API_URL', { signal })\n  .then((response) => {\n    // Handle response\n  })\n  .catch((error) => {\n    if (error.name === 'AbortError') {\n      console.log('Request aborted');\n    } else {\n      console.error('Error:', error);\n    }\n  });\n\n// Call abort() to abort the request\ncontroller.abort();\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Use cases\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Canceling a Fetch Request on User Action\"}),`\n`,(0,n.jsx)(e.p,{children:\"Cancel requests that take too long or are no longer relevant due to user interactions (e.g., user cancels a search before results load).\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// HTML:\n// <div>\n//     <button id=\"cancelBtn\">Cancel</button>\n// </div>\n\nconst controller = new AbortController();\nconst signal = controller.signal;\n\nfetch('YOUR_API_URL', { signal })\n  .then((response) => {\n    // Handle successful response\n  })\n  .catch((error) => {\n    if (error.name === 'AbortError') {\n      console.log('Request canceled');\n    } else {\n      console.error('Network or other error:', error);\n    }\n  });\n\ndocument.getElementById('cancelBtn').addEventListener('click', () => {\n  controller.abort();\n});\n`})}),`\n`,(0,n.jsx)(e.p,{children:'When you click the \"Cancel\" button, it will abort the fetch request.'}),`\n`,(0,n.jsx)(e.h3,{children:\"Prioritizing Latest Requests in a Race Condition\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In scenarios where multiple requests are initiated for the same data, use \",(0,n.jsx)(e.code,{children:\"AbortController\"}),\" to prioritize the latest request and abort earlier ones.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let latestController = null; // Keeps track of the latest controller\n\nfunction fetchData(url) {\n  if (latestController) {\n    latestController.abort(); // Abort any previous request\n  }\n\n  const controller = new AbortController();\n  latestController = controller;\n  const signal = controller.signal;\n\n  fetch(url, { signal })\n    .then((response) => {\n      // Handle successful response\n    })\n    .catch((error) => {\n      if (error.name === 'AbortError') {\n        console.log('Request canceled');\n      } else {\n        console.error('Network or other error:', error);\n      }\n    });\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, when the \",(0,n.jsx)(e.code,{children:\"fetchData()\"}),\" function is called multitple times triggering multipe fetch requests, \",(0,n.jsx)(e.code,{children:\"AbortController\"}),\" will cancel all the previous requests except the latest request.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/AbortController\",children:\"AbortController | MDN\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/fetch-abort\",children:\"Fetch: Abort | Javascript.info\"})}),`\n`]})]})}function w(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(h,r)})):h(r)}var R=w;return A(y);})();\n;return Component;"
}