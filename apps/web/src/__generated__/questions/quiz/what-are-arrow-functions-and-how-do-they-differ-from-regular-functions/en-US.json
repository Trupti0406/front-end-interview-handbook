{
  "description": null,
  "format": "quiz",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-are-arrow-functions-and-how-do-they-differ-from-regular-functions",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "premium": false,
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "what-are-arrow-functions-and-how-do-they-differ-from-regular-functions",
    "subtitle": null,
    "title": "What are arrow functions and how do they differ from regular functions?",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-are-arrow-functions-and-how-do-they-differ-from-regular-functions/en-US.mdx"
  },
  "solution": "var Component=(()=>{var l=Object.create;var c=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var p=(r,n)=>()=>(n||r((n={exports:{}}).exports,n),n.exports),w=(r,n)=>{for(var o in n)c(r,o,{get:n[o],enumerable:!0})},s=(r,n,o,i)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let t of f(n))!m.call(r,t)&&t!==o&&c(r,t,{get:()=>n[t],enumerable:!(i=u(n,t))||i.enumerable});return r};var b=(r,n,o)=>(o=r!=null?l(g(r)):{},s(n||!r||!r.__esModule?c(o,\"default\",{value:r,enumerable:!0}):o,r)),x=r=>s(c({},\"__esModule\",{value:!0}),r);var h=p((R,a)=>{a.exports=_jsx_runtime});var v={};w(v,{default:()=>j,frontmatter:()=>y});var e=b(h()),y={title:\"What are arrow functions and how do they differ from regular functions?\"};function d(r){let n=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",h3:\"h3\",ul:\"ul\",li:\"li\",a:\"a\"},r.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h2,{children:\"TL;DR\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Arrow functions are a concise way to write functions in JavaScript. They use the \",(0,e.jsx)(n.code,{children:\"=>\"}),\" syntax and do not have their own \",(0,e.jsx)(n.code,{children:\"this\"}),\" context, which means they inherit \",(0,e.jsx)(n.code,{children:\"this\"}),\" from the surrounding code. This makes them particularly useful for callbacks and methods that need to maintain the context of \",(0,e.jsx)(n.code,{children:\"this\"}),\". Unlike regular functions, arrow functions cannot be used as constructors and do not have the \",(0,e.jsx)(n.code,{children:\"arguments\"}),\" object.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`// Regular function\nfunction add(a, b) {\n  return a + b;\n}\n\n// Arrow function\nconst add = (a, b) => a + b;\n`})}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h2,{children:\"Arrow functions and how they differ from regular functions\"}),`\n`,(0,e.jsx)(n.h3,{children:\"Syntax\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Arrow functions provide a shorter syntax compared to regular functions. They use the \",(0,e.jsx)(n.code,{children:\"=>\"}),\" syntax.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`// Regular function\nfunction add(a, b) {\n  return a + b;\n}\n\n// Arrow function\nconst add = (a, b) => a + b;\n`})}),`\n`,(0,e.jsxs)(n.h3,{children:[(0,e.jsx)(n.code,{children:\"this\"}),\" context\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Arrow functions do not have their own \",(0,e.jsx)(n.code,{children:\"this\"}),\" context. Instead, they inherit \",(0,e.jsx)(n.code,{children:\"this\"}),\" from the surrounding lexical context. This is particularly useful in scenarios where you want to maintain the context of \",(0,e.jsx)(n.code,{children:\"this\"}),\" inside a callback function.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`// Regular function\nfunction Person() {\n  this.age = 0;\n\n  setInterval(function growUp() {\n    this.age++;\n  }, 1000);\n}\n\nconst p = new Person();\n// \\`this\\` inside growUp refers to the global object, not the Person instance\n\n// Arrow function\nfunction Person() {\n  this.age = 0;\n\n  setInterval(() => {\n    this.age++;\n  }, 1000);\n}\n\nconst p = new Person();\n// \\`this\\` inside the arrow function refers to the Person instance\n`})}),`\n`,(0,e.jsxs)(n.h3,{children:[(0,e.jsx)(n.code,{children:\"arguments\"}),\" object\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Arrow functions do not have their own \",(0,e.jsx)(n.code,{children:\"arguments\"}),\" object. If you need to access the \",(0,e.jsx)(n.code,{children:\"arguments\"}),\" object, you should use a regular function.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`// Regular function\nfunction logArguments() {\n  console.log(arguments);\n}\n\nlogArguments(1, 2, 3); // [1, 2, 3]\n\n// Arrow function\nconst logArguments = () => {\n  console.log(arguments);\n};\n\nlogArguments(1, 2, 3); // ReferenceError: arguments is not defined\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"Constructors\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Arrow functions cannot be used as constructors and will throw an error if used with the \",(0,e.jsx)(n.code,{children:\"new\"}),\" keyword.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`// Regular function\nfunction Person(name) {\n  this.name = name;\n}\n\nconst p = new Person('John'); // Works fine\n\n// Arrow function\nconst Person = (name) => {\n  this.name = name;\n};\n\nconst p = new Person('John'); // TypeError: Person is not a constructor\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"Implicit return\"}),`\n`,(0,e.jsx)(n.p,{children:\"Arrow functions allow for an implicit return when the function body consists of a single expression.\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`// Regular function\nfunction add(a, b) {\n  return a + b;\n}\n\n// Arrow function with implicit return\nconst add = (a, b) => a + b;\n`})}),`\n`,(0,e.jsx)(n.h2,{children:\"Further reading\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\",children:\"MDN Web Docs: Arrow functions\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\",children:\"MDN Web Docs: this\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\",children:\"MDN Web Docs: arguments\"})}),`\n`]})]})}function A(r={}){let{wrapper:n}=r.components||{};return n?(0,e.jsx)(n,Object.assign({},r,{children:(0,e.jsx)(d,r)})):d(r)}var j=A;return x(v);})();\n;return Component;"
}