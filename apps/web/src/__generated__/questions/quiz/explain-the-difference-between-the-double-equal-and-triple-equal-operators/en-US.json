{
  "description": null,
  "format": "quiz",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-the-difference-between-the-double-equal-and-triple-equal-operators",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "premium": false,
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "explain-the-difference-between-the-double-equal-and-triple-equal-operators",
    "subtitle": null,
    "title": "Explain the difference between the `==` and `===` operators",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-the-difference-between-the-double-equal-and-triple-equal-operators/en-US.mdx"
  },
  "solution": "var Component=(()=>{var d=Object.create;var c=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),y=(o,e)=>{for(var r in e)c(o,r,{get:e[r],enumerable:!0})},i=(o,e,r,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of p(e))!f.call(o,t)&&t!==r&&c(o,t,{get:()=>e[t],enumerable:!(l=u(e,t))||l.enumerable});return o};var b=(o,e,r)=>(r=o!=null?d(m(o)):{},i(e||!o||!o.__esModule?c(r,\"default\",{value:o,enumerable:!0}):r,o)),w=o=>i(c({},\"__esModule\",{value:!0}),o);var s=g((q,a)=>{a.exports=_jsx_runtime});var T={};y(T,{default:()=>j,frontmatter:()=>v});var n=b(s()),v={title:\"Explain the difference between the `==` and `===` operators\"};function h(o){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",hr:\"hr\",h3:\"h3\",pre:\"pre\",ul:\"ul\",li:\"li\",a:\"a\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"==\"}),\" operator checks for equality with type coercion, meaning it converts the operands to the same type before making the comparison. The \",(0,n.jsx)(e.code,{children:\"===\"}),\" operator checks for strict equality without type coercion, meaning both the value and the type must be the same for the comparison to return true. For example, \",(0,n.jsx)(e.code,{children:\"5 == '5'\"}),\" returns true, but \",(0,n.jsx)(e.code,{children:\"5 === '5'\"}),\" returns false.\"]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.h2,{children:[\"Difference between the \",(0,n.jsx)(e.code,{children:\"==\"}),\" and \",(0,n.jsx)(e.code,{children:\"===\"}),\" operators\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Type coercion\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"==\"}),\" operator performs type coercion, which means it converts the operands to the same type before making the comparison. This can lead to unexpected results if you're not careful.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`console.log(5 == '5'); // true\nconsole.log(true == 1); // true\nconsole.log(null == undefined); // true\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Strict equality\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"===\"}),\" operator, on the other hand, does not perform type coercion. It checks for both value and type equality. This makes it a safer choice for comparisons in most cases.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`console.log(5 === '5'); // false\nconsole.log(true === 1); // false\nconsole.log(null === undefined); // false\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Use cases\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Use \",(0,n.jsx)(e.code,{children:\"==\"}),\" when you want to compare values regardless of their type, but be cautious of unexpected type coercion.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Use \",(0,n.jsx)(e.code,{children:\"===\"}),\" when you want to ensure both the value and type are the same, which is generally recommended for most comparisons to avoid bugs.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Common pitfalls\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Comparing \",(0,n.jsx)(e.code,{children:\"null\"}),\" and \",(0,n.jsx)(e.code,{children:\"undefined\"}),\" with \",(0,n.jsx)(e.code,{children:\"==\"}),\" returns true, but with \",(0,n.jsx)(e.code,{children:\"===\"}),\" it returns false.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Comparing different types with \",(0,n.jsx)(e.code,{children:\"==\"}),\" can lead to unexpected results due to type coercion.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`console.log(null == undefined); // true\nconsole.log(null === undefined); // false\nconsole.log('' == 0); // true\nconsole.log('' === 0); // false\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\",children:\"MDN Web Docs: Equality comparisons and sameness\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://dorey.github.io/JavaScript-Equality-Table/\",children:\"JavaScript Equality Table\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.oreilly.com/library/view/javascript-the-good/9780596517748/\",children:\"JavaScript: The Good Parts by Douglas Crockford\"})}),`\n`]})]})}function x(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(h,o)})):h(o)}var j=x;return w(T);})();\n;return Component;"
}