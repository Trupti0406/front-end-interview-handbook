{
  "description": null,
  "format": "quiz",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/why-is-extending-built-in-javascript-objects-not-a-good-idea",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "premium": false,
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "why-is-extending-built-in-javascript-objects-not-a-good-idea",
    "title": "Why is extending built-in JavaScript objects not a good idea?",
    "subtitle": null,
    "topics": [
      "javascript"
    ]
  },
  "solution": "var Component=(()=>{var l=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=>{for(var o in e)a(t,o,{get:e[o],enumerable:!0})},s=(t,e,o,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!b.call(t,i)&&i!==o&&a(t,i,{get:()=>e[i],enumerable:!(r=m(e,i))||r.enumerable});return t};var f=(t,e,o)=>(o=t!=null?l(u(t)):{},s(e||!t||!t.__esModule?a(o,\"default\",{value:t,enumerable:!0}):o,t)),x=t=>s(a({},\"__esModule\",{value:!0}),t);var d=y((M,c)=>{c.exports=_jsx_runtime});var _={};g(_,{default:()=>v,frontmatter:()=>w});var n=f(d()),w={title:\"Why is extending built-in JavaScript objects not a good idea?\"};function h(t){let e=Object.assign({p:\"p\",code:\"code\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Extending a built-in/native JavaScript object means adding properties/functions to its \",(0,n.jsx)(e.code,{children:\"prototype\"}),\". While this may seem like a good idea at first, it is dangerous in practice. Imagine your code uses a few libraries that both extend the \",(0,n.jsx)(e.code,{children:\"Array.prototype\"}),\" by adding the same \",(0,n.jsx)(e.code,{children:\"contains\"}),\" method, the implementations will overwrite each other and your code will break if the behavior of these two methods is not the same.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"The only time you may want to extend a native object is when you want to create a polyfill, essentially providing your own implementation for a method that is part of the JavaScript specification but might not exist in the user's browser due to it being an older browser.\"})]})}function j(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var v=j;return x(_);})();\n;return Component;"
}