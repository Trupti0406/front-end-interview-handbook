{
  "description": null,
  "format": "quiz",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/whats-the-difference-between-a-variable-that-is-null-undefined-or-undeclared-how-would-you-go-about-checking-for-any-of-these-states",
    "importance": "high",
    "languages": [],
    "nextQuestions": [],
    "premium": false,
    "published": true,
    "ranking": 1,
    "similarQuestions": [],
    "slug": "whats-the-difference-between-a-variable-that-is-null-undefined-or-undeclared-how-would-you-go-about-checking-for-any-of-these-states",
    "title": "What's the difference between a variable that is: `null`, `undefined` or undeclared?",
    "subtitle": "How would you go about checking for any of these states?\"",
    "topics": [
      "javascript"
    ]
  },
  "solution": "var Component=(()=>{var h=Object.create;var l=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var p=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),v=(o,e)=>{for(var t in e)l(o,t,{get:e[t],enumerable:!0})},a=(o,e,t,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of f(e))!b.call(o,r)&&r!==t&&l(o,r,{get:()=>e[r],enumerable:!(i=u(e,r))||i.enumerable});return o};var y=(o,e,t)=>(t=o!=null?h(g(o)):{},a(e||!o||!o.__esModule?l(t,\"default\",{value:o,enumerable:!0}):t,o)),m=o=>a(l({},\"__esModule\",{value:!0}),o);var d=p((I,c)=>{c.exports=_jsx_runtime});var j={};v(j,{default:()=>x,frontmatter:()=>w});var n=y(d()),w={title:\"What's the difference between a variable that is: `null`, `undefined` or undeclared?\",subtitle:'How would you go about checking for any of these states?\"'};function s(o){let e=Object.assign({p:\"p\",strong:\"strong\",code:\"code\",pre:\"pre\",h2:\"h2\",ul:\"ul\",li:\"li\",a:\"a\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Undeclared\"}),\" variables are created when you assign a value to an identifier that is not previously created using \",(0,n.jsx)(e.code,{children:\"var\"}),\", \",(0,n.jsx)(e.code,{children:\"let\"}),\" or \",(0,n.jsx)(e.code,{children:\"const\"}),\". Undeclared variables will be defined globally, outside of the current scope. In strict mode, a \",(0,n.jsx)(e.code,{children:\"ReferenceError\"}),\" will be thrown when you try to assign to an undeclared variable. Undeclared variables are bad just like how global variables are bad. Avoid them at all cost! To check for them, wrap its usage in a \",(0,n.jsx)(e.code,{children:\"try\"}),\"/\",(0,n.jsx)(e.code,{children:\"catch\"}),\" block.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function foo() {\n  x = 1; // Throws a ReferenceError in strict mode\n}\n\nfoo();\nconsole.log(x); // 1\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"A variable that is \",(0,n.jsx)(e.code,{children:\"undefined\"}),\" is a variable that has been declared, but not assigned a value. It is of type \",(0,n.jsx)(e.code,{children:\"undefined\"}),\". If a function does not return any value as the result of executing it is assigned to a variable, the variable also has the value of \",(0,n.jsx)(e.code,{children:\"undefined\"}),\". To check for it, compare using the strict equality (\",(0,n.jsx)(e.code,{children:\"===\"}),\") operator or \",(0,n.jsx)(e.code,{children:\"typeof\"}),\" which will give the \",(0,n.jsx)(e.code,{children:\"'undefined'\"}),\" string. Note that you should not be using the abstract equality operator to check, as it will also return \",(0,n.jsx)(e.code,{children:\"true\"}),\" if the value is \",(0,n.jsx)(e.code,{children:\"null\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`var foo;\nconsole.log(foo); // undefined\nconsole.log(foo === undefined); // true\nconsole.log(typeof foo === 'undefined'); // true\n\nconsole.log(foo == null); // true. Wrong, don't use this to check!\n\nfunction bar() {}\nvar baz = bar();\nconsole.log(baz); // undefined\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"A variable that is \",(0,n.jsx)(e.code,{children:\"null\"}),\" will have been explicitly assigned to the \",(0,n.jsx)(e.code,{children:\"null\"}),\" value. It represents no value and is different from \",(0,n.jsx)(e.code,{children:\"undefined\"}),\" in the sense that it has been explicitly assigned. To check for \",(0,n.jsx)(e.code,{children:\"null,\"}),\" simply compare using the strict equality operator. Note that like the above, you should not be using the abstract equality operator (\",(0,n.jsx)(e.code,{children:\"==\"}),\") to check, as it will also return \",(0,n.jsx)(e.code,{children:\"true\"}),\" if the value is \",(0,n.jsx)(e.code,{children:\"undefined\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`var foo = null;\nconsole.log(foo === null); // true\nconsole.log(typeof foo === 'object'); // true\n\nconsole.log(foo == undefined); // true. Wrong, don't use this to check!\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"As a good habit, never leave your variables undeclared or unassigned. Explicitly assign \",(0,n.jsx)(e.code,{children:\"null\"}),\" to them after declaring if you don't intend to use them yet. If you use some static analysis tooling in your workflow (e.g. ESLint, TypeScript Compiler), it will usually also be able to check that you are not referencing undeclared variables.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"References\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.frontendinterviewhandbook.com/javascript-questions\",children:\"Front End Interview Handbook\"})}),`\n`]})]})}function k(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(s,o)})):s(o)}var x=k;return m(j);})();\n;return Component;"
}