{
  "description": null,
  "format": "quiz",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-are-the-primitive-data-types-in-javascript",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "premium": false,
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "what-are-the-primitive-data-types-in-javascript",
    "subtitle": null,
    "title": "What are the primitive data types in JavaScript?",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-are-the-primitive-data-types-in-javascript/en-US.mdx"
  },
  "solution": "var Component=(()=>{var h=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var m=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),f=(r,e)=>{for(var t in e)a(r,t,{get:e[t],enumerable:!0})},c=(r,e,t,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of u(e))!g.call(r,i)&&i!==t&&a(r,i,{get:()=>e[i],enumerable:!(l=p(e,i))||l.enumerable});return r};var y=(r,e,t)=>(t=r!=null?h(b(r)):{},c(e||!r||!r.__esModule?a(t,\"default\",{value:r,enumerable:!0}):t,r)),v=r=>c(a({},\"__esModule\",{value:!0}),r);var o=m((x,d)=>{d.exports=_jsx_runtime});var D={};f(D,{default:()=>N,frontmatter:()=>S});var n=y(o()),S={title:\"What are the primitive data types in JavaScript?\"};function s(r){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",hr:\"hr\",h3:\"h3\",pre:\"pre\",ul:\"ul\",li:\"li\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"JavaScript has seven primitive data types: \",(0,n.jsx)(e.code,{children:\"string\"}),\", \",(0,n.jsx)(e.code,{children:\"number\"}),\", \",(0,n.jsx)(e.code,{children:\"boolean\"}),\", \",(0,n.jsx)(e.code,{children:\"null\"}),\", \",(0,n.jsx)(e.code,{children:\"undefined\"}),\", \",(0,n.jsx)(e.code,{children:\"symbol\"}),\", and \",(0,n.jsx)(e.code,{children:\"bigint\"}),\". These types are immutable and are not objects. They represent the most basic forms of data in JavaScript.\"]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Primitive data types in JavaScript\"}),`\n`,(0,n.jsx)(e.h3,{children:\"String\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"A \",(0,n.jsx)(e.code,{children:\"string\"}),\" represents a sequence of characters used to represent text. Strings are created by enclosing characters in single quotes (\",(0,n.jsx)(e.code,{children:\"'\"}),\"), double quotes (\",(0,n.jsx)(e.code,{children:'\"'}),\"), or backticks (\",(0,n.jsx)(e.code,{children:\"`\"}),\").\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let name = 'John';\nlet greeting = 'Hello, world!';\nlet templateLiteral = \\`This is a template literal\\`;\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Number\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"A \",(0,n.jsx)(e.code,{children:\"number\"}),\" represents both integer and floating-point numbers. JavaScript does not differentiate between the two.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let integer = 42;\nlet float = 3.14;\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Boolean\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"A \",(0,n.jsx)(e.code,{children:\"boolean\"}),\" represents a logical entity and can have only two values: \",(0,n.jsx)(e.code,{children:\"true\"}),\" or \",(0,n.jsx)(e.code,{children:\"false\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let isJavaScriptFun = true;\nlet isTired = false;\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Null\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"null\"}),\" is a special value that represents the intentional absence of any object value. It is often used to indicate that a variable should be empty.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let emptyValue = null;\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Undefined\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"undefined\"}),\" indicates that a variable has been declared but has not yet been assigned a value.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let notAssigned;\nconsole.log(notAssigned); // undefined\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Symbol\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"A \",(0,n.jsx)(e.code,{children:\"symbol\"}),\" is a unique and immutable primitive value and may be used as the key of an object property. Symbols are created using the \",(0,n.jsx)(e.code,{children:\"Symbol()\"}),\" function.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let uniqueId = Symbol('id');\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"BigInt\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"A \",(0,n.jsx)(e.code,{children:\"bigint\"}),\" is a numeric data type that can represent integers with arbitrary precision. BigInts are created by appending \",(0,n.jsx)(e.code,{children:\"n\"}),\" to the end of an integer or by using the \",(0,n.jsx)(e.code,{children:\"BigInt()\"}),\" function.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let bigNumber = 1234567890123456789012345678901234567890n;\nlet anotherBigNumber = BigInt(1234567890123456789012345678901234567890);\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values\",children:\"MDN Web Docs: Data types\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\",children:\"MDN Web Docs: Symbol\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\",children:\"MDN Web Docs: BigInt\"})}),`\n`]})]})}function j(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(s,r)})):s(r)}var N=j;return v(D);})();\n;return Component;"
}