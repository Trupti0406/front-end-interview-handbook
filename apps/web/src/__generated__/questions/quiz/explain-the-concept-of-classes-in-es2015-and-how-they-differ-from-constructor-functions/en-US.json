{
  "description": null,
  "format": "quiz",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-the-concept-of-classes-in-es2015-and-how-they-differ-from-constructor-functions",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "premium": false,
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "explain-the-concept-of-classes-in-es2015-and-how-they-differ-from-constructor-functions",
    "subtitle": null,
    "title": "Explain the concept of classes in ES2015 and how they differ from constructor functions",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-the-concept-of-classes-in-es2015-and-how-they-differ-from-constructor-functions/en-US.mdx"
  },
  "solution": "var Component=(()=>{var h=Object.create;var s=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(c,n)=>()=>(n||c((n={exports:{}}).exports,n),n.exports),k=(c,n)=>{for(var i in n)s(c,i,{get:n[i],enumerable:!0})},o=(c,n,i,a)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let t of p(n))!g.call(c,t)&&t!==i&&s(c,t,{get:()=>n[t],enumerable:!(a=u(n,t))||a.enumerable});return c};var y=(c,n,i)=>(i=c!=null?h(m(c)):{},o(n||!c||!c.__esModule?s(i,\"default\",{value:c,enumerable:!0}):i,c)),w=c=>o(s({},\"__esModule\",{value:!0}),c);var l=f((C,r)=>{r.exports=_jsx_runtime});var D={};k(D,{default:()=>j,frontmatter:()=>b});var e=y(l()),b={title:\"Explain the concept of classes in ES2015 and how they differ from constructor functions\"};function d(c){let n=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",h3:\"h3\",ul:\"ul\",li:\"li\",a:\"a\"},c.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h2,{children:\"TL;DR\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"In ES2015, classes provide a more intuitive and cleaner syntax for creating objects and handling inheritance compared to constructor functions. Classes use the \",(0,e.jsx)(n.code,{children:\"class\"}),\" keyword and include methods like \",(0,e.jsx)(n.code,{children:\"constructor\"}),\" for initialization. Unlike constructor functions, classes support inheritance using the \",(0,e.jsx)(n.code,{children:\"extends\"}),\" keyword and the \",(0,e.jsx)(n.code,{children:\"super\"}),\" function to call parent class methods.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  speak() {\n    console.log(\\`\\${this.name} makes a noise.\\`);\n  }\n}\n\nclass Dog extends Animal {\n  speak() {\n    console.log(\\`\\${this.name} barks.\\`);\n  }\n}\n\nconst dog = new Dog('Rex');\ndog.speak(); // Rex barks.\n`})}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h2,{children:\"Classes in ES2015\"}),`\n`,(0,e.jsx)(n.h3,{children:\"Introduction to classes\"}),`\n`,(0,e.jsx)(n.p,{children:\"Classes in ES2015 (also known as ES6) provide a new syntax for creating objects and handling inheritance. They are syntactic sugar over JavaScript's existing prototype-based inheritance, making it easier to understand and work with.\"}),`\n`,(0,e.jsx)(n.h3,{children:\"Defining a class\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"A class is defined using the \",(0,e.jsx)(n.code,{children:\"class\"}),\" keyword followed by the class name. Inside the class, you can define a \",(0,e.jsx)(n.code,{children:\"constructor\"}),\" method for initializing objects and other methods for behavior.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  speak() {\n    console.log(\\`\\${this.name} makes a noise.\\`);\n  }\n}\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"Creating an instance\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"You can create an instance of a class using the \",(0,e.jsx)(n.code,{children:\"new\"}),\" keyword.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`const animal = new Animal('Lion');\nanimal.speak(); // Lion makes a noise.\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"Inheritance\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Classes support inheritance using the \",(0,e.jsx)(n.code,{children:\"extends\"}),\" keyword. The \",(0,e.jsx)(n.code,{children:\"super\"}),\" function is used to call the parent class's constructor and methods.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`class Dog extends Animal {\n  speak() {\n    console.log(\\`\\${this.name} barks.\\`);\n  }\n}\n\nconst dog = new Dog('Rex');\ndog.speak(); // Rex barks.\n`})}),`\n`,(0,e.jsx)(n.h2,{children:\"Constructor functions\"}),`\n`,(0,e.jsx)(n.h3,{children:\"Introduction to constructor functions\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Before ES2015, constructor functions were used to create objects and handle inheritance. A constructor function is a regular function that is used with the \",(0,e.jsx)(n.code,{children:\"new\"}),\" keyword to create an instance.\"]}),`\n`,(0,e.jsx)(n.h3,{children:\"Defining a constructor function\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"A constructor function is defined like any other function but is intended to be used with the \",(0,e.jsx)(n.code,{children:\"new\"}),\" keyword.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`function Animal(name) {\n  this.name = name;\n}\n\nAnimal.prototype.speak = function () {\n  console.log(\\`\\${this.name} makes a noise.\\`);\n};\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"Creating an instance\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"You can create an instance of a constructor function using the \",(0,e.jsx)(n.code,{children:\"new\"}),\" keyword.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`const animal = new Animal('Lion');\nanimal.speak(); // Lion makes a noise.\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"Inheritance\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Inheritance in constructor functions is achieved using \",(0,e.jsx)(n.code,{children:\"Object.create\"}),\" and manually setting the prototype chain.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`function Dog(name) {\n  Animal.call(this, name);\n}\n\nDog.prototype = Object.create(Animal.prototype);\nDog.prototype.constructor = Dog;\n\nDog.prototype.speak = function () {\n  console.log(\\`\\${this.name} barks.\\`);\n};\n\nconst dog = new Dog('Rex');\ndog.speak(); // Rex barks.\n`})}),`\n`,(0,e.jsx)(n.h2,{children:\"Differences between classes and constructor functions\"}),`\n`,(0,e.jsx)(n.h3,{children:\"Syntax\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"Classes use the \",(0,e.jsx)(n.code,{children:\"class\"}),\" keyword and have a cleaner, more intuitive syntax.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[\"Constructor functions are regular functions used with the \",(0,e.jsx)(n.code,{children:\"new\"}),\" keyword.\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h3,{children:\"Inheritance\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"Classes use the \",(0,e.jsx)(n.code,{children:\"extends\"}),\" keyword and \",(0,e.jsx)(n.code,{children:\"super\"}),\" function for inheritance.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[\"Constructor functions use \",(0,e.jsx)(n.code,{children:\"Object.create\"}),\" and manually set the prototype chain.\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h3,{children:\"Method definitions\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"In classes, methods are defined directly within the class body.\"}),`\n`,(0,e.jsx)(n.li,{children:\"In constructor functions, methods are added to the prototype.\"}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Further reading\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\",children:\"MDN Web Docs: Classes\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\",children:\"MDN Web Docs: Inheritance and the prototype chain\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://javascript.info/class\",children:\"JavaScript.info: Class\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://javascript.info/class-inheritance\",children:\"JavaScript.info: Class inheritance\"})}),`\n`]})]})}function x(c={}){let{wrapper:n}=c.components||{};return n?(0,e.jsx)(n,Object.assign({},c,{children:(0,e.jsx)(d,c)})):d(c)}var j=x;return w(D);})();\n;return Component;"
}