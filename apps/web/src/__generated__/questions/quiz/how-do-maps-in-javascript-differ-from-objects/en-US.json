{
  "description": null,
  "format": "quiz",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/how-do-maps-in-javascript-differ-from-objects",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "premium": false,
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "how-do-maps-in-javascript-differ-from-objects",
    "subtitle": null,
    "title": "How do `Map`s in JavaScript differ from `Object`s?",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/how-do-maps-in-javascript-differ-from-objects/en-US.mdx"
  },
  "solution": "var Component=(()=>{var h=Object.create;var t=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),j=(r,e)=>{for(var a in e)t(r,a,{get:e[a],enumerable:!0})},c=(r,e,a,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of b(e))!u.call(r,o)&&o!==a&&t(r,o,{get:()=>e[o],enumerable:!(i=p(e,o))||i.enumerable});return r};var f=(r,e,a)=>(a=r!=null?h(m(r)):{},c(e||!r||!r.__esModule?t(a,\"default\",{value:r,enumerable:!0}):a,r)),y=r=>c(t({},\"__esModule\",{value:!0}),r);var l=g((S,s)=>{s.exports=_jsx_runtime});var O={};j(O,{default:()=>k,frontmatter:()=>v});var n=f(l()),v={title:\"How do `Map`s in JavaScript differ from `Object`s?\"};function d(r){let e=Object.assign({h2:\"h2\",p:\"p\",hr:\"hr\",h3:\"h3\",ul:\"ul\",li:\"li\",strong:\"strong\",pre:\"pre\",code:\"code\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsx)(e.p,{children:\"Maps in JavaScript are collections of key-value pairs where keys can be of any data type, while objects are collections of properties where keys are always strings or symbols. Maps maintain the order of their elements, whereas objects do not guarantee order. Maps have built-in methods for iteration and size retrieval, making them more versatile for certain use cases.\"}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Maps vs. objects in JavaScript\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Key types\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Maps\"}),\": Keys can be of any data type, including objects, functions, and primitives.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Objects\"}),\": Keys are always strings or symbols.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const map = new Map();\nmap.set(1, 'one'); // number as key\nmap.set('1', 'one'); // string as key\n\nconst obj = {};\nobj[1] = 'one'; // number key is converted to string\nobj['1'] = 'one';\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Order of elements\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Maps\"}),\": Maintain the order of elements based on insertion.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Objects\"}),\": Do not guarantee the order of properties.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const map = new Map();\nmap.set('a', 1);\nmap.set('b', 2);\nconsole.log([...map.keys()]); // ['a', 'b']\n\nconst obj = { b: 2, a: 1 };\nconsole.log(Object.keys(obj)); // ['b', 'a'] (order is not guaranteed)\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Iteration\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Maps\"}),\": Provide built-in methods like \",(0,n.jsx)(e.code,{children:\"forEach\"}),\", \",(0,n.jsx)(e.code,{children:\"keys\"}),\", \",(0,n.jsx)(e.code,{children:\"values\"}),\", and \",(0,n.jsx)(e.code,{children:\"entries\"}),\" for iteration.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Objects\"}),\": Require manual iteration using \",(0,n.jsx)(e.code,{children:\"for...in\"}),\" or \",(0,n.jsx)(e.code,{children:\"Object.keys\"}),\", \",(0,n.jsx)(e.code,{children:\"Object.values\"}),\", and \",(0,n.jsx)(e.code,{children:\"Object.entries\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const map = new Map([\n  ['a', 1],\n  ['b', 2],\n]);\nmap.forEach((value, key) => console.log(key, value)); // 'a' 1, 'b' 2\n\nconst obj = { a: 1, b: 2 };\nObject.keys(obj).forEach((key) => console.log(key, obj[key])); // 'a' 1, 'b' 2\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Size retrieval\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Maps\"}),\": Have a \",(0,n.jsx)(e.code,{children:\"size\"}),\" property to get the number of elements.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Objects\"}),\": Require manual calculation using \",(0,n.jsx)(e.code,{children:\"Object.keys\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const map = new Map([\n  ['a', 1],\n  ['b', 2],\n]);\nconsole.log(map.size); // 2\n\nconst obj = { a: 1, b: 2 };\nconsole.log(Object.keys(obj).length); // 2\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Performance\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Maps\"}),\": Generally offer better performance for frequent additions and removals of key-value pairs.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Objects\"}),\": May be more performant for static key-value pairs or when using them as simple data structures.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\",children:\"MDN Web Docs: Map\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\",children:\"MDN Web Docs: Object\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/map-set\",children:\"JavaScript.info: Map and Set\"})}),`\n`]})]})}function M(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(d,r)})):d(r)}var k=M;return y(O);})();\n;return Component;"
}