{
  "description": null,
  "format": "quiz",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/how-can-you-share-code-between-files",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "premium": false,
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "how-can-you-share-code-between-files",
    "subtitle": null,
    "title": "How can you share code between files?",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/how-can-you-share-code-between-files/en-US.mdx"
  },
  "solution": "var Component=(()=>{var h=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),x=(n,e)=>{for(var o in e)r(n,o,{get:e[o],enumerable:!0})},i=(n,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of p(e))!b.call(n,a)&&a!==o&&r(n,a,{get:()=>e[a],enumerable:!(s=m(e,a))||s.enumerable});return n};var v=(n,e,o)=>(o=n!=null?h(u(n)):{},i(e||!n||!n.__esModule?r(o,\"default\",{value:n,enumerable:!0}):o,n)),w=n=>i(r({},\"__esModule\",{value:!0}),n);var d=f((D,c)=>{c.exports=_jsx_runtime});var _={};x(_,{default:()=>g,frontmatter:()=>j});var t=v(d()),j={title:\"How can you share code between files?\"};function l(n){let e=Object.assign({p:\"p\",code:\"code\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:\"This depends on the JavaScript environment.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"On the client (browser environment), as long as the variables/functions are declared in the global scope (\",(0,t.jsx)(e.code,{children:\"window\"}),\"), all scripts can refer to them. Alternatively, adopt the Asynchronous Module Definition (AMD) via RequireJS for a more modular approach.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"On the server (Node.js), the common way has been to use CommonJS. Each file is treated as a module and it can export variables and functions by attaching them to the \",(0,t.jsx)(e.code,{children:\"module.exports\"}),\" object.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"ES2015 defines a module syntax which aims to replace both AMD and CommonJS. This will eventually be supported in both browser and Node environments.\"})]})}function y(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(l,n)})):l(n)}var g=y;return w(_);})();\n;return Component;"
}