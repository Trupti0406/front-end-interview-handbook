{
  "description": null,
  "format": "quiz",
  "metadata": {
    "author": null,
    "companies": [
      "linkedin"
    ],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-event-delegation",
    "importance": "high",
    "languages": [],
    "nextQuestions": [],
    "premium": false,
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "explain-event-delegation",
    "subtitle": null,
    "title": "Explain event delegation",
    "topics": [
      "javascript",
      "html"
    ]
  },
  "solution": "var Component=(()=>{var d=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var p=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var i in e)a(t,i,{get:e[i],enumerable:!0})},o=(t,e,i,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of g(e))!v.call(t,l)&&l!==i&&a(t,l,{get:()=>e[l],enumerable:!(r=m(e,l))||r.enumerable});return t};var y=(t,e,i)=>(i=t!=null?d(u(t)):{},o(e||!t||!t.__esModule?a(i,\"default\",{value:t,enumerable:!0}):i,t)),b=t=>o(a({},\"__esModule\",{value:!0}),t);var s=p((j,c)=>{c.exports=_jsx_runtime});var D={};f(D,{default:()=>E,frontmatter:()=>w});var n=y(s()),w={title:\"Explain event delegation\"};function h(t){let e=Object.assign({p:\"p\",h2:\"h2\",ol:\"ol\",li:\"li\",strong:\"strong\",code:\"code\",pre:\"pre\",ul:\"ul\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Event delegation is a design pattern in JavaScript used to efficiently manage and handle events on multiple child elements by attaching a single event listener to a common ancestor element. This pattern is particularly valuable in scenarios where you have a large number of similar elements, such as list items, and want to streamline event handling.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"How Event Delegation works\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Attach a listener to a common ancestor\"}),\": Instead of attaching individual event listeners to each child element, you attach a single event listener to a common ancestor element higher in the DOM hierarchy.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Event bubbling\"}),\": When an event occurs on a child element, it bubbles up through the DOM tree to the common ancestor element. During this propagation, the event listener on the common ancestor can intercept and handle the event.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Determine the target\"}),\": Within the event listener, you can inspect the event object to identify the actual target of the event (the child element that triggered the event). You can use properties like \",(0,n.jsx)(e.code,{children:\"event.target\"}),\" or \",(0,n.jsx)(e.code,{children:\"event.currentTarget\"}),\" to determine which specific child element was interacted with.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Perform action based on target\"}),\": Based on the target element, you can perform the desired action or execute code specific to that element. This allows you to handle events for multiple child elements with a single event listener.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Benefits of event delegation\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Efficiency\"}),\": Event delegation reduces the number of event listeners, improving memory usage and performance, especially when dealing with a large number of elements.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Dynamic elements\"}),\": It works seamlessly with dynamically added or removed child elements, as the common ancestor continues to listen for events on them.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Example\"}),`\n`,(0,n.jsx)(e.p,{children:\"Here's a simple example using modern ES6 syntax:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// HTML:\n// <ul id=\"item-list\">\n//   <li>Item 1</li>\n//   <li>Item 2</li>\n//   <li>Item 3</li>\n// </ul>\n\nconst itemList = document.getElementById('item-list');\n\nitemList.addEventListener('click', (event) => {\n  if (event.target.tagName === 'LI') {\n    console.log(\\`Clicked on \\${event.target.textContent}\\`);\n  }\n});\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, a single click event listener is attached to the \",(0,n.jsx)(e.code,{children:\"<ul>\"}),\" element. When a click event occurs on an \",(0,n.jsx)(e.code,{children:\"<li>\"}),\" element, the event bubbles up to the \",(0,n.jsx)(e.code,{children:\"<ul>\"}),\" element, where the event listener checks the target's tag name to identify which list item was clicked.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Use Cases\"}),`\n`,(0,n.jsx)(e.p,{children:\"Event delegation is commonly used in scenarios like:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Managing lists, menus, or tables with many items or rows.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Handling dynamic content in single-page applications.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Simplifying code by avoiding the need to attach and remove event listeners for elements that change.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#event_delegation\",children:\"MDN Web Docs on Event Delegation\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/event-delegation\",children:\"JavaScript.info - Event Delegation\"})}),`\n`]})]})}function x(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var E=x;return b(D);})();\n;return Component;"
}