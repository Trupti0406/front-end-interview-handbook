{
  "description": null,
  "format": "quiz",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-the-concept-of-higher-order-functions",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "premium": false,
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "explain-the-concept-of-higher-order-functions",
    "subtitle": null,
    "title": "Explain the concept of higher-order functions",
    "topics": [
      "javascript"
    ]
  },
  "solution": "var Component=(()=>{var h=Object.create;var t=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(r,n)=>()=>(n||r((n={exports:{}}).exports,n),n.exports),b=(r,n)=>{for(var i in n)t(r,i,{get:n[i],enumerable:!0})},c=(r,n,i,o)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let a of m(n))!f.call(r,a)&&a!==i&&t(r,a,{get:()=>n[a],enumerable:!(o=u(n,a))||o.enumerable});return r};var y=(r,n,i)=>(i=r!=null?h(p(r)):{},c(n||!r||!r.__esModule?t(i,\"default\",{value:r,enumerable:!0}):i,r)),x=r=>c(t({},\"__esModule\",{value:!0}),r);var s=g((w,l)=>{l.exports=_jsx_runtime});var T={};b(T,{default:()=>k,frontmatter:()=>j});var e=y(s()),j={title:\"Explain the concept of higher-order functions\"};function d(r){let n=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",h3:\"h3\",ul:\"ul\",li:\"li\",h4:\"h4\",strong:\"strong\",a:\"a\"},r.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h2,{children:\"TL;DR\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Higher-order functions are functions that can take other functions as arguments or return them as results. They are a key feature of JavaScript and enable powerful programming patterns like callbacks, function composition, and currying. For example, \",(0,e.jsx)(n.code,{children:\"Array.prototype.map\"}),\" is a higher-order function because it takes a function as an argument and applies it to each element in the array.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`const numbers = [1, 2, 3];\nconst doubled = numbers.map((num) => num * 2); // [2, 4, 6]\n`})}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h2,{children:\"Higher-order functions\"}),`\n`,(0,e.jsx)(n.p,{children:\"Higher-order functions are a fundamental concept in functional programming and are widely used in JavaScript. They provide a way to abstract and compose behavior, making code more modular and reusable.\"}),`\n`,(0,e.jsx)(n.h3,{children:\"Definition\"}),`\n`,(0,e.jsx)(n.p,{children:\"A higher-order function is a function that either:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"Takes one or more functions as arguments\"}),`\n`,(0,e.jsx)(n.li,{children:\"Returns a function as its result\"}),`\n`]}),`\n`,(0,e.jsx)(n.h3,{children:\"Examples\"}),`\n`,(0,e.jsx)(n.h4,{children:\"Array methods\"}),`\n`,(0,e.jsx)(n.p,{children:\"Many of the built-in array methods in JavaScript are higher-order functions. For example:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.code,{children:\"Array.prototype.map\"}),\": Takes a function as an argument and applies it to each element in the array.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`const numbers = [1, 2, 3];\nconst doubled = numbers.map((num) => num * 2); // [2, 4, 6]\n`})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.code,{children:\"Array.prototype.filter\"}),\": Takes a function as an argument and returns a new array with elements that pass the test implemented by the provided function.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`const numbers = [1, 2, 3, 4];\nconst even = numbers.filter((num) => num % 2 === 0); // [2, 4]\n`})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.code,{children:\"Array.prototype.reduce\"}),\": Takes a function as an argument and applies it against an accumulator and each element in the array to reduce it to a single value.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((acc, num) => acc + num, 0); // 10\n`})}),`\n`]}),`\n`]}),`\n`,(0,e.jsx)(n.h4,{children:\"Function returning another function\"}),`\n`,(0,e.jsx)(n.p,{children:\"A higher-order function can also return another function. This is useful for creating function factories or for currying.\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:\"Function factory example:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`function createMultiplier(multiplier) {\n  return function (num) {\n    return num * multiplier;\n  };\n}\n\nconst double = createMultiplier(2);\nconsole.log(double(5)); // 10\n`})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:\"Currying example:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`function add(a) {\n  return function (b) {\n    return a + b;\n  };\n}\n\nconst addFive = add(5);\nconsole.log(addFive(3)); // 8\n`})}),`\n`]}),`\n`]}),`\n`,(0,e.jsx)(n.h3,{children:\"Benefits\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Modularity\"}),\": Higher-order functions help in breaking down complex problems into smaller, reusable functions.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Abstraction\"}),\": They allow for abstracting common patterns, making the code more readable and maintainable.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Composition\"}),\": They enable function composition, where small functions are combined to build more complex functions.\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Further reading\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Glossary/Higher-order_function\",children:\"MDN Web Docs: Higher-order function\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://eloquentjavascript.net/05_higher_order.html\",children:\"Eloquent JavaScript: Higher-order functions\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://javascript.info/functional-programming#higher-order-functions\",children:\"JavaScript.info: Higher-order functions\"})}),`\n`]})]})}function v(r={}){let{wrapper:n}=r.components||{};return n?(0,e.jsx)(n,Object.assign({},r,{children:(0,e.jsx)(d,r)})):d(r)}var k=v;return x(T);})();\n;return Component;"
}