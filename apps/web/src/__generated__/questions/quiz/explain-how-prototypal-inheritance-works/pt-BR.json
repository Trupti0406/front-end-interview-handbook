{
  "description": null,
  "format": "quiz",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-how-prototypal-inheritance-works",
    "importance": "high",
    "languages": [],
    "nextQuestions": [],
    "premium": false,
    "published": true,
    "ranking": 1,
    "similarQuestions": [],
    "slug": "explain-how-prototypal-inheritance-works",
    "subtitle": null,
    "title": "Explique como funciona a herança de protótipos",
    "topics": [
      "javascript"
    ]
  },
  "solution": "var Component=(()=>{var m=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var b=(n,o)=>()=>(o||n((o={exports:{}}).exports,o),o.exports),_=(n,o)=>{for(var a in o)r(n,a,{get:o[a],enumerable:!0})},i=(n,o,a,c)=>{if(o&&typeof o==\"object\"||typeof o==\"function\")for(let t of h(o))!j.call(n,t)&&t!==a&&r(n,t,{get:()=>o[t],enumerable:!(c=p(o,t))||c.enumerable});return n};var f=(n,o,a)=>(a=n!=null?m(u(n)):{},i(o||!n||!n.__esModule?r(a,\"default\",{value:n,enumerable:!0}):a,n)),g=n=>i(r({},\"__esModule\",{value:!0}),n);var s=b((D,d)=>{d.exports=_jsx_runtime});var A={};_(A,{default:()=>O,frontmatter:()=>x});var e=f(s()),x={title:\"Explique como funciona a heran\\xE7a de prot\\xF3tipos\"};function l(n){let o=Object.assign({p:\"p\",code:\"code\",a:\"a\",h2:\"h2\",pre:\"pre\",ul:\"ul\",li:\"li\"},n.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(o.p,{children:[\"Essa \\xE9 uma pergunta extremamente comum em entrevistas de JavaScript. Todos os objetos JavaScript t\\xEAm uma propriedade \",(0,e.jsx)(o.code,{children:\"__proto__\"}),\" com exce\\xE7\\xE3o de objetos criados com \",(0,e.jsx)(o.code,{children:\"object.create(null)\"}),', ou seja, uma refer\\xEAncia a outro objeto, que \\xE9 chamado de \"prot\\xF3tipo\" do objeto. Quando uma propriedade \\xE9 acessada em um objeto e se a propriedade n\\xE3o \\xE9 encontrada nesse objeto, o motor de JavaScript olha para o objeto ',(0,e.jsx)(o.code,{children:\"__proto__\"}),\", e o \",(0,e.jsx)(o.code,{children:\"__proto__\"}),\" do \",(0,e.jsx)(o.code,{children:\"__proto__\"}),\" e assim por diante, at\\xE9 que encontre a propriedade definida em um dos \",(0,e.jsx)(o.code,{children:\"__proto__\"}),\"s ou at\\xE9 chegar ao final da cadeia de prot\\xF3tipos. Este comportamento simula a heran\\xE7a cl\\xE1ssica, mas \\xE9 realmente mais de \",(0,e.jsx)(o.a,{href:\"https://davidwalsh.name/javascript-objects\",children:\"delega\\xE7\\xE3o do que heran\\xE7a\"}),\".\"]}),`\n`,(0,e.jsx)(o.h2,{children:\"Exemplo de Heran\\xE7a de Prot\\xF3tipos\"}),`\n`,(0,e.jsx)(o.pre,{children:(0,e.jsx)(o.code,{className:\"language-js\",children:`// Construtor de objeto pai.\nfunction Animal(name) {\n  this.name = name;\n}\n\n// Adiciona um m\\xE9todo ao prot\\xF3tipo do objeto pai.\nAnimal.prototype.makeSound = function () {\n  console.log('O ' + this.constructor.name + ' faz um som.');\n};\n\n// Construtor filho.\nfunction Dog(name) {\n  Animal.call(this, name); // Chama o construtor pai.\n}\n\n// Define o prot\\xF3tipo do objeto filho para ser uma nova inst\\xE2ncia do objeto pai.\nDog.prototype = Object.create(Animal.prototype);\n\n// Adiciona um m\\xE9todo ao prot\\xF3tipo do objeto filho.\nDog.prototype.bark = function () {\n  console.log('Woof!');\n};\n\n// Criar uma nova inst\\xE2ncia do Cachorro.\nconst bolt = new Dog('Bolt');\n\n// Chama m\\xE9todos no objeto filho.\nconsole.log(bolt.name); // \"Bolt\"\nbolt.makeSound(); // \"O c\\xE3o faz um som.\"\nbolt.bark(); // \"Woof!\"\n`})}),`\n`,(0,e.jsx)(o.p,{children:\"As coisas a observar s\\xE3o:\"}),`\n`,(0,e.jsxs)(o.ul,{children:[`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.code,{children:\".makeSound\"}),\" n\\xE3o est\\xE1 definido em \",(0,e.jsx)(o.code,{children:\"Dog\"}),\", ent\\xE3o o navegador aumenta a cadeia de prot\\xF3tipos e encontra \",(0,e.jsx)(o.code,{children:\".makeSound\"}),\" para fora do \",(0,e.jsx)(o.code,{children:\"Animal\"}),\" herdado.\"]}),`\n`,(0,e.jsxs)(o.li,{children:[\"Precisamos chamar \",(0,e.jsx)(o.code,{children:\"Object.create\"}),\" de uma das seguintes maneiras para os m\\xE9todos do prot\\xF3tipo serem herdados:\",`\n`,(0,e.jsxs)(o.ul,{children:[`\n`,(0,e.jsx)(o.li,{children:(0,e.jsx)(o.code,{children:\"Object.create(Parent.prototype)\"})}),`\n`,(0,e.jsx)(o.li,{children:(0,e.jsx)(o.code,{children:\"Object.create(new Parent(null))\"})}),`\n`,(0,e.jsx)(o.li,{children:(0,e.jsx)(o.code,{children:\"Object.create(objLiteral)\"})}),`\n`]}),`\n`]}),`\n`]})]})}function v(n={}){let{wrapper:o}=n.components||{};return o?(0,e.jsx)(o,Object.assign({},n,{children:(0,e.jsx)(l,n)})):l(n)}var O=v;return g(A);})();\n;return Component;"
}