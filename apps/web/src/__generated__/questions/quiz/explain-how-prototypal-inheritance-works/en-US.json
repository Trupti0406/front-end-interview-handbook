{
  "description": null,
  "format": "quiz",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-how-prototypal-inheritance-works",
    "importance": "high",
    "languages": [],
    "nextQuestions": [],
    "premium": false,
    "published": true,
    "ranking": 1,
    "similarQuestions": [],
    "slug": "explain-how-prototypal-inheritance-works",
    "subtitle": null,
    "title": "Explain how prototypal inheritance works",
    "topics": [
      "javascript"
    ]
  },
  "solution": "var Component=(()=>{var s=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),j=(t,e)=>{for(var o in e)r(t,o,{get:e[o],enumerable:!0})},a=(t,e,o,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of m(e))!b.call(t,c)&&c!==o&&r(t,c,{get:()=>e[c],enumerable:!(i=p(e,c))||i.enumerable});return t};var _=(t,e,o)=>(o=t!=null?s(u(t)):{},a(e||!t||!t.__esModule?r(o,\"default\",{value:t,enumerable:!0}):o,t)),g=t=>a(r({},\"__esModule\",{value:!0}),t);var h=f((v,l)=>{l.exports=_jsx_runtime});var k={};j(k,{default:()=>x,frontmatter:()=>y});var n=_(h()),y={title:\"Explain how prototypal inheritance works\"};function d(t){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",h2:\"h2\",pre:\"pre\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"This is an extremely common JavaScript interview question. All JavaScript objects have a \",(0,n.jsx)(e.code,{children:\"__proto__\"}),\" property with the exception of objects created with \",(0,n.jsx)(e.code,{children:\"Object.create(null)\"}),`, that is a reference to another object, which is called the object's \"prototype\". When a property is accessed on an object and if the property is not found on that object, the JavaScript engine looks at the object's `,(0,n.jsx)(e.code,{children:\"__proto__\"}),\", and the \",(0,n.jsx)(e.code,{children:\"__proto__\"}),\"'s \",(0,n.jsx)(e.code,{children:\"__proto__\"}),\" and so on, until it finds the property defined on one of the \",(0,n.jsx)(e.code,{children:\"__proto__\"}),\"s or until it reaches the end of the prototype chain. This behavior simulates classical inheritance, but it is really more of \",(0,n.jsx)(e.a,{href:\"https://davidwalsh.name/javascript-objects\",children:\"delegation than inheritance\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Example of Prototypal Inheritance\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// Parent object constructor.\nfunction Animal(name) {\n  this.name = name;\n}\n\n// Add a method to the parent object's prototype.\nAnimal.prototype.makeSound = function () {\n  console.log('The ' + this.constructor.name + ' makes a sound.');\n};\n\n// Child object constructor.\nfunction Dog(name) {\n  Animal.call(this, name); // Call the parent constructor.\n}\n\n// Set the child object's prototype to be a new instance of the parent object.\nDog.prototype = Object.create(Animal.prototype);\n\n// Add a method to the child object's prototype.\nDog.prototype.bark = function () {\n  console.log('Woof!');\n};\n\n// Create a new instance of Dog.\nconst bolt = new Dog('Bolt');\n\n// Call methods on the child object.\nconsole.log(bolt.name); // \"Bolt\"\nbolt.makeSound(); // \"The Dog makes a sound.\"\nbolt.bark(); // \"Woof!\"\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Things to note are:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\".makeSound\"}),\" is not defined on \",(0,n.jsx)(e.code,{children:\"Dog\"}),\", so the engine goes up the prototype chain and finds \",(0,n.jsx)(e.code,{children:\".makeSound\"}),\" off the inherited \",(0,n.jsx)(e.code,{children:\"Animal\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"We need to call \",(0,n.jsx)(e.code,{children:\"Object.create\"}),\" in one of following ways for the prototype methods to be inherited:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"Object.create(Parent.prototype)\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"Object.create(new Parent(null))\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"Object.create(objLiteral)\"})}),`\n`]}),`\n`]}),`\n`]})]})}function w(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var x=w;return g(k);})();\n;return Component;"
}