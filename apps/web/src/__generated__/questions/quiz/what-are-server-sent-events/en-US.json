{
  "description": null,
  "format": "quiz",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "hard",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-are-server-sent-events",
    "importance": "mid",
    "languages": [],
    "nextQuestions": [],
    "premium": false,
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "what-are-server-sent-events",
    "subtitle": null,
    "title": "What are server sent events ?",
    "topics": [
      "javascript"
    ]
  },
  "solution": "var Component=(()=>{var h=Object.create;var i=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),S=(t,e)=>{for(var r in e)i(t,r,{get:e[r],enumerable:!0})},c=(t,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of p(e))!m.call(t,s)&&s!==r&&i(t,s,{get:()=>e[s],enumerable:!(o=v(e,s))||o.enumerable});return t};var f=(t,e,r)=>(r=t!=null?h(u(t)):{},c(e||!t||!t.__esModule?i(r,\"default\",{value:t,enumerable:!0}):r,t)),w=t=>c(i({},\"__esModule\",{value:!0}),t);var l=g((x,a)=>{a.exports=_jsx_runtime});var T={};S(T,{default:()=>y,frontmatter:()=>b});var n=f(l()),b={title:\"What are server sent events ?\"};function d(t){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",code:\"code\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",strong:\"strong\",pre:\"pre\",hr:\"hr\",h3:\"h3\",ol:\"ol\",li:\"li\",ul:\"ul\",h4:\"h4\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://html.spec.whatwg.org/multipage/comms.html#the-eventsource-interface\",children:(0,n.jsx)(e.code,{children:\"Server-sent events (SSE)\"})}),\" is a standard that allows a web page to receive automatic updates from a server via an HTTP connection. \",(0,n.jsx)(e.code,{children:\"Server-sent events\"}),\" describe a built-in-class \",(0,n.jsx)(e.code,{children:\"EventSource\"}),\" that keeps connection with the server and allows client to receive events from server. Connection created by \",(0,n.jsx)(e.code,{children:\"Server-sent events\"}),\" are persistent similar to the \",(0,n.jsx)(e.code,{children:\"WebSocket\"}),\", however there are several differences:\"]}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"WebSocket\"}),(0,n.jsx)(e.th,{children:\"EventSource\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Bi-directional: both client and server can exchange messages\"}),(0,n.jsx)(e.td,{children:\"One-directional: only server sends data\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Binary and text data\"}),(0,n.jsx)(e.td,{children:\"Only text\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"WebSocket protocol\"}),(0,n.jsx)(e.td,{children:\"Regular HTTP\"})]})]})]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Creating an EventSource\"})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const eventSource = new EventSource('/sse-stream');\n`})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Listening for events\"})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// Fired when the connection is established.\neventSource.addEventListener('open', () => {\n  console.log('Connection opened');\n});\n\n// Fired when a message is received from the server\neventSource.addEventListener('message', (event) => {\n  console.log('Received message:', event.data);\n});\n\n// Fired when an error occurs.\neventSource.addEventListener('error', (error) => {\n  console.error('Error occurred:', error);\n});\n`})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Sending events from server\"})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const express = require('express');\nconst app = express();\n\napp.get('/sse-stream', (req, res) => {\n  // \\`Content-Type\\` need to be set to \\`text/event-stream\\`\n  res.setHeader('Content-Type', 'text/event-stream');\n  res.setHeader('Cache-Control', 'no-cache');\n  res.setHeader('Connection', 'keep-alive');\n\n  // Each message should be prefixed with data\n  const sendEvent = (data) => res.write(\\`data: \\${data}\\\\n\\\\n\\`);\n\n  sendEvent('Hello from server');\n\n  const intervalId = setInterval(() => sendEvent(new Date().toString()), 1000);\n\n  res.on('close', () => {\n    console.log('Client closed connection');\n    clearInterval(intervalId);\n  });\n});\n\napp.listen(3000, () => console.log('Server started on port 3000'));\n`})}),`\n`,(0,n.jsx)(e.p,{children:'In this example, the server sends a \"Hello from server\" message initially, and then sends the current date every second. The connection is kept alive until the client closes it'}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:(0,n.jsx)(e.code,{children:\"Server-sent events\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Server-Sent Events (SSE) is a standard that allows a server to push updates to a web client over a single, long-lived HTTP connection. It enables real-time updates without the client having to constantly poll the server for new data.\"}),`\n`,(0,n.jsxs)(e.h3,{children:[\"How \",(0,n.jsx)(e.code,{children:\"SSE\"}),\" works:\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"The client creates a new \",(0,n.jsx)(e.code,{children:\"EventSource\"}),\" object, passing the URL of the \",(0,n.jsx)(e.code,{children:\"server-side\"}),\" script that will generate the event stream:\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const eventSource = new EventSource('/event-stream');\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"2\",children:[`\n`,(0,n.jsxs)(e.li,{children:[\"The server-side script sets the appropriate headers to indicate that it will be sending an event stream (\",(0,n.jsx)(e.code,{children:\"Content-Type: text/event-stream\"}),\"), and then starts sending events to the client.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Each event sent by the server follows a specific format, with fields like \",(0,n.jsx)(e.code,{children:\"event\"}),\", \",(0,n.jsx)(e.code,{children:\"data\"}),\", and \",(0,n.jsx)(e.code,{children:\"id\"}),\". For example:\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`event: message\ndata: Hello, world!\n\nevent: update\nid: 123\ndata: {\"temperature\": 25, \"humidity\": 60}\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"4\",children:[`\n`,(0,n.jsxs)(e.li,{children:[\"On the client-side, the \",(0,n.jsx)(e.code,{children:\"EventSource\"}),\" object receives these events and dispatches them as \",(0,n.jsx)(e.code,{children:\"DOM\"}),\" events, which can be handled using event listeners or the \",(0,n.jsx)(e.code,{children:\"onmessage\"}),\" event handler:\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`eventSource.onmessage = function (event) {\n  console.log('Received message:', event.data);\n};\n\neventSource.addEventListener('update', function (event) {\n  console.log('Received update:', JSON.parse(event.data));\n});\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"5\",children:[`\n`,(0,n.jsxs)(e.li,{children:[\"The \",(0,n.jsx)(e.code,{children:\"EventSource\"}),\" object automatically handles reconnection if the connection is lost, and it can resume the event stream from the last received event ID using the \",(0,n.jsx)(e.code,{children:\"Last-Event-ID HTTP header\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Advantages of \",(0,n.jsx)(e.code,{children:\"SSE\"})]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Simpler than WebSockets\"}),\": Easier to implement and understand than \",(0,n.jsx)(e.code,{children:\"WebSockets\"}),\" for many use cases.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Automatic Reconnection\"}),\": The client handles reconnections automatically.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Lightweight\"}),\": Uses simple text-based messages and a single \",(0,n.jsx)(e.code,{children:\"HTTP\"}),\" connection.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Built-in Browser Support\"}),\": Supported by most modern browsers without additional libraries.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Disadvantages of SSE\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Unidirectional\"}),\": Only the server can send data to the client. For bidirectional communication, WebSockets would be more appropriate.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Connection Limitations\"}),\": Limited to the maximum number of open \",(0,n.jsx)(e.code,{children:\"HTTP\"}),\" connections per browser, which can be an issue with many clients.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Implementing \",(0,n.jsx)(e.code,{children:\"SSE\"}),\" in JavaScript\"]}),`\n`,(0,n.jsx)(e.h4,{children:\"Client-Side Code:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// Create a new EventSource object\nconst eventSource = new EventSource('/sse');\n\n// Event listener for receiving messages\neventSource.onmessage = function (event) {\n  console.log('New message:', event.data);\n};\n\n// Event listener for errors\neventSource.onerror = function (error) {\n  console.error('Error occurred:', error);\n};\n\n// Optional: Event listener for open connection\neventSource.onopen = function () {\n  console.log('Connection opened');\n};\n`})}),`\n`,(0,n.jsx)(e.h4,{children:\"Server-Side Code:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const http = require('http');\n\nhttp\n  .createServer((req, res) => {\n    if (req.url === '/sse') {\n      // Set headers for SSE\n      res.writeHead(200, {\n        'Content-Type': 'text/event-stream',\n        'Cache-Control': 'no-cache',\n        Connection: 'keep-alive',\n      });\n\n      // Function to send a message\n      const sendMessage = (message) => {\n        res.write(\\`data: \\${message}\\\\n\\\\n\\`);\n      };\n\n      // Send a message every 5 seconds\n      const intervalId = setInterval(() => {\n        sendMessage(\\`Current time: \\${new Date().toLocaleTimeString()}\\`);\n      }, 5000);\n\n      // Handle client disconnect\n      req.on('close', () => {\n        clearInterval(intervalId);\n        res.end();\n      });\n    } else {\n      res.writeHead(404);\n      res.end();\n    }\n  })\n  .listen(8080, () => {\n    console.log('SSE server running on port 8080');\n  });\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"In this example:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"The server sets the appropriate headers to establish an \",(0,n.jsx)(e.code,{children:\"SSE\"}),\" connection.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Messages are sent to the client every 5 seconds.\"}),`\n`,(0,n.jsx)(e.li,{children:\"The server cleans up the interval and ends the response when the client disconnects.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Considerations\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Event Types\"}),\": \",(0,n.jsx)(e.code,{children:\"SSE\"}),\" supports custom event types using the \",(0,n.jsx)(e.code,{children:\"event:\"}),\" field, allowing you to categorize messages.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Retry Mechanism\"}),\": The client will retry the connection if it fails, with the retry interval specified by the \",(0,n.jsx)(e.code,{children:\"retry:\"}),\" field from the server.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Last-Event-ID\"}),\": The client sends the \",(0,n.jsx)(e.code,{children:\"Last-Event-ID\"}),\" header when reconnecting, allowing the server to resume the stream from the last received event.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"CORS and Authentication\"}),\": Ensure \",(0,n.jsx)(e.code,{children:\"CORS\"}),\" headers are correctly configured for cross-origin requests, and consider secure methods for authentication and authorization.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Summary\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"Server-sent Events\"}),\" provide an efficient and straightforward way to push updates from a server to a client in real-time. They are particularly well-suited for applications that require continuous data streams but do not need full \",(0,n.jsx)(e.code,{children:\"bidirectional\"}),\" communication. With built-in support in modern browsers, \",(0,n.jsx)(e.code,{children:\"SSE\"}),\" is a reliable choice for many real-time web applications.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events\",children:\"Using server-sent events - MDN\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/server-sent-events\",children:\"Server sent events - javascript.info\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://ably.com/topic/server-sent-events\",children:\"Server-Sent Events: A webSockets alternative ready for another look\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://bunny.net/academy/http/what-is-sse-server-sent-events-and-how-do-they-work/\",children:\"What are SSE (Server-Sent Events) and how do they work?\"})}),`\n`]})]})}function E(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var y=E;return w(T);})();\n;return Component;"
}