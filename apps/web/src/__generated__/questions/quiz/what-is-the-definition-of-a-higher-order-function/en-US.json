{
  "description": null,
  "format": "quiz",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-is-the-definition-of-a-higher-order-function",
    "importance": "mid",
    "languages": [],
    "nextQuestions": [],
    "premium": false,
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "what-is-the-definition-of-a-higher-order-function",
    "subtitle": null,
    "title": "What is the definition of a higher-order function?",
    "topics": [
      "javascript"
    ]
  },
  "solution": "var Component=(()=>{var m=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var l=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),y=(a,e)=>{for(var r in e)s(a,r,{get:e[r],enumerable:!0})},c=(a,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of u(e))!f.call(a,t)&&t!==r&&s(a,t,{get:()=>e[t],enumerable:!(o=p(e,t))||o.enumerable});return a};var x=(a,e,r)=>(r=a!=null?m(l(a)):{},c(e||!a||!a.__esModule?s(r,\"default\",{value:a,enumerable:!0}):r,a)),j=a=>c(s({},\"__esModule\",{value:!0}),a);var h=g((b,i)=>{i.exports=_jsx_runtime});var U={};y(U,{default:()=>A,frontmatter:()=>N});var n=x(h()),N={title:\"What is the definition of a higher-order function?\"};function d(a){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\"},a.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"A higher-order function is any function that takes one or more functions as arguments, which it uses to operate on some data, and/or returns a function as a result. Higher-order functions are meant to abstract some operation that is performed repeatedly. The classic example of this is \",(0,n.jsx)(e.code,{children:\"map\"}),\", which takes an array and a function as arguments. \",(0,n.jsx)(e.code,{children:\"map\"}),\" then uses this function to transform each item in the array, returning a new array with the transformed data. Other popular examples in JavaScript are \",(0,n.jsx)(e.code,{children:\"forEach\"}),\", \",(0,n.jsx)(e.code,{children:\"filter\"}),\", and \",(0,n.jsx)(e.code,{children:\"reduce\"}),\". A higher-order function doesn't just need to be manipulating arrays as there are many use cases for returning a function from another function. \",(0,n.jsx)(e.code,{children:\"Function.prototype.bind\"}),\" is one such example in JavaScript.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Map\"}),`\n`,(0,n.jsx)(e.p,{children:\"Let's say we have an array of names that we need to transform to uppercase.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const names = ['irish', 'daisy', 'anna'];\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"The imperative way will be as such:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const transformNamesToUppercase = function (names) {\n  const results = [];\n  for (let i = 0; i < names.length; i++) {\n    results.push(names[i].toUpperCase());\n  }\n  return results;\n};\ntransformNamesToUppercase(names); // ['IRISH', 'DAISY', 'ANNA']\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Use \",(0,n.jsx)(e.code,{children:\".map(transformerFn)\"}),\" makes the code shorter and more declarative.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const transformNamesToUppercase = function (names) {\n  return names.map((name) => name.toUpperCase());\n};\ntransformNamesToUppercase(names); // ['IRISH', 'DAISY', 'ANNA']\n`})})]})}function w(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,Object.assign({},a,{children:(0,n.jsx)(d,a)})):d(a)}var A=w;return j(U);})();\n;return Component;"
}