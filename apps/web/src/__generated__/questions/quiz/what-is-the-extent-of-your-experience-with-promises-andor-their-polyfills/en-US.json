{
  "description": null,
  "format": "quiz",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-is-the-extent-of-your-experience-with-promises-andor-their-polyfills",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "premium": false,
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "what-is-the-extent-of-your-experience-with-promises-andor-their-polyfills",
    "subtitle": null,
    "title": "What is the extent of your experience with Promises and/or their polyfills?",
    "topics": [
      "javascript"
    ]
  },
  "solution": "var Component=(()=>{var m=Object.create;var s=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var x=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),y=(e,t)=>{for(var n in t)s(e,n,{get:t[n],enumerable:!0})},a=(e,t,n,i)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let r of u(t))!p.call(e,r)&&r!==n&&s(e,r,{get:()=>t[r],enumerable:!(i=h(t,r))||i.enumerable});return e};var j=(e,t,n)=>(n=e!=null?m(f(e)):{},a(t||!e||!e.__esModule?s(n,\"default\",{value:e,enumerable:!0}):n,e)),b=e=>a(s({},\"__esModule\",{value:!0}),e);var c=x((P,l)=>{l.exports=_jsx_runtime});var v={};y(v,{default:()=>w,frontmatter:()=>g});var o=j(c()),g={title:\"What is the extent of your experience with Promises and/or their polyfills?\"};function d(e){let t=Object.assign({p:\"p\",code:\"code\"},e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:\"Possess working knowledge of it. A promise is an object that may produce a single value sometime in the future: either a resolved value or a reason that it's not resolved (e.g., a network error occurred). A promise may be in one of 3 possible states: fulfilled, rejected, or pending. Promise users can attach callbacks to handle the fulfilled value or the reason for rejection.\"}),`\n`,(0,o.jsxs)(t.p,{children:[\"Some common polyfills are \",(0,o.jsx)(t.code,{children:\"$.deferred\"}),\", Q and Bluebird but not all of them comply with the specification. ES2015 supports Promises out of the box and polyfills are typically not needed these days.\"]})]})}function _(e={}){let{wrapper:t}=e.components||{};return t?(0,o.jsx)(t,Object.assign({},e,{children:(0,o.jsx)(d,e)})):d(e)}var w=_;return b(v);})();\n;return Component;"
}