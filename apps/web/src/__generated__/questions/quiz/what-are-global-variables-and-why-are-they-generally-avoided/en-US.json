{
  "description": null,
  "format": "quiz",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-are-global-variables-and-why-are-they-generally-avoided",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "premium": false,
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "what-are-global-variables-and-why-are-they-generally-avoided",
    "subtitle": null,
    "title": "What are global variables and why are they generally avoided?",
    "topics": [
      "javascript"
    ]
  },
  "solution": "var Component=(()=>{var h=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var p=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),m=(a,e)=>{for(var l in e)o(a,l,{get:e[l],enumerable:!0})},c=(a,e,l,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of g(e))!f.call(a,t)&&t!==l&&o(a,t,{get:()=>e[t],enumerable:!(i=u(e,t))||i.enumerable});return a};var v=(a,e,l)=>(l=a!=null?h(b(a)):{},c(e||!a||!a.__esModule?o(l,\"default\",{value:a,enumerable:!0}):l,a)),S=a=>c(o({},\"__esModule\",{value:!0}),a);var s=p((j,r)=>{r.exports=_jsx_runtime});var w={};m(w,{default:()=>x,frontmatter:()=>y});var n=v(s()),y={title:\"What are global variables and why are they generally avoided?\"};function d(a){let e=Object.assign({h2:\"h2\",p:\"p\",hr:\"hr\",h3:\"h3\",code:\"code\",pre:\"pre\",h4:\"h4\",ul:\"ul\",li:\"li\",a:\"a\"},a.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsx)(e.p,{children:\"Global variables are variables that are declared outside of any function or block and are accessible from any part of the code. They are generally avoided because they can lead to code that is difficult to debug and maintain. This is due to the potential for name collisions, unintended side effects, and the difficulty in tracking the state of the variable throughout the application.\"}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"What are global variables and why are they generally avoided?\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Definition of global variables\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Global variables are variables that are declared outside of any function, block, or module, making them accessible from any part of the code. In JavaScript, a variable becomes global if it is declared outside of any function or if it is declared without the \",(0,n.jsx)(e.code,{children:\"var\"}),\", \",(0,n.jsx)(e.code,{children:\"let\"}),\", or \",(0,n.jsx)(e.code,{children:\"const\"}),\" keywords.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// Global variable\nvar globalVar = 'I am a global variable';\n\nfunction exampleFunction() {\n  console.log(globalVar); // Accessible here\n}\n\nexampleFunction();\nconsole.log(globalVar); // Accessible here as well\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Why global variables are generally avoided\"}),`\n`,(0,n.jsx)(e.h4,{children:\"Name collisions\"}),`\n`,(0,n.jsx)(e.p,{children:\"Global variables can lead to name collisions, where multiple variables with the same name exist in different parts of the code. This can cause unexpected behavior and bugs that are difficult to trace.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`var globalVar = 'First declaration';\n\nfunction firstFunction() {\n  globalVar = 'Modified in firstFunction';\n}\n\nfunction secondFunction() {\n  var globalVar = 'Local to secondFunction';\n  console.log(globalVar); // Outputs: \"Local to secondFunction\"\n}\n\nfirstFunction();\nsecondFunction();\nconsole.log(globalVar); // Outputs: \"Modified in firstFunction\"\n`})}),`\n`,(0,n.jsx)(e.h4,{children:\"Unintended side effects\"}),`\n`,(0,n.jsx)(e.p,{children:\"Since global variables can be accessed and modified from anywhere in the code, it is easy to accidentally change their values, leading to unintended side effects.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`var counter = 0;\n\nfunction incrementCounter() {\n  counter++;\n}\n\nfunction resetCounter() {\n  counter = 0;\n}\n\nincrementCounter();\nconsole.log(counter); // Outputs: 1\nresetCounter();\nconsole.log(counter); // Outputs: 0\n`})}),`\n`,(0,n.jsx)(e.h4,{children:\"Difficulty in tracking state\"}),`\n`,(0,n.jsx)(e.p,{children:\"Global variables make it harder to track the state of the application, as their values can be changed from any part of the code. This can make debugging and maintaining the code more challenging.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`var appState = 'initial';\n\nfunction changeState(newState) {\n  appState = newState;\n}\n\nfunction logState() {\n  console.log(appState);\n}\n\nchangeState('loading');\nlogState(); // Outputs: \"loading\"\nchangeState('complete');\nlogState(); // Outputs: \"complete\"\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Best practices\"}),`\n`,(0,n.jsx)(e.p,{children:\"To avoid the issues associated with global variables, it is recommended to:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Use local variables within functions and blocks\"}),`\n`,(0,n.jsx)(e.li,{children:\"Use modules to encapsulate variables and functions\"}),`\n`,(0,n.jsx)(e.li,{children:\"Use closures to create private variables\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Use \",(0,n.jsx)(e.code,{children:\"const\"}),\" and \",(0,n.jsx)(e.code,{children:\"let\"}),\" to declare variables with block scope\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function exampleFunction() {\n  let localVar = 'I am a local variable';\n  console.log(localVar); // Accessible here\n}\n\nexampleFunction();\nconsole.log(localVar); // ReferenceError: localVar is not defined\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Glossary/Scope\",children:\"MDN Web Docs: JavaScript Scoping\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\",children:\"MDN Web Docs: var\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\",children:\"MDN Web Docs: let\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\",children:\"MDN Web Docs: const\"})}),`\n`]})]})}function F(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,Object.assign({},a,{children:(0,n.jsx)(d,a)})):d(a)}var x=F;return S(w);})();\n;return Component;"
}