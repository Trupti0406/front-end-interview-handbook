{
  "description": null,
  "format": "quiz",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/how-does-the-this-keyword-behave-in-arrow-functions",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "premium": false,
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "how-does-the-this-keyword-behave-in-arrow-functions",
    "subtitle": null,
    "title": "How does the `this` keyword behave in arrow functions?",
    "topics": [
      "javascript"
    ]
  },
  "solution": "var Component=(()=>{var d=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),m=(r,e)=>{for(var i in e)o(r,i,{get:e[i],enumerable:!0})},h=(r,e,i,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of f(e))!w.call(r,t)&&t!==i&&o(r,t,{get:()=>e[t],enumerable:!(c=u(e,t))||c.enumerable});return r};var v=(r,e,i)=>(i=r!=null?d(p(r)):{},h(e||!r||!r.__esModule?o(i,\"default\",{value:r,enumerable:!0}):i,r)),b=r=>h(o({},\"__esModule\",{value:!0}),r);var a=g((k,s)=>{s.exports=_jsx_runtime});var P={};m(P,{default:()=>j,frontmatter:()=>x});var n=v(a()),x={title:\"How does the `this` keyword behave in arrow functions?\"};function l(r){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",h3:\"h3\",ul:\"ul\",li:\"li\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In arrow functions, the \",(0,n.jsx)(e.code,{children:\"this\"}),\" keyword retains the value of the enclosing lexical context. Unlike regular functions, arrow functions do not have their own \",(0,n.jsx)(e.code,{children:\"this\"}),\" context. Instead, they inherit \",(0,n.jsx)(e.code,{children:\"this\"}),\" from the parent scope at the time they are defined. This makes arrow functions particularly useful for maintaining the correct \",(0,n.jsx)(e.code,{children:\"this\"}),\" value in callbacks and event handlers.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function Person() {\n  this.age = 0;\n\n  setInterval(() => {\n    this.age++; // \\`this\\` refers to the Person instance\n  }, 1000);\n}\n\nconst person = new Person();\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.h2,{children:[\"How does the \",(0,n.jsx)(e.code,{children:\"this\"}),\" keyword behave in arrow functions?\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Lexical scoping\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Arrow functions do not have their own \",(0,n.jsx)(e.code,{children:\"this\"}),\" context. Instead, they lexically bind \",(0,n.jsx)(e.code,{children:\"this\"}),\", meaning they inherit \",(0,n.jsx)(e.code,{children:\"this\"}),\" from the parent scope in which they are defined. This is different from regular functions, which have their own \",(0,n.jsx)(e.code,{children:\"this\"}),\" context.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Example\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Consider the following example to illustrate the behavior of \",(0,n.jsx)(e.code,{children:\"this\"}),\" in arrow functions:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function Person() {\n  this.age = 0;\n\n  setInterval(() => {\n    this.age++; // \\`this\\` refers to the Person instance\n    console.log(this.age);\n  }, 1000);\n}\n\nconst person = new Person();\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, the arrow function inside \",(0,n.jsx)(e.code,{children:\"setInterval\"}),\" inherits \",(0,n.jsx)(e.code,{children:\"this\"}),\" from the \",(0,n.jsx)(e.code,{children:\"Person\"}),\" function, which refers to the instance of \",(0,n.jsx)(e.code,{children:\"Person\"}),\". As a result, \",(0,n.jsx)(e.code,{children:\"this.age\"}),\" correctly increments the \",(0,n.jsx)(e.code,{children:\"age\"}),\" property of the \",(0,n.jsx)(e.code,{children:\"Person\"}),\" instance.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Comparison with regular functions\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"If we use a regular function instead of an arrow function, the behavior of \",(0,n.jsx)(e.code,{children:\"this\"}),\" changes:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function Person() {\n  this.age = 0;\n\n  setInterval(function () {\n    this.age++; // \\`this\\` refers to the global object or \\`undefined\\` in strict mode\n    console.log(this.age);\n  }, 1000);\n}\n\nconst person = new Person();\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this case, \",(0,n.jsx)(e.code,{children:\"this\"}),\" inside the regular function refers to the global object (or \",(0,n.jsx)(e.code,{children:\"undefined\"}),\" in strict mode), not the \",(0,n.jsx)(e.code,{children:\"Person\"}),\" instance. This can lead to unexpected behavior and bugs.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Use cases\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Arrow functions are particularly useful in scenarios where you want to maintain the correct \",(0,n.jsx)(e.code,{children:\"this\"}),\" value, such as:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Event handlers\"}),`\n`,(0,n.jsx)(e.li,{children:\"Callbacks\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Methods that need to access the parent scope's \",(0,n.jsx)(e.code,{children:\"this\"})]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Limitations\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"While arrow functions provide a convenient way to handle \",(0,n.jsx)(e.code,{children:\"this\"}),\", they also come with some limitations:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"They cannot be used as constructors and will throw an error if used with the \",(0,n.jsx)(e.code,{children:\"new\"}),\" keyword.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"They do not have their own \",(0,n.jsx)(e.code,{children:\"arguments\"}),\" object, \",(0,n.jsx)(e.code,{children:\"super\"}),\", or \",(0,n.jsx)(e.code,{children:\"new.target\"}),\" bindings.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\",children:\"MDN Web Docs: Arrow functions\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\",children:\"MDN Web Docs: this\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/arrow-functions\",children:\"JavaScript.info: Arrow functions revisited\"})}),`\n`]})]})}function y(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(l,r)})):l(r)}var j=y;return b(P);})();\n;return Component;"
}