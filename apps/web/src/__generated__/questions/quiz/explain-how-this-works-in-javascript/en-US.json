{
  "description": null,
  "format": "quiz",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-how-this-works-in-javascript",
    "importance": "high",
    "languages": [],
    "nextQuestions": [],
    "premium": false,
    "published": true,
    "ranking": 1,
    "similarQuestions": [],
    "slug": "explain-how-this-works-in-javascript",
    "subtitle": null,
    "title": "Explain how `this` works in JavaScript",
    "topics": [
      "javascript"
    ]
  },
  "solution": "var Component=(()=>{var d=Object.create;var c=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var m=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),g=(i,e)=>{for(var t in e)c(i,t,{get:e[t],enumerable:!0})},l=(i,e,t,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of p(e))!w.call(i,o)&&o!==t&&c(i,o,{get:()=>e[o],enumerable:!(a=u(e,o))||a.enumerable});return i};var b=(i,e,t)=>(t=i!=null?d(f(i)):{},l(e||!i||!i.__esModule?c(t,\"default\",{value:i,enumerable:!0}):t,i)),v=i=>l(c({},\"__esModule\",{value:!0}),i);var h=m((k,r)=>{r.exports=_jsx_runtime});var _={};g(_,{default:()=>j,frontmatter:()=>y});var n=b(h()),y={title:\"Explain how `this` works in JavaScript\"};function s(i){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",ol:\"ol\",li:\"li\",h4:\"h4\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"There's no simple explanation for \",(0,n.jsx)(e.code,{children:\"this\"}),\"; it is one of the most confusing concepts in JavaScript. A hand-wavey explanation is that the value of \",(0,n.jsx)(e.code,{children:\"this\"}),\" depends on how the function is called. Having read many explanations on \",(0,n.jsx)(e.code,{children:\"this\"}),\" online, \",(0,n.jsx)(e.a,{href:\"https://medium.com/@arnav_aggarwal\",children:\"Arnav Aggrawal\"}),\"'s explanation was the clearest. The following rules are applied:\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"If the \",(0,n.jsx)(e.code,{children:\"new\"}),\" keyword is used when calling the function, \",(0,n.jsx)(e.code,{children:\"this\"}),\" inside the function is a brand new object.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"If \",(0,n.jsx)(e.code,{children:\"apply\"}),\", \",(0,n.jsx)(e.code,{children:\"call\"}),\", or \",(0,n.jsx)(e.code,{children:\"bind\"}),\" are used to call/create a function, \",(0,n.jsx)(e.code,{children:\"this\"}),\" inside the function is the object that is passed in as the argument.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"If a function is called as a method, such as \",(0,n.jsx)(e.code,{children:\"obj.method()\"}),\"\\u200A\\u2014\\u200A\",(0,n.jsx)(e.code,{children:\"this\"}),\" is the object that the function is a property of.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"If a function is invoked as a free function invocation, meaning it was invoked without any of the conditions present above, \",(0,n.jsx)(e.code,{children:\"this\"}),\" is the global object. In a browser, it is the \",(0,n.jsx)(e.code,{children:\"window\"}),\" object. If in strict mode (\",(0,n.jsx)(e.code,{children:\"'use strict'\"}),\"), \",(0,n.jsx)(e.code,{children:\"this\"}),\" will be \",(0,n.jsx)(e.code,{children:\"undefined\"}),\" instead of the global object.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"If multiple of the above rules apply, the rule that is higher wins and will set the \",(0,n.jsx)(e.code,{children:\"this\"}),\" value.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"If the function is an ES2015 arrow function, it ignores all the rules above and receives the \",(0,n.jsx)(e.code,{children:\"this\"}),\" value of its surrounding scope at the time it is created.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"For an in-depth explanation, do check out his \",(0,n.jsx)(e.a,{href:\"https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3\",children:\"article on Medium\"}),\".\"]}),`\n`,(0,n.jsx)(e.h4,{children:\"Can you give an example of one of the ways that working with this has changed in ES2015?\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"ES2015 allows you to use \",(0,n.jsx)(e.a,{href:\"http://2ality.com/2017/12/alternate-this.html#arrow-functions\",children:\"arrow functions\"}),\" which uses the \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#No_separate_this\",children:\"enclosing lexical scope\"}),\". This is usually convenient, but does prevent the caller from controlling context via \",(0,n.jsx)(e.code,{children:\".call\"}),\" or \",(0,n.jsx)(e.code,{children:\".apply\"}),\"\\u2014the consequences being that a library such as \",(0,n.jsx)(e.code,{children:\"jQuery\"}),\" will not properly bind \",(0,n.jsx)(e.code,{children:\"this\"}),\" in your event handler functions. Thus, it's important to keep this in mind when refactoring large legacy applications.\"]})]})}function x(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(s,i)})):s(i)}var j=x;return v(_);})();\n;return Component;"
}