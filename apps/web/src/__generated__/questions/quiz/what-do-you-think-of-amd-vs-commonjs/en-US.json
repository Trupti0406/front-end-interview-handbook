{
  "description": null,
  "format": "quiz",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-do-you-think-of-amd-vs-commonjs",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "premium": false,
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "what-do-you-think-of-amd-vs-commonjs",
    "subtitle": null,
    "title": "What do you think of AMD vs CommonJS?",
    "topics": [
      "javascript"
    ]
  },
  "solution": "var Component=(()=>{var u=Object.create;var i=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var f=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports),g=(e,n)=>{for(var t in n)i(e,t,{get:n[t],enumerable:!0})},a=(e,n,t,r)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let s of h(n))!y.call(e,s)&&s!==t&&i(e,s,{get:()=>n[s],enumerable:!(r=m(n,s))||r.enumerable});return e};var w=(e,n,t)=>(t=e!=null?u(p(e)):{},a(n||!e||!e.__esModule?i(t,\"default\",{value:e,enumerable:!0}):t,e)),b=e=>a(i({},\"__esModule\",{value:!0}),e);var d=f((D,c)=>{c.exports=_jsx_runtime});var S={};g(S,{default:()=>M,frontmatter:()=>v});var o=w(d()),v={title:\"What do you think of AMD vs CommonJS?\"};function l(e){let n=Object.assign({p:\"p\"},e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:\"Both are ways to implement a module system, which was not natively present in JavaScript until ES2015 came along. CommonJS is synchronous while AMD (Asynchronous Module Definition) is obviously asynchronous. CommonJS is designed with server-side development in mind while AMD, with its support for asynchronous loading of modules, is more intended for browsers.\"}),`\n`,(0,o.jsx)(n.p,{children:\"AMD syntax can be quite verbose and CommonJS is closer to the style you would write import statements in other languages. Most of the time, AMD is unnecessary, because if you served all your JavaScript into one concatenated bundle file, you wouldn't benefit from the async loading properties. Also, CommonJS syntax is closer to Node.js style of writing/importing modules and there is less context-switching overhead when switching between client-side and server-side JavaScript development.\"}),`\n`,(0,o.jsx)(n.p,{children:\"The future standard, ES modules (ESM) has support for both synchronous and asynchronous loading and is supported by both browsers and server-side runtimes. We can finally just stick to one approach (barring upgrading legacy applications).\"})]})}function x(e={}){let{wrapper:n}=e.components||{};return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(l,e)})):l(e)}var M=x;return b(S);})();\n;return Component;"
}