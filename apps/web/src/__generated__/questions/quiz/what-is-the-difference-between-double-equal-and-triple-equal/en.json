{
  "description": null,
  "format": "quiz",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-is-the-difference-between-double-equal-and-triple-equal",
    "importance": "high",
    "languages": [],
    "nextQuestions": [],
    "premium": false,
    "published": true,
    "ranking": 1,
    "similarQuestions": [],
    "slug": "what-is-the-difference-between-double-equal-and-triple-equal",
    "title": "What is the difference between `==` and `===`?",
    "subtitle": null,
    "topics": [
      "javascript"
    ]
  },
  "solution": "var Component=(()=>{var h=Object.create;var c=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),w=(r,e)=>{for(var t in e)c(r,t,{get:e[t],enumerable:!0})},i=(r,e,t,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of p(e))!m.call(r,o)&&o!==t&&c(r,o,{get:()=>e[o],enumerable:!(l=u(e,o))||l.enumerable});return r};var y=(r,e,t)=>(t=r!=null?h(f(r)):{},i(e||!r||!r.__esModule?c(t,\"default\",{value:r,enumerable:!0}):t,r)),j=r=>i(c({},\"__esModule\",{value:!0}),r);var d=g((k,a)=>{a.exports=_jsx_runtime});var _={};w(_,{default:()=>b,frontmatter:()=>x});var n=y(d()),x={title:\"What is the difference between `==` and `===`?\"};function s(r){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\",ul:\"ul\",li:\"li\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"==\"}),\" is the abstract equality operator while \",(0,n.jsx)(e.code,{children:\"===\"}),\" is the strict equality operator. The \",(0,n.jsx)(e.code,{children:\"==\"}),\" operator will compare for equality after doing any necessary type conversions. The \",(0,n.jsx)(e.code,{children:\"===\"}),\" operator will not do type conversion, so if two values are not the same type \",(0,n.jsx)(e.code,{children:\"===\"}),\" will simply return \",(0,n.jsx)(e.code,{children:\"false\"}),\". When using \",(0,n.jsx)(e.code,{children:\"==\"}),\", funky things can happen, such as:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`1 == '1'; // true\n1 == [1]; // true\n1 == true; // true\n0 == ''; // true\n0 == '0'; // true\n0 == false; // true\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"As a general rule of thumb, never use the \",(0,n.jsx)(e.code,{children:\"==\"}),\" operator, except for convenience when comparing against \",(0,n.jsx)(e.code,{children:\"null\"}),\" or \",(0,n.jsx)(e.code,{children:\"undefined\"}),\", where \",(0,n.jsx)(e.code,{children:\"a == null\"}),\" will return \",(0,n.jsx)(e.code,{children:\"true\"}),\" if \",(0,n.jsx)(e.code,{children:\"a\"}),\" is \",(0,n.jsx)(e.code,{children:\"null\"}),\" or \",(0,n.jsx)(e.code,{children:\"undefined\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`var a = null;\nconsole.log(a == null); // true\nconsole.log(a == undefined); // true\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"References\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.frontendinterviewhandbook.com/javascript-questions\",children:\"Front End Interview Handbook\"})}),`\n`]})]})}function v(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(s,r)})):s(r)}var b=v;return j(_);})();\n;return Component;"
}