{
  "description": null,
  "format": "quiz",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-is-the-difference-between-double-equal-and-triple-equal",
    "importance": "high",
    "languages": [],
    "nextQuestions": [],
    "premium": false,
    "published": true,
    "ranking": 1,
    "similarQuestions": [],
    "slug": "what-is-the-difference-between-double-equal-and-triple-equal",
    "title": "What is the difference between `==` and `===`?",
    "subtitle": null,
    "topics": [
      "javascript"
    ]
  },
  "solution": "var Component=(()=>{var h=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var m=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),y=(r,e)=>{for(var t in e)o(r,t,{get:e[t],enumerable:!0})},i=(r,e,t,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of p(e))!g.call(r,c)&&c!==t&&o(r,c,{get:()=>e[c],enumerable:!(l=u(e,c))||l.enumerable});return r};var w=(r,e,t)=>(t=r!=null?h(f(r)):{},i(e||!r||!r.__esModule?o(t,\"default\",{value:r,enumerable:!0}):t,r)),x=r=>i(o({},\"__esModule\",{value:!0}),r);var d=m((M,a)=>{a.exports=_jsx_runtime});var b={};y(b,{default:()=>v,frontmatter:()=>j});var n=w(d()),j={title:\"What is the difference between `==` and `===`?\"};function s(r){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"==\"}),\" is the abstract equality operator while \",(0,n.jsx)(e.code,{children:\"===\"}),\" is the strict equality operator. The \",(0,n.jsx)(e.code,{children:\"==\"}),\" operator will compare for equality after doing any necessary type conversions. The \",(0,n.jsx)(e.code,{children:\"===\"}),\" operator will not do type conversion, so if two values are not the same type \",(0,n.jsx)(e.code,{children:\"===\"}),\" will simply return \",(0,n.jsx)(e.code,{children:\"false\"}),\". When using \",(0,n.jsx)(e.code,{children:\"==\"}),\", funky things can happen, such as:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`1 == '1'; // true\n1 == [1]; // true\n1 == true; // true\n0 == ''; // true\n0 == '0'; // true\n0 == false; // true\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"As a general rule of thumb, never use the \",(0,n.jsx)(e.code,{children:\"==\"}),\" operator, except for convenience when comparing against \",(0,n.jsx)(e.code,{children:\"null\"}),\" or \",(0,n.jsx)(e.code,{children:\"undefined\"}),\", where \",(0,n.jsx)(e.code,{children:\"a == null\"}),\" will return \",(0,n.jsx)(e.code,{children:\"true\"}),\" if \",(0,n.jsx)(e.code,{children:\"a\"}),\" is \",(0,n.jsx)(e.code,{children:\"null\"}),\" or \",(0,n.jsx)(e.code,{children:\"undefined\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`var a = null;\nconsole.log(a == null); // true\nconsole.log(a == undefined); // true\n`})})]})}function _(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(s,r)})):s(r)}var v=_;return x(b);})();\n;return Component;"
}