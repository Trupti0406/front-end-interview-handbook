{
  "description": null,
  "format": "quiz",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/es6-template-literals-offer-a-lot-of-flexibility-in-generating-strings-can-you-give-an-example",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "premium": false,
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "es6-template-literals-offer-a-lot-of-flexibility-in-generating-strings-can-you-give-an-example",
    "title": "ES2015 Template Literals offer a lot of flexibility in generating strings, can you give an example?",
    "subtitle": null,
    "topics": [
      "javascript"
    ]
  },
  "solution": "var Component=(()=>{var h=Object.create;var s=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var y=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),f=(i,e)=>{for(var t in e)s(i,t,{get:e[t],enumerable:!0})},l=(i,e,t,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of p(e))!g.call(i,o)&&o!==t&&s(i,o,{get:()=>e[o],enumerable:!(a=m(e,o))||a.enumerable});return i};var T=(i,e,t)=>(t=i!=null?h(u(i)):{},l(e||!i||!i.__esModule?s(t,\"default\",{value:i,enumerable:!0}):t,i)),w=i=>l(s({},\"__esModule\",{value:!0}),i);var c=y((N,r)=>{r.exports=_jsx_runtime});var x={};f(x,{default:()=>v,frontmatter:()=>b});var n=T(c()),b={title:\"ES2015 Template Literals offer a lot of flexibility in generating strings, can you give an example?\"};function d(i){let e=Object.assign({p:\"p\",pre:\"pre\",code:\"code\",strong:\"strong\",h2:\"h2\",ul:\"ul\",li:\"li\",a:\"a\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Template literals help make it simple to do string interpolation, or to include variables in a string. Before ES2015, it was common to do something like this:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`var person = { name: 'Tyler', age: 28 };\nconsole.log(\n  'Hi, my name is ' + person.name + ' and I am ' + person.age + ' years old!',\n);\n// 'Hi, my name is Tyler and I am 28 years old!'\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"With template literals, you can now create that same output like this instead:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:\"const person = { name: 'Tyler', age: 28 };\\nconsole.log(`Hi, my name is ${person.name} and I am ${person.age} years old!`);\\n// 'Hi, my name is Tyler and I am 28 years old!'\\n\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Note that you use backticks, not quotes, to indicate that you are using a template literal and that you can insert expressions inside the \",(0,n.jsx)(e.code,{children:\"${}\"}),\" placeholders.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"A second helpful use case is in creating multi-line strings. Before ES2015, you could create a multi-line string like this:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`console.log('This is line one.\\\\nThis is line two.');\n// This is line one.\n// This is line two.\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Or if you wanted to break it up into multiple lines in your code so you didn't have to scroll to the right in your text editor to read a long string, you could also write it like this:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`console.log('This is line one.\\\\n' + 'This is line two.');\n// This is line one.\n// This is line two.\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Template literals, however, preserve whatever spacing you add to them. For example, to create that same multi-line output that we created above, you can simply do:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`console.log(\\`This is line one.\nThis is line two.\\`);\n// This is line one.\n// This is line two.\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Another use case of template literals would be to use as a substitute for templating libraries for simple variable interpolations:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const person = { name: 'Tyler', age: 28 };\ndocument.body.innerHTML = \\`\n  <div>\n    <p>Name: \\${person.name}</p>\n    <p>Age: \\${person.age}</p>\n  </div>\n\\`;\n`})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsxs)(e.strong,{children:[\"Note that your code may be susceptible to XSS by using \",(0,n.jsx)(e.code,{children:\".innerHTML\"}),\". Sanitize your data before displaying it if it came from a user!\"]})}),`\n`,(0,n.jsx)(e.h2,{children:\"References\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.frontendinterviewhandbook.com/javascript-questions\",children:\"Front End Interview Handbook\"})}),`\n`]})]})}function j(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(d,i)})):d(i)}var v=j;return w(x);})();\n;return Component;"
}