{
  "description": "var Component=(()=>{var h=Object.create;var s=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),y=(n,e)=>{for(var o in e)s(n,o,{get:e[o],enumerable:!0})},a=(n,e,o,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!b.call(n,r)&&r!==o&&s(n,r,{get:()=>e[r],enumerable:!(l=u(e,r))||l.enumerable});return n};var g=(n,e,o)=>(o=n!=null?h(p(n)):{},a(e||!n||!n.__esModule?s(o,\"default\",{value:n,enumerable:!0}):o,n)),j=n=>a(s({},\"__esModule\",{value:!0}),n);var i=f((v,c)=>{c.exports=_jsx_runtime});var Q={};y(Q,{default:()=>E,frontmatter:()=>x});var t=g(i()),x={title:\"jQuery.css\",excerpt:\"Implement a jQuery-like function that sets the style of a DOM element\"};function d(n){let e=Object.assign({p:\"p\",pre:\"pre\",code:\"code\",a:\"a\",strong:\"strong\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:\"In Vanilla JavaScript, the way to set styles on an element would be as follows:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`const buttonEl = document.querySelector('button');\nbuttonEl.style.color = 'red';\nbuttonEl.style.backgroundColor = 'tomato';\nbuttonEl.style.fontSize = '16px';\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:\"https://jquery.com/\",children:\"jQuery\"}),\" is a library that simplifies DOM manipulation (among other things). With jQuery (using the \",(0,t.jsx)(e.code,{children:\"$\"}),\" alias function), the above can be simplified into:\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`const buttonEl = $('button');\nbuttonEl.css('color', 'red');\nbuttonEl.css('backgroundColor', 'tomato');\nbuttonEl.css('fontSize', '16px');\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"The return value of most jQuery manipulation APIs return the jQuery object itself, so that method calls can be chained. The above can be further simplified again:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`$('button')\n  .css('color', 'red')\n  .css('backgroundColor', 'tomato')\n  .css('fontSize', '16px');\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"Additionally, if the second parameter is omitted, the value of that style property is returned.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`// <button style=\"color: red\">Submit</button>\n$('button').css('color'); // 'red'\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Implement the jQuery single-character function \",(0,t.jsx)(e.code,{children:\"$\"}),\" which only needs to supports the \",(0,t.jsx)(e.code,{children:\"css()\"}),\" method that either gets the value of a computed style property or sets a CSS property on the matched element.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note\"}),\": The official jQuery library selects all matched elements and modified all matched elements. However, for this question we can assume there will only be a maximum of one element matching the selector.\"]})]})}function w(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(d,n)})):d(n)}var E=w;return j(Q);})();\n;return Component;",
  "format": "javascript",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1654992000,
    "difficulty": "easy",
    "duration": 15,
    "excerpt": "Implement a jQuery-like function that sets the style of a DOM element",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/jquery-css",
    "importance": "mid",
    "languages": [
      "html",
      "css",
      "js"
    ],
    "nextQuestions": [],
    "premium": true,
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "jquery-class-manipulation"
    ],
    "slug": "jquery-css",
    "title": "jQuery.css"
  },
  "skeleton": {
    "js": "/**\n * @param {string} selector\n * @return {{css: Function}}\n */\nexport default function $(selector) {\n  throw 'Not implemented';\n}",
    "ts": null
  },
  "solution": "var Component=(()=>{var p=Object.create;var o=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var v=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),w=(t,e)=>{for(var r in e)o(t,r,{get:e[r],enumerable:!0})},c=(t,e,r,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of g(e))!j.call(t,l)&&l!==r&&o(t,l,{get:()=>e[l],enumerable:!(s=f(e,l))||s.enumerable});return t};var b=(t,e,r)=>(r=t!=null?p(y(t)):{},c(e||!t||!t.__esModule?o(r,\"default\",{value:t,enumerable:!0}):r,t)),x=t=>c(o({},\"__esModule\",{value:!0}),t);var a=v((_,h)=>{h.exports=_jsx_runtime});var T={};w(T,{default:()=>M});var n=b(a());var i=MDXCodeBlock;var u=`/**\n * @param {string} selector\n * @return {{css: Function}}\n */\nexport default function $(selector) {\n  const element = document.querySelector(selector);\n\n  return {\n    /**\n     * @param {string} prop\n     * @param {boolean|string|number} value\n     * @return {Object|void}\n     */\n    css: function (prop, value) {\n      // Getter case.\n      if (value === undefined) {\n        // No matching elements.\n        if (element == null) {\n          return undefined;\n        }\n\n        const value = element.style[prop];\n        return value === '' ? undefined : value;\n      }\n\n      // Setter case.\n      if (element != null) {\n        element.style[prop] = value;\n      }\n\n      return this;\n    },\n  };\n}\n`;var d=`class jQuery {\n  constructor(selector) {\n    this.element = document.querySelector(selector);\n  }\n\n  css(prop, value) {\n    // Getter case.\n    if (value === undefined) {\n      // No matching elements.\n      if (this.element == null) {\n        return undefined;\n      }\n\n      const value = this.element.style[prop];\n      return value === '' ? undefined : value;\n    }\n\n    // Setter case.\n    if (this.element != null) {\n      this.element.style[prop] = value;\n    }\n\n    return this;\n  }\n}\n\nexport default function $(element) {\n  return new jQuery(element);\n}\n`;function m(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\",p:\"p\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Clarification Questions\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"What should happen if there are no elements match the selector? In jQuery when there are no matched elements, nothing occurs, so we can follow that.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"What do we return if we try to get the value of a CSS property that isn't set on the element? We should return \",(0,n.jsx)(e.code,{children:\"undefined\"}),\" as per jQuery.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The toughest part of this question is how to implement method chaining on objects. We have to maintain a reference to the element, which can be done either via closures or using a class property. Classes are overkill here, so we will use the closure approach. We can just return an object with a single \",(0,n.jsx)(e.code,{children:\"css()\"}),\" method. To allow for method chaining, the method has to return \",(0,n.jsx)(e.code,{children:\"this\"}),\" at the end.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Getting and setting the CSS properties is straightforward with the use of the \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style\",children:(0,n.jsx)(e.code,{children:\"HTMLElement.style\"})}),\" property.\"]}),`\n`,(0,n.jsx)(i,{children:u}),`\n`,(0,n.jsx)(e.h2,{children:\"Alternative Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"An alternative solution here is to use classes to retain a reference to the selected element. The implementation of the \",(0,n.jsx)(e.code,{children:\"css()\"}),\" method is largely similar.\"]}),`\n`,(0,n.jsx)(i,{children:d}),`\n`,(0,n.jsx)(e.h2,{children:\"Edge Cases\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"No elements match the selector. We should handle gracefully instead of erroring.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Return \",(0,n.jsx)(e.code,{children:\"undefined\"}),\" instead of empty string if CSS property does not exist on element.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Techniques\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Closures.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Object chaining.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Arrow functions have a lexical scoping to the \",(0,n.jsx)(e.code,{children:\"this\"}),\" context, hence they should not be used as methods on objects as the \",(0,n.jsx)(e.code,{children:\"this\"}),\" will not be referring to the object. Thus the \",(0,n.jsx)(e.code,{children:\"css\"}),\" method cannot be defined as an arrow function if the return value is the \",(0,n.jsx)(e.code,{children:\"this\"}),\" object.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://api.jquery.com/css/\",children:\"jQuery.css() | jQuery API Documentation\"})}),`\n`]})]})}function Q(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(m,t)})):m(t)}var M=Q;return x(T);})();\n;return Component;",
  "tests": "import $ from './jquery-css';\n\n/* eslint-disable no-undef */\ndescribe('jQuery.css', () => {\n  describe('get property', () => {\n    beforeEach(() => {\n      document.body.innerHTML = '<button style=\"color: blue\">Click me</button>';\n    });\n\n    test('get existing style', () => {\n      expect($('button').css('color')).toBe('blue');\n    });\n\n    test('get non-existent style', () => {\n      expect($('button').css('fontSize')).toBe(undefined);\n    });\n\n    test('non-existent element', () => {\n      expect($('no-such-thing').css('fontSize')).toBe(undefined);\n    });\n  });\n\n  describe('set property', () => {\n    beforeEach(() => {\n      document.body.innerHTML = '<button>Click me</button>';\n    });\n\n    test('no elements match the selector', () => {\n      expect(() => {\n        $('no-such-thing').css('color', 'red').css('fontSize', '12px');\n      }).not.toThrow();\n    });\n\n    test('set css', () => {\n      $('button').css('color', 'red');\n      $('button').css('backgroundColor', 'tomato');\n      $('button').css('fontSize', '12px');\n\n      expect(document.querySelector('button').style.color).toBe('red');\n      expect(document.querySelector('button').style.backgroundColor).toBe(\n        'tomato',\n      );\n      expect(document.querySelector('button').style.fontSize).toBe('12px');\n\n      $('button').css('color', 'orange');\n      expect(document.querySelector('button').style.color).toBe('orange');\n    });\n\n    test('chain calls', () => {\n      $('button')\n        .css('color', 'red')\n        .css('backgroundColor', 'tomato')\n        .css('fontSize', '12px');\n\n      expect(document.querySelector('button').style.color).toBe('red');\n      expect(document.querySelector('button').style.backgroundColor).toBe(\n        'tomato',\n      );\n      expect(document.querySelector('button').style.fontSize).toBe('12px');\n    });\n\n    test('overwrites previous styles', () => {\n      $('button')\n        .css('color', 'red')\n        .css('backgroundColor', 'tomato')\n        .css('fontSize', '12px')\n        .css('color', 'orange');\n\n      expect(document.querySelector('button').style.color).toBe('orange');\n      expect(document.querySelector('button').style.backgroundColor).toBe(\n        'tomato',\n      );\n      expect(document.querySelector('button').style.fontSize).toBe('12px');\n    });\n  });\n});"
}