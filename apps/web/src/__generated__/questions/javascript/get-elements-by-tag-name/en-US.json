{
  "description": "var Component=(()=>{var m=Object.create;var i=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),E=(t,e)=>{for(var l in e)i(t,l,{get:e[l],enumerable:!0})},o=(t,e,l,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of g(e))!u.call(t,a)&&a!==l&&i(t,a,{get:()=>e[a],enumerable:!(r=h(e,a))||r.enumerable});return t};var y=(t,e,l)=>(l=t!=null?m(p(t)):{},o(e||!t||!t.__esModule?i(l,\"default\",{value:t,enumerable:!0}):l,t)),v=t=>o(i({},\"__esModule\",{value:!0}),t);var d=f((j,c)=>{c.exports=_jsx_runtime});var b={};E(b,{default:()=>N,frontmatter:()=>x});var n=y(d()),x={title:\"getElementsByTagName\",excerpt:\"Implement a function to get all DOM elements that match a tag\"};function s(t){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",ul:\"ul\",li:\"li\",h2:\"h2\",pre:\"pre\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"getElementsByTagName()\"}),\" is a method which exists on the \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagName\",children:(0,n.jsx)(e.code,{children:\"Document\"})}),\" and \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName\",children:(0,n.jsx)(e.code,{children:\"Element\"})}),\" objects and returns an \",(0,n.jsx)(e.code,{children:\"HTMLCollection\"}),\" of descendant elements within the \",(0,n.jsx)(e.code,{children:\"Document\"}),\"/\",(0,n.jsx)(e.code,{children:\"Element\"}),\" given a tag name.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Let's implement our own \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName\",children:(0,n.jsx)(e.code,{children:\"Element.getElementsByTagName()\"})}),\" that is similar but slightly different:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"It is a pure function which takes in an element and a tag name string.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Like \",(0,n.jsx)(e.code,{children:\"Element.getElementsByTagName()\"}),\", only descendants of the specified element are searched, not the element itself.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Return an array of \",(0,n.jsx)(e.code,{children:\"Element\"}),\"s, instead of a \",(0,n.jsx)(e.code,{children:\"HTMLCollection\"}),\" of \",(0,n.jsx)(e.code,{children:\"Element\"}),\"s.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const document = new DOMParser().parseFromString(\n  \\`<div id=\"foo\">\n    <span>Span</span>\n    <p>Paragraph</p>\n    <div id=\"bar\">Div</div>\n  </div>\\`,\n  'text/html',\n);\n\ngetElementsByTagName(document.body, 'div');\n// [div#foo, div#bar] <-- This is an array of elements.\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName\",children:\"Element.getElementsByTagName() - MDN\"})}),`\n`]})]})}function T(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(s,t)})):s(t)}var N=T;return v(b);})();\n;return Component;",
  "format": "javascript",
  "metadata": {
    "author": "yangshun",
    "companies": [],
    "created": 1655251200,
    "difficulty": "medium",
    "duration": 20,
    "excerpt": "Implement a function to get all DOM elements that match a tag",
    "featured": true,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/get-elements-by-tag-name",
    "importance": "low",
    "languages": [
      "html",
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "premium": true,
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "get-elements-by-class-name"
    ],
    "slug": "get-elements-by-tag-name",
    "title": "getElementsByTagName"
  },
  "skeleton": {
    "js": "/**\n * @param {Element} rootElement\n * @param {string} tagName\n * @return {Array<Element>}\n */\nexport default function getElementsByTagName(rootElement, tagName) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function getElementsByTagName(\n  rootElement: Element,\n  tagName: string,\n): Array<Element> {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var u=Object.create;var r=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,N=Object.prototype.hasOwnProperty;var v=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),E=(t,e)=>{for(var l in e)r(t,l,{get:e[l],enumerable:!0})},c=(t,e,l,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!N.call(t,i)&&i!==l&&r(t,i,{get:()=>e[i],enumerable:!(o=g(e,i))||o.enumerable});return t};var w=(t,e,l)=>(l=t!=null?u(f(t)):{},c(e||!t||!t.__esModule?r(l,\"default\",{value:t,enumerable:!0}):l,t)),y=t=>c(r({},\"__esModule\",{value:!0}),t);var a=v((b,s)=>{s.exports=_jsx_runtime});var x={};E(x,{default:()=>T});var n=w(a());var h=MDXCodeBlock;var d=`/**\n * @param {Element} rootElement\n * @param {string} tagName\n * @return {Array<Element>}\n */\nexport default function getElementsByTagName(rootElement, tagNameParam) {\n  const elements = [];\n  const tagName = tagNameParam.toUpperCase();\n\n  function traverse(element) {\n    if (element == null) {\n      return;\n    }\n\n    if (element.tagName === tagName) {\n      elements.push(element);\n    }\n\n    for (let i = 0; i < element.children.length; i++) {\n      traverse(element.children[i]);\n    }\n  }\n\n  for (let i = 0; i < rootElement.children.length; i++) {\n    traverse(rootElement.children[i]);\n  }\n\n  return elements;\n}\n`;function m(t){let e=Object.assign({p:\"p\",a:\"a\",h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\",strong:\"strong\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"This question assesses you on basic DOM traversal APIs and recursion. The approach to solve this question is similar to \",(0,n.jsx)(e.a,{href:\"/questions/javascript/get-elements-by-class-name\",children:\"getElementsByClassName\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Clarification Questions\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Do we have to support the \",(0,n.jsx)(e.code,{children:\"tagName = '*'\"}),\" case?\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"No, not for this question.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Will the tag name argument be all lower case?\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Not necessarily. E.g. \",(0,n.jsx)(e.code,{children:\"document.getElementsByTagName(element, 'Div')\"}),\" is valid.\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.p,{children:\"The solution is pretty straightforward if you are familiar with the HTML DOM APIs. In particular, we need to know the following:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"Element.tagName\"}),\" which returns an \",(0,n.jsx)(e.strong,{children:\"uppercase\"}),\" string of an element's tag name (e.g. \",(0,n.jsx)(e.code,{children:\"'DIV'\"}),\", \",(0,n.jsx)(e.code,{children:\"'SPAN'\"}),\").\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"Element.children\"}),\" which returns a live \",(0,n.jsx)(e.code,{children:\"HTMLCollection\"}),\" of the child elements. We use this over \",(0,n.jsx)(e.code,{children:\"Node.childNodes\"}),\" which returns a live \",(0,n.jsx)(e.code,{children:\"NodeList\"}),\" of child \",(0,n.jsx)(e.code,{children:\"Node\"}),\"s because \",(0,n.jsx)(e.code,{children:\"childNodes\"}),\" will include non-element nodes like text and comment nodes, which are not relevant in this question.\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"However \",(0,n.jsx)(e.code,{children:\"HTMLCollection\"}),\" does not have \",(0,n.jsx)(e.code,{children:\".forEach\"}),\", so we have to iterate through it using traditional \",(0,n.jsx)(e.code,{children:\"for\"}),\" loops.\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We can maintain an \",(0,n.jsx)(e.code,{children:\"elements\"}),\" array to collect the matching elements while recursively traversing the root element. A depth-first traversal is performed.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Remember that the element argument itself is not included in the results.\"}),`\n`,(0,n.jsx)(h,{children:d}),`\n`,(0,n.jsx)(e.h2,{children:\"Edge Cases\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Element argument is not included in the results even if it matches the tag name.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Non-lowercase tag name arguments.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Techniques\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Recursion\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"DOM APIs\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"How to check an \",(0,n.jsx)(e.code,{children:\"Element\"}),\"'s tag name\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"How to traverse an \",(0,n.jsx)(e.code,{children:\"Element\"}),\"'s children\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"Element.tagName\"}),\" is uppercase (e.g. \",(0,n.jsx)(e.code,{children:\"'DIV'\"}),\", \",(0,n.jsx)(e.code,{children:\"'SPAN'\"}),\"), so be sure to use case-insensitive string comparisons\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName\",children:\"Element.getElementsByTagName() - MDN\"})}),`\n`]})]})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(m,t)})):m(t)}var T=M;return y(x);})();\n;return Component;",
  "tests": "import getElementsByTagName from './get-elements-by-tag-name';\n\ndescribe('getElementsByTagName', () => {\n  function checkResults(expected, received) {\n    expect(received.length).toBe(expected.length);\n    for (let i = 0; i < received.length; i++) {\n      expect(received[i].isEqualNode(expected[i])).toBe(true);\n    }\n  }\n\n  test('empty tree', () => {\n    const document = new DOMParser().parseFromString(``, 'text/html');\n    const divs = getElementsByTagName(document.body, 'div');\n    const expected = document.body.getElementsByTagName('div');\n\n    checkResults(expected, divs);\n  });\n\n  test('non-existent tags', () => {\n    const document = new DOMParser().parseFromString(\n      `<div>\n        <span>Span</span>\n        <p>Paragraph</p>\n        <div></div>\n      </div>`,\n      'text/html',\n    );\n\n    const imgs = getElementsByTagName(document.body, 'img');\n    const expected = document.body.getElementsByTagName('img');\n    checkResults(expected, imgs);\n  });\n\n  test(\"doesn't include itself\", () => {\n    const document = new DOMParser().parseFromString(\n      `<div></div>`,\n      'text/html',\n    );\n\n    const body = getElementsByTagName(document.body, 'body');\n    const expected = document.body.getElementsByTagName('body');\n    checkResults(expected, body);\n  });\n\n  test('single element with no nodes', () => {\n    const document = new DOMParser().parseFromString(\n      `<div></div>`,\n      'text/html',\n    );\n\n    const divs = getElementsByTagName(document.body, 'div');\n    const expected = document.body.getElementsByTagName('div');\n\n    checkResults(expected, divs);\n  });\n\n  test('comment nodes', () => {\n    const document = new DOMParser().parseFromString(\n      `<div>\n        <!-- Here's a comment -->\n        <div>Hello</div>\n      </div>`,\n      'text/html',\n    );\n\n    const divs = getElementsByTagName(document.body, 'div');\n    const expected = document.body.getElementsByTagName('div');\n\n    checkResults(expected, divs);\n  });\n\n  test('single element with child nodes', () => {\n    const document = new DOMParser().parseFromString(\n      `<div>\n        <span>Span</span>\n        <p>Paragraph</p>\n      </div>`,\n      'text/html',\n    );\n\n    const divs = getElementsByTagName(document.body, 'div');\n    const expected = document.body.getElementsByTagName('div');\n\n    checkResults(expected, divs);\n  });\n\n  describe('deeply-nested trees', () => {\n    test('shallow', () => {\n      const document = new DOMParser().parseFromString(\n        `<div>\n          <span>Span</span>\n          <p>Paragraph</p>\n          <div></div>\n        </div>`,\n        'text/html',\n      );\n\n      const divs = getElementsByTagName(document.body, 'div');\n      const expectedDivs = document.body.getElementsByTagName('div');\n      checkResults(expectedDivs, divs);\n\n      const spans = getElementsByTagName(document.body, 'span');\n      const expectedSpans = document.body.getElementsByTagName('span');\n      checkResults(expectedSpans, spans);\n    });\n\n    test('moderately deep', () => {\n      const document = new DOMParser().parseFromString(\n        `<div>\n          <span>Span</span>\n          <p>Paragraph</p>\n          <div>\n            <div>\n              <span>Hello</span>\n            </div>\n          </div>\n        </div>\n        <div>Hello</div>`,\n        'text/html',\n      );\n\n      const divs = getElementsByTagName(document.body, 'div');\n      const expectedDivs = document.body.getElementsByTagName('div');\n      checkResults(expectedDivs, divs);\n\n      const spans = getElementsByTagName(document.body, 'span');\n      const expectedSpans = document.body.getElementsByTagName('span');\n      checkResults(expectedSpans, spans);\n    });\n\n    test('very deep', () => {\n      const document = new DOMParser().parseFromString(\n        `<div>\n          <span>Span</span>\n          <p>Paragraph</p>\n          <div>\n            <div>\n              <div>\n                <div>\n                  <div>\n                    <div>\n                      Deep div\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div>\n          Hello\n          <div>\n            <div>\n              <div>\n                <div>\n                  <div>\n                    <div>\n                      Deep div\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>`,\n        'text/html',\n      );\n\n      const divs = getElementsByTagName(document.body, 'div');\n      const expectedDivs = document.body.getElementsByTagName('div');\n      checkResults(expectedDivs, divs);\n\n      const spans = getElementsByTagName(document.body, 'span');\n      const expectedSpans = document.body.getElementsByTagName('span');\n      checkResults(expectedSpans, spans);\n    });\n  });\n\n  test('non-lower case tag name', () => {\n    const document = new DOMParser().parseFromString(\n      `<div>\n          <span>Span</span>\n          <p>Paragraph</p>\n          <div>\n            <div>\n              <span>Hello</span>\n            </div>\n          </div>\n        </div>\n        <div>Hello</div>`,\n      'text/html',\n    );\n\n    const divs = getElementsByTagName(document.body, 'DIV');\n    const expectedDivs = document.body.getElementsByTagName('DIV');\n    checkResults(expectedDivs, divs);\n\n    const spans = getElementsByTagName(document.body, 'sPaN');\n    const expectedSpans = document.body.getElementsByTagName('sPaN');\n    checkResults(expectedSpans, spans);\n  });\n});"
}