{
  "description": "var Component=(()=>{var s=Object.create;var t=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),y=(r,e)=>{for(var l in e)t(r,l,{get:e[l],enumerable:!0})},d=(r,e,l,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of m(e))!p.call(r,i)&&i!==l&&t(r,i,{get:()=>e[i],enumerable:!(c=u(e,i))||c.enumerable});return r};var x=(r,e,l)=>(l=r!=null?s(f(r)):{},d(e||!r||!r.__esModule?t(l,\"default\",{value:r,enumerable:!0}):l,r)),j=r=>d(t({},\"__esModule\",{value:!0}),r);var h=g((M,a)=>{a.exports=_jsx_runtime});var w={};y(w,{default:()=>v,frontmatter:()=>_});var n=x(h()),_={title:\"Fill\",excerpt:\"Implement a function that fills an array with values within specified indices\"};function o(r){let e=Object.assign({p:\"p\",code:\"code\",strong:\"strong\",h2:\"h2\",ol:\"ol\",li:\"li\",em:\"em\",pre:\"pre\",ul:\"ul\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a function \",(0,n.jsx)(e.code,{children:\"fill(array, value, [start=0], [end=array.length])\"}),\" that fills an array with values from \",(0,n.jsx)(e.code,{children:\"start\"}),\" up to, but not including, \",(0,n.jsx)(e.code,{children:\"end\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note\"}),\": This method mutates \",(0,n.jsx)(e.code,{children:\"array\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"array\"}),\" \",(0,n.jsx)(e.em,{children:\"(Array)\"}),\": The array to fill.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"value\"}),\" \",(0,n.jsx)(e.em,{children:\"(*)\"}),\": The value to fill \",(0,n.jsx)(e.code,{children:\"array\"}),\" with.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"[start=0]\"}),\" \",(0,n.jsx)(e.em,{children:\"(number)\"}),\": The start position.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"[end=array.length]\"}),\" \",(0,n.jsx)(e.em,{children:\"(number)\"}),\": The end position.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:\"(Array)\"}),\": Returns \",(0,n.jsx)(e.code,{children:\"array\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`fill([1, 2, 3], 'a'); // ['a', 'a', 'a']\nfill([4, 6, 8, 10], '*', 1, 3); // [4, '*', '*', 10]\nfill([4, 6, 8, 10, 12], '*', -3, -1); // [4, 6, '*', '*', 12]\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Make sure to handle negative indices and out of bound indices.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://lodash.com/docs/#fill\",children:[\"Lodash \",(0,n.jsx)(e.code,{children:\"_.fill\"})]})}),`\n`]})]})}function b(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(o,r)})):o(r)}var v=b;return j(w);})();\n;return Component;",
  "format": "javascript",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1682553600,
    "difficulty": "easy",
    "duration": 10,
    "excerpt": "Implement a function that fills an array with values within specified indices",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/fill",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "premium": true,
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "fill",
    "subtitle": null,
    "title": "Fill",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array - The array to fill.\n * @param {*} value - The value to fill array with.\n * @param {number} [start=0] - The start position.\n * @param {number} [end=array.length] - The end position.\n * @return {Array} Returns the filled array.\n */\nexport default function fill(array, value, start = 0, end = array.length) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function fill(\n  array: Array<unknown>,\n  value: any,\n  start: number = 0,\n  end: number = array.length,\n): Array<unknown> {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var m=Object.create;var l=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var x=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),_=(n,e)=>{for(var t in e)l(n,t,{get:e[t],enumerable:!0})},o=(n,e,t,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of g(e))!p.call(n,a)&&a!==t&&l(n,a,{get:()=>e[a],enumerable:!(i=f(e,a))||i.enumerable});return n};var j=(n,e,t)=>(t=n!=null?m(y(n)):{},o(e||!n||!n.__esModule?l(t,\"default\",{value:n,enumerable:!0}):t,n)),M=n=>o(l({},\"__esModule\",{value:!0}),n);var d=x((X,h)=>{h.exports=_jsx_runtime});var D={};_(D,{default:()=>b});var r=j(d());var s=MDXCodeBlock;var c=`/**\n * @param {Array} array - The array to fill.\n * @param {*} value - The value to fill array with.\n * @param {number} [start=0] - The start position.\n * @param {number} [end=array.length] - The end position.\n * @return {Array} Returns the filled array.\n */\nexport default function fill(array, value, start = 0, end = array.length) {\n  const length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : length + start;\n  }\n\n  if (end > length) {\n    end = length + 1;\n  }\n\n  if (end < 0) {\n    end += length;\n  }\n\n  for (let i = start; i < Math.min(end, array.length); i++) {\n    array[i] = value;\n  }\n\n  return array;\n}\n`;function u(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\",a:\"a\"},n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,r.jsx)(s,{children:c}),`\n`,(0,r.jsx)(e.h2,{children:\"Edge Cases\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Empty, one, two-element arrays.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Negative indices.\"}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:\"end\"}),\" is smaller than \",(0,r.jsx)(e.code,{children:\"start\"}),\".\"]}),`\n`]}),`\n`,(0,r.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:(0,r.jsxs)(e.a,{href:\"https://lodash.com/docs/#fill\",children:[\"Lodash \",(0,r.jsx)(e.code,{children:\"_.fill\"})]})}),`\n`]})]})}function C(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(u,n)})):u(n)}var b=C;return M(D);})();\n;return Component;",
  "tests": "import fill from './fill';\n\ndescribe('fill', () => {\n  test('empty array', () => {\n    expect(fill([], '*')).toEqual([]);\n    expect(fill([], '*', 2, 3)).toEqual([]);\n  });\n\n  test('single element', () => {\n    expect(fill([1], '*')).toEqual(['*']);\n    expect(fill([1], '*', 0, 1)).toEqual(['*']);\n    expect(fill([1], '*', 2, 3)).toEqual([1]);\n  });\n\n  test('two elements', () => {\n    expect(fill([1, 2], '*')).toEqual(['*', '*']);\n    expect(fill([1, 2], '*', 1)).toEqual([1, '*']);\n    expect(fill([1, 2], '*', 2, 3)).toEqual([1, 2]);\n  });\n\n  describe('multiple elements', () => {\n    test('use default start to end', () => {\n      expect(fill([1, 2, 3], '*')).toEqual(['*', '*', '*']);\n    });\n\n    test('only start specified', () => {\n      expect(fill([1, 2, 3, 4, 5], '*', 2)).toEqual([1, 2, '*', '*', '*']);\n    });\n\n    test('start to end specified', () => {\n      expect(fill([1, 2, 3, 4, 5], '*', 2, 4)).toEqual([1, 2, '*', '*', 5]);\n    });\n\n    describe('negative indices', () => {\n      test('negative start', () => {\n        expect(fill([1, 2, 3], '*', -2)).toEqual([1, '*', '*']);\n      });\n\n      test('negative start and positive end', () => {\n        expect(fill([1, 2, 3, 4, 5], '*', -4, 3)).toEqual([1, '*', '*', 4, 5]);\n      });\n\n      test('negative end', () => {\n        expect(fill([1, 2, 3, 4, 5], '*', 1, -1)).toEqual([\n          1,\n          '*',\n          '*',\n          '*',\n          5,\n        ]);\n      });\n\n      test('negative start and end', () => {\n        expect(fill([1, 2, 3, 4, 5], '*', -4, -1)).toEqual([\n          1,\n          '*',\n          '*',\n          '*',\n          5,\n        ]);\n      });\n\n      test('out of bound indices are provided', () => {\n        expect(fill([1, 2, 3], '*', 1, 10)).toEqual([1, '*', '*']);\n      });\n    });\n  });\n\n  test('end smaller than start', () => {\n    expect(fill([1], '*', 4, 1)).toEqual([1]);\n    expect(fill([1, 2, 3, 4, 5], '*', 4, 1)).toEqual([1, 2, 3, 4, 5]);\n    expect(fill([1, 2, 3, 4, 5], '*', -1, -4)).toEqual([1, 2, 3, 4, 5]);\n  });\n\n  test('returns original array', () => {\n    const arr = [1, 2, 3];\n    expect(fill(arr, '*', 1)).toBe(arr);\n  });\n\n  test('mutates original array', () => {\n    const arr = [1, 2, 3];\n    fill(arr, '*', 1);\n    expect(arr).toEqual([1, '*', '*']);\n  });\n});"
}