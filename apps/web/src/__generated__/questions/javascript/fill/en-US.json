{
  "description": "var Component=(()=>{var s=Object.create;var t=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),y=(r,e)=>{for(var l in e)t(r,l,{get:e[l],enumerable:!0})},c=(r,e,l,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of m(e))!f.call(r,i)&&i!==l&&t(r,i,{get:()=>e[i],enumerable:!(a=u(e,i))||a.enumerable});return r};var x=(r,e,l)=>(l=r!=null?s(p(r)):{},c(e||!r||!r.__esModule?t(l,\"default\",{value:r,enumerable:!0}):l,r)),j=r=>c(t({},\"__esModule\",{value:!0}),r);var h=g((M,d)=>{d.exports=_jsx_runtime});var w={};y(w,{default:()=>b,frontmatter:()=>_});var n=x(h()),_={title:\"Fill\",excerpt:\"Implement a function that fills an array with values within specified indices\"};function o(r){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",strong:\"strong\",h2:\"h2\",ul:\"ul\",li:\"li\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a \",(0,n.jsx)(e.code,{children:\"fill\"}),\" function that fills an array with values from \",(0,n.jsx)(e.code,{children:\"start\"}),\" up to, but not including, \",(0,n.jsx)(e.code,{children:\"end\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`fill(array, value, [(start = 0)], [(end = array.length)]);\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note\"}),\": This method mutates \",(0,n.jsx)(e.code,{children:\"array\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"array (Array)\"}),\": The array to fill.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"value (*)\"}),\": The value to fill \",(0,n.jsx)(e.code,{children:\"array\"}),\" with.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"[start=0] (number)\"}),\": The start position.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"[end=array.length] (number)\"}),\": The end position.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"(Array)\"}),\": Returns \",(0,n.jsx)(e.code,{children:\"array\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Example\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`fill([1, 2, 3], 'a'); // ['a', 'a', 'a']\nfill([4, 6, 8, 10], '*', 1, 3); // [4, '*', '*', 10]\nfill([4, 6, 8, 10, 12], '*', -3, -1); // [4, '*', '*', '*', 12]\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Make sure to handle negative indices and out of range indices.\"})]})}function v(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(o,r)})):o(r)}var b=v;return j(w);})();\n;return Component;",
  "format": "javascript",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1682553600,
    "difficulty": "easy",
    "duration": 10,
    "excerpt": "Implement a function that fills an array with values within specified indices",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/fill",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "premium": true,
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "fill",
    "title": "Fill"
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array - The array to fill.\n * @param {*} value - The value to fill array with.\n * @param {number} [start=0] - The start position.\n * @param {number} [end=array.length] - The end position.\n * @return {Array} Returns the filled array.\n */\nexport default function fill(array, value, start = 0, end = array.length) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function fill<T>(\n  array: Array<T>,\n  value: T,\n  start: number = 0,\n  end: number = array.length,\n): Array<T> {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var m=Object.create;var l=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var x=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),j=(r,e)=>{for(var n in e)l(r,n,{get:e[n],enumerable:!0})},o=(r,e,n,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of g(e))!p.call(r,a)&&a!==n&&l(r,a,{get:()=>e[a],enumerable:!(i=f(e,a))||i.enumerable});return r};var _=(r,e,n)=>(n=r!=null?m(y(r)):{},o(e||!r||!r.__esModule?l(n,\"default\",{value:r,enumerable:!0}):n,r)),M=r=>o(l({},\"__esModule\",{value:!0}),r);var d=x((X,s)=>{s.exports=_jsx_runtime});var D={};j(D,{default:()=>b});var t=_(d());var h=MDXCodeBlock;var c=`/**\n * @param {Array} array - The array to fill.\n * @param {*} value - The value to fill array with.\n * @param {number} [start=0] - The start position.\n * @param {number} [end=array.length] - The end position.\n * @return {Array} Returns the filled array.\n */\nexport default function fill(array, value, start = 0, end = array.length) {\n  const length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : length + start;\n  }\n\n  if (end > length) {\n    end = length + 1;\n  }\n\n  if (end < 0) {\n    end += length;\n  }\n\n  for (let i = start; i < Math.min(end, array.length); i++) {\n    array[i] = value;\n  }\n\n  return array;\n}\n`;function u(r){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\"},r.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(h,{children:c}),`\n`,(0,t.jsx)(e.h2,{children:\"Edge Cases\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Empty, one, two-element arrays.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Negative indices.\"}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"end\"}),\" is smaller than \",(0,t.jsx)(e.code,{children:\"start\"}),\".\"]}),`\n`]})]})}function C(r={}){let{wrapper:e}=r.components||{};return e?(0,t.jsx)(e,Object.assign({},r,{children:(0,t.jsx)(u,r)})):u(r)}var b=C;return M(D);})();\n;return Component;",
  "tests": "import fill from './fill';\n\ndescribe('fill', () => {\n  test('empty array', () => {\n    expect(fill([], '*')).toEqual([]);\n    expect(fill([], '*', 2, 3)).toEqual([]);\n  });\n\n  test('single element', () => {\n    expect(fill([1], '*')).toEqual(['*']);\n    expect(fill([1], '*', 0, 1)).toEqual(['*']);\n    expect(fill([1], '*', 2, 3)).toEqual([1]);\n  });\n\n  test('two elements', () => {\n    expect(fill([1, 2], '*')).toEqual(['*', '*']);\n    expect(fill([1, 2], '*', 1)).toEqual([1, '*']);\n    expect(fill([1, 2], '*', 2, 3)).toEqual([1, 2]);\n  });\n\n  describe('multiple elements', () => {\n    test('use default start to end', () => {\n      expect(fill([1, 2, 3], '*')).toEqual(['*', '*', '*']);\n    });\n\n    test('only start specified', () => {\n      expect(fill([1, 2, 3, 4, 5], '*', 2)).toEqual([1, 2, '*', '*', '*']);\n    });\n\n    test('start to end specified', () => {\n      expect(fill([1, 2, 3, 4, 5], '*', 2, 4)).toEqual([1, 2, '*', '*', 5]);\n    });\n\n    describe('negative indices', () => {\n      test('negative start', () => {\n        expect(fill([1, 2, 3], '*', -2)).toEqual([1, '*', '*']);\n      });\n\n      test('negative start and positive end', () => {\n        expect(fill([1, 2, 3, 4, 5], '*', -4, 3)).toEqual([1, '*', '*', 4, 5]);\n      });\n\n      test('negative end', () => {\n        expect(fill([1, 2, 3, 4, 5], '*', 1, -1)).toEqual([\n          1,\n          '*',\n          '*',\n          '*',\n          5,\n        ]);\n      });\n\n      test('negative start and end', () => {\n        expect(fill([1, 2, 3, 4, 5], '*', -4, -1)).toEqual([\n          1,\n          '*',\n          '*',\n          '*',\n          5,\n        ]);\n      });\n\n      test('out of range indices are provided', () => {\n        expect(fill([1, 2, 3], '*', 1, 10)).toEqual([1, '*', '*']);\n      });\n    });\n  });\n\n  test('end smaller than start', () => {\n    expect(fill([1], '*', 4, 1)).toEqual([1]);\n    expect(fill([1, 2, 3, 4, 5], '*', 4, 1)).toEqual([1, 2, 3, 4, 5]);\n    expect(fill([1, 2, 3, 4, 5], '*', -1, -4)).toEqual([1, 2, 3, 4, 5]);\n  });\n\n  test('returns original array', () => {\n    const arr = [1, 2, 3];\n    expect(fill(arr, '*', 1)).toBe(arr);\n  });\n\n  test('mutates original array', () => {\n    const arr = [1, 2, 3];\n    fill(arr, '*', 1);\n    expect(arr).toEqual([1, '*', '*']);\n  });\n});"
}