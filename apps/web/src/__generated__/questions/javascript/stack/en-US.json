{
  "description": "var Component=(()=>{var a=Object.create;var l=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,k=Object.prototype.hasOwnProperty;var f=(t,n)=>()=>(n||t((n={exports:{}}).exports,n),n.exports),x=(t,n)=>{for(var i in n)l(t,i,{get:n[i],enumerable:!0})},r=(t,n,i,h)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let c of u(n))!k.call(t,c)&&c!==i&&l(t,c,{get:()=>n[c],enumerable:!(h=m(n,c))||h.enumerable});return t};var g=(t,n,i)=>(i=t!=null?a(p(t)):{},r(n||!t||!t.__esModule?l(i,\"default\",{value:t,enumerable:!0}):i,t)),y=t=>r(l({},\"__esModule\",{value:!0}),t);var o=f((R,d)=>{d.exports=_jsx_runtime});var j={};x(j,{default:()=>b,frontmatter:()=>T});var e=g(o()),T={title:\"Stack\",excerpt:\"Implement a stack data structure containing the common stack methods\"};function s(t){let n=Object.assign({p:\"p\",h2:\"h2\",h3:\"h3\",code:\"code\",ul:\"ul\",li:\"li\",pre:\"pre\"},t.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:\"Implement a stack data structure in JavaScript that contains the following operations:\"}),`\n`,(0,e.jsx)(n.h2,{children:\"Constructor\"}),`\n`,(0,e.jsx)(n.h3,{children:(0,e.jsx)(n.code,{children:\"Stack\"})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Creates an instance of a \",(0,e.jsx)(n.code,{children:\"Stack\"}),\" class that doesn't contain any items. The constructor not accept any arguments.\"]}),`\n`,(0,e.jsx)(n.h2,{children:\"Methods\"}),`\n`,(0,e.jsx)(n.h3,{children:(0,e.jsx)(n.code,{children:\"push\"})}),`\n`,(0,e.jsx)(n.p,{children:\"Pushes an item onto the top of the stack.\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"Arguments\",`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"{*} item\"}),\": The item to be pushed onto the stack.\"]}),`\n`]}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[\"Returns\",`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"{number}\"}),\": The new length of the stack.\"]}),`\n`]}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[\"Time Complexity\",`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"O(1)\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,e.jsx)(n.h3,{children:(0,e.jsx)(n.code,{children:\"pop\"})}),`\n`,(0,e.jsx)(n.p,{children:\"Remove an item at the top of the stack.\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"Returns\",`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"{*} item\"}),\": The item at the top of the stack if it is not empty, \",(0,e.jsx)(n.code,{children:\"undefined\"}),\" otherwise.\"]}),`\n`]}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[\"Time Complexity\",`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"O(1)\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,e.jsx)(n.h3,{children:(0,e.jsx)(n.code,{children:\"isEmpty\"})}),`\n`,(0,e.jsx)(n.p,{children:\"Determines if the stack is empty.\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"Returns\",`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"{boolean}\"}),\": \",(0,e.jsx)(n.code,{children:\"true\"}),\" if the stack has no items, \",(0,e.jsx)(n.code,{children:\"false\"}),\" otherwise.\"]}),`\n`]}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[\"Time Complexity\",`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"O(1)\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,e.jsx)(n.h3,{children:(0,e.jsx)(n.code,{children:\"peek\"})}),`\n`,(0,e.jsx)(n.p,{children:\"Returns the item at the top of the stack without removing it from the stack.\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"Returns\",`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"{*}\"}),\": The item at the top of the stack if it is not empty, \",(0,e.jsx)(n.code,{children:\"undefined\"}),\" otherwise.\"]}),`\n`]}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[\"Time Complexity\",`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"O(1)\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,e.jsx)(n.h3,{children:(0,e.jsx)(n.code,{children:\"length\"})}),`\n`,(0,e.jsx)(n.p,{children:\"Returns the number of items in the stack.\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"Returns\",`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"{number}\"}),\": The number of items in the stack.\"]}),`\n`]}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[\"Time Complexity\",`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"O(1)\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Examples\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`const stack = new Stack();\nstack.isEmpty(); // true\nstack.push(1);\nstack.push(2);\nstack.length(); // 2\nstack.push(3);\nstack.peek(); // 3\nstack.pop(); // 3\nstack.isEmpty(); // false\n`})})]})}function C(t={}){let{wrapper:n}=t.components||{};return n?(0,e.jsx)(n,Object.assign({},t,{children:(0,e.jsx)(s,t)})):s(t)}var b=C;return y(j);})();\n;return Component;",
  "format": "javascript",
  "metadata": {
    "author": "yangshun",
    "companies": [],
    "created": 1670025600,
    "difficulty": "easy",
    "duration": 10,
    "excerpt": "Implement a stack data structure containing the common stack methods",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/stack",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [
      "queue"
    ],
    "premium": false,
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "queue"
    ],
    "slug": "stack",
    "title": "Stack"
  },
  "skeleton": {
    "js": "export default class Stack {\n  constructor() {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Pushes an item onto the top of the stack.\n   * @param {*} item The item to be pushed onto the stack.\n   * @return {number} The new length of the stack.\n   */\n  push(item) {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Remove an item at the top of the stack.\n   * @return {*} The item at the top of the stack if it is not empty, `undefined` otherwise.\n   */\n  pop() {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Determines if the stack is empty.\n   * @return {boolean} `true` if the stack has no items, `false` otherwise.\n   */\n  isEmpty() {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Returns the item at the top of the stack without removing it from the stack.\n   * @return {*} The item at the top of the stack if it is not empty, `undefined` otherwise.\n   */\n  peek() {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Returns the number of items in the stack.\n   * @return {number} The number of items in the stack.\n   */\n  length() {\n    throw 'Not implemented!';\n  }\n}",
    "ts": "export default class Stack<T> {\n  constructor() {}\n\n  /**\n   * Pushes an item onto the top of the stack.\n   * @param {T} item The item to be pushed onto the stack.\n   * @return {number} The new length of the stack.\n   */\n  push(item: T): number {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Remove an item at the top of the stack.\n   * @return {T | undefined} The item at the top of the stack if it is not empty, `undefined` otherwise.\n   */\n  pop(): T | undefined {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Determines if the stack is empty.\n   * @return {boolean} `true` if the stack has no items, `false` otherwise.\n   */\n  isEmpty(): boolean {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Returns the item at the top of the stack without removing it from the stack.\n   * @return {T | undefined} The item at the top of the stack if it is not empty, `undefined` otherwise.\n   */\n  peek(): T | undefined {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Returns the number of items in the stack.\n   * @return {number} The number of items in the stack.\n   */\n  length(): number {\n    throw 'Not implemented!';\n  }\n}"
  },
  "solution": "var Component=(()=>{var u=Object.create;var h=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var y=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var i in e)h(n,i,{get:e[i],enumerable:!0})},a=(n,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of k(e))!w.call(n,o)&&o!==i&&h(n,o,{get:()=>e[o],enumerable:!(s=f(e,o))||s.enumerable});return n};var _=(n,e,i)=>(i=n!=null?u(g(n)):{},a(e||!n||!n.__esModule?h(i,\"default\",{value:n,enumerable:!0}):i,n)),v=n=>a(h({},\"__esModule\",{value:!0}),n);var d=y((D,c)=>{c.exports=_jsx_runtime});var C={};b(C,{default:()=>j});var t=_(d());var r=MDXCodeBlock;var l=`export default class Stack {\n  constructor() {\n    this._items = [];\n  }\n\n  /**\n   * Pushes an item onto the top of the stack.\n   * @param {*} item The item to be pushed onto the stack.\n   * @return {number} The new length of the stack.\n   */\n  push(item) {\n    return this._items.push(item);\n  }\n\n  /**\n   * Remove an item at the top of the stack.\n   * @return {*} The item at the top of the stack if it is not empty, \\`undefined\\` otherwise.\n   */\n  pop() {\n    return this._items.pop();\n  }\n\n  /**\n   * Determines if the stack is empty.\n   * @return {boolean} \\`true\\` if the stack has no items, \\`false\\` otherwise.\n   */\n  isEmpty() {\n    return this.length() === 0;\n  }\n\n  /**\n   * Returns the item at the top of the stack without removing it from the stack.\n   * @return {*} The item at the top of the stack if it is not empty, \\`undefined\\` otherwise.\n   */\n  peek() {\n    return this.isEmpty() ? undefined : this._items[this.length() - 1];\n  }\n\n  /**\n   * Returns the number of items in the stack.\n   * @return {number} The number of items in the stack.\n   */\n  length() {\n    return this._items.length;\n  }\n}\n`;var p=`class Node {\n  constructor(value) {\n    this.value = value;\n    this.prev = null;\n  }\n}\n\nexport default class Stack {\n  constructor() {\n    this._top = null;\n    this._length = 0;\n  }\n\n  /**\n   * Pushes an item onto the top of the stack.\n   * @param {*} item The item to be pushed onto the stack.\n   * @return {number} The new length of the stack.\n   */\n  push(item) {\n    const node = new Node(item);\n    node.prev = this._top;\n    this._top = node;\n    this._length++;\n    return this._length;\n  }\n\n  /**\n   * Remove an item at the top of the stack.\n   * @return {*} The item at the top of the stack if it is not empty, \\`undefined\\` otherwise.\n   */\n  pop() {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n\n    const node = this._top;\n    this._top = node.prev;\n    node.prev = null;\n    this._length--;\n    return node.value;\n  }\n\n  /**\n   * Determines if the stack is empty.\n   * @return {boolean} \\`true\\` if the stack has no items, \\`false\\` otherwise.\n   */\n  isEmpty() {\n    return this._length === 0;\n  }\n\n  /**\n   * Returns the item at the top of the stack without removing it from the stack.\n   * @return {*} The item at the top of the stack if it is not empty, \\`undefined\\` otherwise.\n   */\n  peek() {\n    return this.isEmpty() ? undefined : this._top.value;\n  }\n\n  /**\n   * Returns the number of items in the stack.\n   * @return {number} The number of items in the stack.\n   */\n  length() {\n    return this._length;\n  }\n}\n`;function m(n){let e=Object.assign({h2:\"h2\",h3:\"h3\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Array-based Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The stack abstract data type can be easily implement in JavaScript with JavaScript \",(0,t.jsx)(e.code,{children:\"Array\"}),\"s. The main thing to note when implementing stacks is that that the operations should be O(1). Thankfully, JavaScript \",(0,t.jsx)(e.code,{children:\"Array\"}),\"'s \",(0,t.jsx)(e.code,{children:\"push()\"}),\" and \",(0,t.jsx)(e.code,{children:\"pop()\"}),\" operations are O(1) and the method signatures match the \",(0,t.jsx)(e.code,{children:\"Stack\"}),\"'s. Many of the methods are just simple wrappers around \",(0,t.jsx)(e.code,{children:\"Array\"}),\" methods.\"]}),`\n`,(0,t.jsx)(r,{children:l}),`\n`,(0,t.jsx)(e.h3,{children:\"Linked List-based Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Stacks can also be implemented with singly-linked lists which are essentially a chain of connected nodes. To do that, we need to create a \",(0,t.jsx)(e.code,{children:\"Node\"}),\" class that has a \",(0,t.jsx)(e.code,{children:\"prev\"}),\" pointer, a reference to the \",(0,t.jsx)(e.code,{children:\"Node\"}),\" below if it's not the bottom item of the stack.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"push()\"}),\"-ing involves creating a new \",(0,t.jsx)(e.code,{children:\"Node\"}),\" and pointing the current top of the stack to that new \",(0,t.jsx)(e.code,{children:\"Node\"}),\"'s \",(0,t.jsx)(e.code,{children:\"prev\"}),\" field and updating a reference to the new top of the stack. \",(0,t.jsx)(e.code,{children:\"pop()\"}),\"-ing is the reverse where we find the \",(0,t.jsx)(e.code,{children:\"prev\"}),\" node of the current top and set it to be the new stop of the stack.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Since the time complexity of \",(0,t.jsx)(e.code,{children:\"length()\"}),\" has to be O(1) and counting the number of items in a linked list will take O(n), we need to separately track the number of items in the list with a \",(0,t.jsx)(e.code,{children:\"_length\"}),\" instance property and update it within the \",(0,t.jsx)(e.code,{children:\"push()\"}),\" and \",(0,t.jsx)(e.code,{children:\"pop()\"}),\" methods.\"]}),`\n`,(0,t.jsx)(r,{children:p}),`\n`,(0,t.jsx)(e.h2,{children:\"Edge Cases\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Calling \",(0,t.jsx)(e.code,{children:\"pop()\"}),\" on empty stacks.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Calling \",(0,t.jsx)(e.code,{children:\"peek()\"}),\" on empty stacks.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Techniques\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Familiarity with JavaScript arrays.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Object-oriented programming.\"}),`\n`]})]})}function x(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(m,n)})):m(n)}var j=x;return v(C);})();\n;return Component;",
  "tests": "import Stack from './stack';\n\ndescribe('Stack', () => {\n  test('constructor', () => {\n    const s = new Stack();\n    expect(s).toBeTruthy();\n    expect(s.length()).toBe(0);\n  });\n\n  test('push', () => {\n    const s = new Stack();\n    expect(s.push(100)).toBe(1);\n    expect(s.length()).toBe(1);\n    expect(s.push(200)).toBe(2);\n    expect(s.length()).toBe(2);\n  });\n\n  test('pop', () => {\n    const s = new Stack();\n    s.push(100);\n    expect(s.length()).toBe(1);\n    expect(s.pop()).toBe(100);\n    expect(s.length()).toBe(0);\n    expect(s.pop()).toBe(undefined);\n  });\n\n  test('isEmpty', () => {\n    const s = new Stack();\n    expect(s.isEmpty()).toBeTruthy();\n    s.push(100);\n    expect(s.isEmpty()).toBeFalsy();\n    s.pop();\n    expect(s.isEmpty()).toBeTruthy();\n  });\n\n  test('length', () => {\n    const s = new Stack();\n    expect(s.length()).toBe(0);\n    s.push(100);\n    expect(s.length()).toBe(1);\n    s.push(200);\n    expect(s.length()).toBe(2);\n    s.pop();\n    expect(s.length()).toBe(1);\n    s.push(300);\n    expect(s.length()).toBe(2);\n  });\n\n  test('peek', () => {\n    const s = new Stack();\n    expect(s.peek()).toBe(undefined);\n    s.push(100);\n    expect(s.peek()).toBe(100);\n    s.push(200);\n    expect(s.peek()).toBe(200);\n    s.pop();\n    expect(s.peek()).toBe(100);\n    s.push(300);\n    expect(s.peek()).toBe(300);\n    s.pop();\n    s.pop();\n    expect(s.peek()).toBe(undefined);\n  });\n});"
}