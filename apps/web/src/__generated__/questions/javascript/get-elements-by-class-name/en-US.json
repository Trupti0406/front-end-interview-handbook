{
  "description": "var Component=(()=>{var h=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var u=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),E=(t,e)=>{for(var s in e)a(t,s,{get:e[s],enumerable:!0})},o=(t,e,s,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of p(e))!g.call(t,l)&&l!==s&&a(t,l,{get:()=>e[l],enumerable:!(c=m(e,l))||c.enumerable});return t};var b=(t,e,s)=>(s=t!=null?h(f(t)):{},o(e||!t||!t.__esModule?a(s,\"default\",{value:t,enumerable:!0}):s,t)),y=t=>o(a({},\"__esModule\",{value:!0}),t);var r=u((v,i)=>{i.exports=_jsx_runtime});var M={};E(M,{default:()=>N,frontmatter:()=>x});var n=b(r()),x={title:\"getElementsByClassName\",excerpt:\"Implement a function to get all DOM elements that contain the specified classes\"};function d(t){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",ul:\"ul\",li:\"li\",h2:\"h2\",pre:\"pre\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"getElementsByClassName()\"}),\" is a method which exists on HTML \",(0,n.jsx)(e.code,{children:\"Document\"}),\"s and \",(0,n.jsx)(e.code,{children:\"Element\"}),\"s to return an \",(0,n.jsx)(e.code,{children:\"HTMLCollection\"}),\" of descendant elements within the \",(0,n.jsx)(e.code,{children:\"Document\"}),\"/\",(0,n.jsx)(e.code,{children:\"Element\"}),\" which has the specified class name(s).\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Let's implement our own \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName\",children:(0,n.jsx)(e.code,{children:\"Element.getElementsByClassName()\"})}),\" that is similar but slightly different:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"It is a pure function which takes in an element and a \",(0,n.jsx)(e.code,{children:\"classNames\"}),\" string, a string containing one or more class names to match on, separated by whitespace.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Like \",(0,n.jsx)(e.code,{children:\"Element.getElementsByClassName()\"}),\", only descendants of the specified element are searched, not the element itself.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Return an array of \",(0,n.jsx)(e.code,{children:\"Element\"}),\"s, instead of a \",(0,n.jsx)(e.code,{children:\"HTMLCollection\"}),\" of \",(0,n.jsx)(e.code,{children:\"Element\"}),\"s.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const doc = new DOMParser().parseFromString(\n  \\`<div class=\"foo bar baz\">\n    <span class=\"bar baz\">Span</span>\n    <p class=\"foo baz\">Paragraph</p>\n    <div class=\"foo bar\"></div>\n  </div>\\`,\n  'text/html',\n);\n\ngetElementsByClassName(doc.body, 'foo bar');\n// [div.foo.bar.baz, div.foo.bar] <-- This is an array of elements.\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName\",children:\"Element.getElementsByClassName() - MDN\"})}),`\n`]})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var N=C;return y(M);})();\n;return Component;",
  "format": "javascript",
  "metadata": {
    "author": null,
    "companies": [
      "dropbox",
      "linkedin"
    ],
    "created": 1655337600,
    "difficulty": "medium",
    "duration": 25,
    "excerpt": "Implement a function to get all DOM elements that contain the specified classes",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/get-elements-by-class-name",
    "importance": "mid",
    "languages": [
      "html",
      "css",
      "js"
    ],
    "nextQuestions": [],
    "premium": true,
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "get-elements-by-tag-name"
    ],
    "slug": "get-elements-by-class-name",
    "title": "getElementsByClassName"
  },
  "skeleton": {
    "js": "/**\n * @param {Element} element\n * @param {string} classNames\n * @return {Array<Element>}\n */\nexport default function getElementsByClassName(element, classNames) {\n  throw 'Not implemented!';\n}",
    "ts": null
  },
  "solution": "var Component=(()=>{var u=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var E=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var l in e)s(t,l,{get:e[l],enumerable:!0})},c=(t,e,l,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of f(e))!v.call(t,i)&&i!==l&&s(t,i,{get:()=>e[i],enumerable:!(r=p(e,i))||r.enumerable});return t};var w=(t,e,l)=>(l=t!=null?u(g(t)):{},c(e||!t||!t.__esModule?s(l,\"default\",{value:t,enumerable:!0}):l,t)),y=t=>c(s({},\"__esModule\",{value:!0}),t);var a=E((T,o)=>{o.exports=_jsx_runtime});var S={};b(S,{default:()=>M});var n=w(a());var h=MDXCodeBlock;var d=`function isSubset(a, b) {\n  return Array.from(a).every((value) => b.contains(value));\n}\n\n/**\n * @param {Element} element\n * @param {string} classNames\n * @return {Array<Element>}\n */\nexport default function getElementsByClassName(rootElement, classNames) {\n  const elements = [];\n  const classNamesSet = new Set(classNames.trim().split(/\\\\s+/));\n\n  function traverse(element) {\n    if (element == null) {\n      return;\n    }\n\n    if (isSubset(classNamesSet, element.classList)) {\n      elements.push(element);\n    }\n\n    for (let i = 0; i < element.children.length; i++) {\n      traverse(element.children[i]);\n    }\n  }\n\n  for (let i = 0; i < rootElement.children.length; i++) {\n    traverse(rootElement.children[i]);\n  }\n\n  return elements;\n}\n`;function m(t){let e=Object.assign({p:\"p\",a:\"a\",h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"This question assesses you on the basic DOM traversal APIs, recursion, and knowledge of CSS - how elements are matched according to the element's class name. The approach to solve this question is similar to \",(0,n.jsx)(e.a,{href:\"/questions/javascript/get-elements-by-tag-name\",children:\"getElementsByTagName\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.p,{children:\"The solution is pretty straightforward if you are familiar with the HTML DOM APIs. In particular, we need to know the following:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\",children:(0,n.jsx)(e.code,{children:\"Element.classList\"})}),\" which returns a live \",(0,n.jsx)(e.code,{children:\"DOMTokenList\"}),\" of class attributes of the element. This is preferred over \",(0,n.jsx)(e.code,{children:\"className\"}),\" because \",(0,n.jsx)(e.code,{children:\"className\"}),\" is a string and needs to be manually parsed.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Element/children\",children:(0,n.jsx)(e.code,{children:\"Element.children\"})}),\" which returns a live \",(0,n.jsx)(e.code,{children:\"HTMLCollection\"}),\" of the child elements. We use this over \",(0,n.jsx)(e.code,{children:\"Node.childNodes\"}),\" which returns a live \",(0,n.jsx)(e.code,{children:\"NodeList\"}),\" of child \",(0,n.jsx)(e.code,{children:\"Node\"}),\"s because \",(0,n.jsx)(e.code,{children:\"childNodes\"}),\" will include non-element nodes like text and comment nodes, which are not relevant in this question.\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"However \",(0,n.jsx)(e.code,{children:\"HTMLCollection\"}),\" does not have \",(0,n.jsx)(e.code,{children:\".forEach\"}),\", so we have to iterate through it using traditional \",(0,n.jsx)(e.code,{children:\"for\"}),\" loops.\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"For the class name to match, they have to be a subset of the \",(0,n.jsx)(e.code,{children:\"classList\"}),\" of an element. The matching is also case-sensitive and duplicate class names (in both the input and on the elements) do not matter.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We can maintain an \",(0,n.jsx)(e.code,{children:\"elements\"}),\" array to collect the matching elements while recursively traversing the root element. A depth-first traversal is performed.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Remember that the element argument itself is not included in the results.\"}),`\n`,(0,n.jsx)(h,{children:d}),`\n`,(0,n.jsx)(e.h2,{children:\"Edge Cases\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Element argument is not included in the results even if it matches the tag name.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Duplicate class names in both the input and on the element's \",(0,n.jsx)(e.code,{children:\"class\"}),\" are ignored.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Whitespace in input and on the element's \",(0,n.jsx)(e.code,{children:\"class\"}),\" are handled properly.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Techniques\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Recursion\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"DOM APIs\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"How to get an \",(0,n.jsx)(e.code,{children:\"Element\"}),\"'s class\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"How to traverse an \",(0,n.jsx)(e.code,{children:\"Element\"}),\"'s children\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.li,{children:\"CSS: class matching algorithm\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName\",children:\"Element.getElementsByClassName() - MDN\"})}),`\n`]})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(m,t)})):m(t)}var M=C;return y(S);})();\n;return Component;",
  "tests": "import getElementsByClassName from './get-elements-by-class-name';\n\n/* eslint-disable no-undef */\ndescribe('getElementsByClassName', () => {\n  function checkResults(expected, received) {\n    expect(received.length).toBe(expected.length);\n    for (let i = 0; i < received.length; i++) {\n      expect(received[i].isEqualNode(expected[i])).toBe(true);\n    }\n  }\n\n  test('empty tree', () => {\n    const doc = new DOMParser().parseFromString(``, 'text/html');\n    const els = getElementsByClassName(doc.body, 'foo');\n    const expected = doc.body.getElementsByClassName('foo');\n\n    checkResults(expected, els);\n  });\n\n  test('non-existent class names', () => {\n    const doc = new DOMParser().parseFromString(\n      `<div class=\"foo\">\n        <span class=\"foo\">Span</span>\n        <p>Paragraph</p>\n        <div></div>\n      </div>`,\n      'text/html',\n    );\n\n    const els = getElementsByClassName(doc.body, 'asd');\n    const expected = doc.body.getElementsByClassName('asd');\n    checkResults(expected, els);\n  });\n\n  describe('single class name', () => {\n    test('multiple matching elements', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo\">\n          <div class=\"fooz\">Fooz</div>\n          <div class=\"foo\">Foo</div>\n        </div>`,\n        'text/html',\n      );\n\n      const divs = getElementsByClassName(doc.body, 'foo');\n      const expected = doc.body.getElementsByClassName('foo');\n\n      checkResults(expected, divs);\n    });\n\n    test('ignores comment nodes', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo\">\n        <!-- Here's a comment -->\n        <div class=\"foo\">Hello</div>\n      </div>`,\n        'text/html',\n      );\n\n      const els = getElementsByClassName(doc.body, 'foo');\n      const expected = doc.body.getElementsByClassName('foo');\n\n      checkResults(expected, els);\n    });\n\n    test(\"doesn't include itself\", () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo\"></div>`,\n        'text/html',\n      );\n\n      const body = getElementsByClassName(doc.body.children[0], 'foo');\n      const expected = doc.body.children[0].getElementsByClassName('foo');\n      checkResults(expected, body);\n    });\n\n    test('elements with duplicated classnames', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo foo foo\">\n          <div class=\"bar foo\">Hello</div>\n        </div>`,\n        'text/html',\n      );\n\n      const els = getElementsByClassName(doc.body, 'foo');\n      const expected = doc.body.getElementsByClassName('foo');\n\n      checkResults(expected, els);\n    });\n  });\n\n  describe('multiple class names', () => {\n    test('non-duplicated', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo bar baz\">\n          <span class=\"bar baz\">Span</span>\n          <p class=\"foo baz\">Paragraph</p>\n          <div class=\"foo bar\"></div>\n        </div>`,\n        'text/html',\n      );\n\n      const els1 = getElementsByClassName(doc.body, 'foo bar');\n      const expectedEls1 = doc.body.getElementsByClassName('foo bar');\n      checkResults(expectedEls1, els1);\n\n      const els2 = getElementsByClassName(doc.body, 'bar');\n      const expectedEls2 = doc.body.getElementsByClassName('bar');\n      checkResults(expectedEls2, els2);\n\n      const els3 = getElementsByClassName(doc.body, 'bar baz');\n      const expectedEls3 = doc.body.getElementsByClassName('bar baz');\n      checkResults(expectedEls3, els3);\n    });\n\n    test('duplicated class names in input', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo bar\">\n          <span class=\"bar baz\">Span</span>\n          <p class=\"foo baz\">Paragraph</p>\n          <div class=\"foo bar\"></div>\n        </div>`,\n        'text/html',\n      );\n\n      const els1 = getElementsByClassName(doc.body, 'foo foo bar');\n      const expectedEls1 = doc.body.getElementsByClassName('foo foo bar');\n      checkResults(expectedEls1, els1);\n\n      const els2 = getElementsByClassName(doc.body, 'bar bar');\n      const expectedEls2 = doc.body.getElementsByClassName('bar bar');\n      checkResults(expectedEls2, els2);\n\n      const els3 = getElementsByClassName(doc.body, 'bar baz bar');\n      const expectedEls3 = doc.body.getElementsByClassName('bar baz bar');\n      checkResults(expectedEls3, els3);\n    });\n\n    test('duplicated class names in DOM', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo bar foo baz\">\n          <span class=\"bar baz bar\">Span</span>\n          <p class=\"foo baz baz\">Paragraph</p>\n          <div class=\"foo bar bar bar\"></div>\n        </div>`,\n        'text/html',\n      );\n\n      const els1 = getElementsByClassName(doc.body, 'foo foo bar');\n      const expectedEls1 = doc.body.getElementsByClassName('foo foo bar');\n      checkResults(expectedEls1, els1);\n\n      const els2 = getElementsByClassName(doc.body, 'bar bar');\n      const expectedEls2 = doc.body.getElementsByClassName('bar bar');\n      checkResults(expectedEls2, els2);\n\n      const els3 = getElementsByClassName(doc.body, 'bar baz bar');\n      const expectedEls3 = doc.body.getElementsByClassName('bar baz bar');\n      checkResults(expectedEls3, els3);\n    });\n  });\n\n  test('case-sensitivity', () => {\n    const doc = new DOMParser().parseFromString(\n      `<!DOCTYPE html>\n      <div class=\"foo bar foo baz\">\n        <span class=\"bar baz bar\">Span</span>\n        <p class=\"foo baz baz\">Paragraph</p>\n        <div id=\"1\" class=\"FOO BAR\"></div>\n      </div>`,\n      'text/html',\n    );\n\n    const els1 = getElementsByClassName(doc.body, 'foo foo bar');\n    const expectedEls1 = doc.body.getElementsByClassName('foo foo bar');\n    checkResults(expectedEls1, els1);\n\n    const els2 = getElementsByClassName(doc.body, 'FOO BAR');\n    const expectedEls2 = doc.body.getElementsByClassName('FOO BAR');\n    checkResults(expectedEls2, els2);\n  });\n\n  describe('extra whitespace in classes', () => {\n    test('in class attributes', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo bar  foo  baz\">\n          <span class=\"   bar baz  bar\">Span</span>\n          <p class=\"  foo baz  baz \">Paragraph</p>\n          <div class=\" foo bar   bar  bar  \"></div>\n        </div>`,\n        'text/html',\n      );\n\n      const els1 = getElementsByClassName(doc.body, 'foo foo bar');\n      const expectedEls1 = doc.body.getElementsByClassName('foo foo bar');\n      checkResults(expectedEls1, els1);\n\n      const els2 = getElementsByClassName(doc.body, 'bar bar');\n      const expectedEls2 = doc.body.getElementsByClassName('bar bar');\n      checkResults(expectedEls2, els2);\n\n      const els3 = getElementsByClassName(doc.body, 'bar baz bar');\n      const expectedEls3 = doc.body.getElementsByClassName('bar baz bar');\n      checkResults(expectedEls3, els3);\n    });\n\n    test('in input class', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo bar foo baz\">\n          <span class=\"bar baz bar\">Span</span>\n          <p class=\"foo baz baz\">Paragraph</p>\n          <div class=\"foo bar bar bar\"></div>\n        </div>`,\n        'text/html',\n      );\n\n      const els1 = getElementsByClassName(doc.body, '  foo   foo bar ');\n      const expectedEls1 = doc.body.getElementsByClassName('  foo   foo bar ');\n      checkResults(expectedEls1, els1);\n\n      const els2 = getElementsByClassName(doc.body, '   bar  bar ');\n      const expectedEls2 = doc.body.getElementsByClassName('   bar  bar ');\n      checkResults(expectedEls2, els2);\n\n      const els3 = getElementsByClassName(doc.body, '  bar baz   bar ');\n      const expectedEls3 = doc.body.getElementsByClassName('  bar baz   bar ');\n      checkResults(expectedEls3, els3);\n    });\n\n    test('both attributes and input class', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo  bar  foo  baz\">\n          <span class=\"   bar baz  bar\">Span</span>\n          <p class=\"  foo baz  baz \">Paragraph</p>\n          <div class=\" foo bar   bar  bar  \"></div>\n        </div>`,\n        'text/html',\n      );\n\n      const els1 = getElementsByClassName(doc.body, '  foo   foo bar ');\n      const expectedEls1 = doc.body.getElementsByClassName('  foo   foo bar ');\n      checkResults(expectedEls1, els1);\n\n      const els2 = getElementsByClassName(doc.body, '   bar  bar ');\n      const expectedEls2 = doc.body.getElementsByClassName('   bar  bar ');\n      checkResults(expectedEls2, els2);\n\n      const els3 = getElementsByClassName(doc.body, '  bar baz   bar ');\n      const expectedEls3 = doc.body.getElementsByClassName('  bar baz   bar ');\n      checkResults(expectedEls3, els3);\n    });\n  });\n});"
}