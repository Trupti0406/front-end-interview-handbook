{
  "description": "var Component=(()=>{var l=Object.create;var i=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var y=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),g=(n,e)=>{for(var r in e)i(n,r,{get:e[r],enumerable:!0})},o=(n,e,r,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of m(e))!f.call(n,a)&&a!==r&&i(n,a,{get:()=>e[a],enumerable:!(c=h(e,a))||c.enumerable});return n};var T=(n,e,r)=>(r=n!=null?l(p(n)):{},o(e||!n||!n.__esModule?i(r,\"default\",{value:n,enumerable:!0}):r,n)),b=n=>o(i({},\"__esModule\",{value:!0}),n);var s=y((F,u)=>{u.exports=_jsx_runtime});var x={};g(x,{default:()=>j,frontmatter:()=>v});var t=T(s()),v={title:\"Curry II\",excerpt:\"Implement a function that transforms a function that takes multiple arguments into a function that can be repeatedly called with any number of arguments\"};function d(n){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",code:\"code\",h2:\"h2\",pre:\"pre\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note:\"}),\" This is an advanced version of \",(0,t.jsx)(e.a,{href:\"/questions/javascript/curry\",children:\"Curry\"}),\", you should complete that first before attempting this question.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Currying is the technique of converting a function that takes multiple arguments into a sequence of functions that each takes a single argument.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Implement the \",(0,t.jsx)(e.code,{children:\"curry\"}),\" function which accepts a function as the only argument and returns a function that accepts any number of arguments (vs only one argument at a time in \",(0,t.jsx)(e.a,{href:\"/questions/javascript/curry\",children:\"Curry\"}),\") and returns a function which can be repeatedly called until at least the minimum number of arguments have been provided (determined by how many arguments the original function accepts). The initial function argument is then invoked with the provided arguments.\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`function addTwo(a, b) {\n  return a + b;\n}\nconst curriedAddTwo = curry(addTwo);\ncurriedAddTwo(3)(4); // 7\ncurriedAddTwo(3, 4); // 7\nconst alreadyAddedThree = curriedAddTwo(3);\nalreadyAddedThree(4); // 7\n`})}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`function multiplyThree(a, b, c) {\n  return a * b * c;\n}\nconst curriedMultiplyThree = curry(multiplyThree);\ncurriedMultiplyThree(4)(5)(6); // 120\ncurriedMultiplyThree(4)(5, 6); // 120\ncurriedMultiplyThree(4, 5)(6); // 120\ncurriedMultiplyThree(4, 5, 6); // 120\n\nconst containsFour = curriedMultiplyThree(4);\nconst containsFourMulFive = containsFour(5);\ncontainsFourMulFive(6); // 120\n`})})]})}function w(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(d,n)})):d(n)}var j=w;return b(x);})();\n;return Component;",
  "format": "javascript",
  "metadata": {
    "author": "yangshun",
    "companies": [],
    "created": 1655510400,
    "difficulty": "medium",
    "duration": 20,
    "excerpt": "Implement a function that transforms a function that takes multiple arguments into a function that can be repeatedly called with any number of arguments",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/curry-ii",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [
      "curry-iii"
    ],
    "premium": true,
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "curry"
    ],
    "slug": "curry-ii",
    "title": "Curry II"
  },
  "skeleton": {
    "js": "/**\n * @param {Function} func\n * @return {Function}\n */\nexport default function curry(func) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function curry(func: Function): Function {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var f=Object.create;var c=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var w=(r,n)=>()=>(n||r((n={exports:{}}).exports,n),n.exports),v=(r,n)=>{for(var t in n)c(r,t,{get:n[t],enumerable:!0})},s=(r,n,t,o)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let i of g(n))!y.call(r,i)&&i!==t&&c(r,i,{get:()=>n[i],enumerable:!(o=m(n,i))||o.enumerable});return r};var x=(r,n,t)=>(t=r!=null?f(p(r)):{},s(n||!r||!r.__esModule?c(t,\"default\",{value:r,enumerable:!0}):t,r)),b=r=>s(c({},\"__esModule\",{value:!0}),r);var a=w((q,l)=>{l.exports=_jsx_runtime});var F={};v(F,{default:()=>j});var e=x(a());var u=MDXCodeBlock;var h=`/**\n * @param {Function} func\n * @return {Function}\n */\nexport default function curry(func) {\n  return function curried(...args) {\n    if (args.length === func.length) {\n      return func.apply(this, args);\n    }\n\n    return function (...args2) {\n      return curried.apply(this, [...args, ...args2]);\n    };\n  };\n}\n`;function d(r){let n=Object.assign({p:\"p\",h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\",strong:\"strong\",a:\"a\"},r.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:\"Currying is not commonly used in real-world development but is a moderately common question for interviews as it tests the candidate's understanding of certain JavaScript fundamentals like arity and closures.\"}),`\n`,(0,e.jsx)(n.h2,{children:\"Clarification Questions\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"What value types will \",(0,e.jsx)(n.code,{children:\"curry\"}),\" expect?\"]}),`\n`,(0,e.jsx)(n.li,{children:\"Should the function expect values of different types?\"}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Solution\"}),`\n`,(0,e.jsx)(n.p,{children:\"We first need to understand a few terms:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Arity\"}),\": The number of arguments or operands taken by a function.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Closure\"}),\": A closure is the combination of a function bundled together with references to its lexical environment (surrounding state).\"]}),`\n`]}),`\n`,(0,e.jsx)(n.p,{children:\"The curried function will stop accepting arguments after the number of arguments have been passed into the curried function equals the arity of the original function.\"}),`\n`,(0,e.jsx)(n.p,{children:\"We can keep a record of the curried function arguments so far via closures. Each time the curried function is called, we compare the number of arguments so far with the arity of the original function.\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"If they're the same, we call the original function with the arguments.\"}),`\n`,(0,e.jsx)(n.li,{children:\"If more arguments are needed, we will return a function that accepts more arguments and invokes the curried function with the new arguments.\"}),`\n`]}),`\n`,(0,e.jsx)(u,{children:h}),`\n`,(0,e.jsxs)(n.p,{children:[\"The solution for this question is exactly the same as the solution for \",(0,e.jsx)(n.a,{href:\"/questions/javascript/curry/\",children:\"Curry\"}),\", which doesn't make any assumptions on the number of arguments needed.\"]}),`\n`,(0,e.jsx)(n.h2,{children:\"Edge Cases\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"Calling the function without any arguments should not have any effect, unless the function does not take in any arguments.\"}),`\n`,(0,e.jsxs)(n.li,{children:[\"Functions which access \",(0,e.jsx)(n.code,{children:\"this\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Techniques\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"Closures.\"}),`\n`,(0,e.jsxs)(n.li,{children:[\"Invoking functions via \",(0,e.jsx)(n.code,{children:\"Function.prototype.apply()\"}),\"/\",(0,e.jsx)(n.code,{children:\"Function.prototype.call()\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Notes\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"Intermediate functions should be reusable as seen from the examples in the question description.\"}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Resources\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://blog.logrocket.com/understanding-javascript-currying\",children:\"Understanding JavaScript currying\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://lodash.com/docs/4.17.15#curry\",children:\"Lodash curry\"})}),`\n`]})]})}function k(r={}){let{wrapper:n}=r.components||{};return n?(0,e.jsx)(n,Object.assign({},r,{children:(0,e.jsx)(d,r)})):d(r)}var j=k;return b(F);})();\n;return Component;",
  "tests": "import curry from './curry-ii';\n\nconst empty = () => 0;\nconst square = (a) => a * a;\nconst add = (a, b) => a * b;\nconst mulThree = (a, b, c) => a * b * c;\n\ndescribe('curry', () => {\n  test('returns function', () => {\n    const curried = curry(square);\n    expect(curried).toBeInstanceOf(Function);\n  });\n\n  test('empty function', () => {\n    const curried = curry(empty);\n    expect(curried()).toBe(0);\n  });\n\n  test('single argument', () => {\n    const curried = curry(square);\n    expect(curried()).toBeInstanceOf(Function);\n    expect(curried(2)).toBe(4);\n  });\n\n  describe('two arguments', () => {\n    test('one arg at a time', () => {\n      const curried = curry(add);\n      expect(curried()).toBeInstanceOf(Function);\n      expect(curried(7)(3)).toBe(21);\n    });\n\n    test('both args at once', () => {\n      const curried = curry(add);\n      expect(curried()).toBeInstanceOf(Function);\n      expect(curried(7, 3)).toBe(21);\n    });\n  });\n\n  describe('multiple arguments', () => {\n    test('one arg at a time', () => {\n      const curried = curry(mulThree);\n      expect(curried()).toBeInstanceOf(Function);\n      expect(curried(7)(3)(2)).toBe(42);\n    });\n\n    test('multiple args at once', () => {\n      const curried = curry(mulThree);\n      expect(curried()).toBeInstanceOf(Function);\n      expect(curried(7, 3, 2)).toBe(42);\n      expect(curried(7, 3)(2)).toBe(42);\n      expect(curried(7)(3, 2)).toBe(42);\n    });\n  });\n\n  test('can be reused', () => {\n    const curried = curry(square);\n    expect(curried()).toBeInstanceOf(Function);\n    expect(curried(2)).toBe(4);\n    expect(curried(3)).toBe(9);\n  });\n\n  test('ignores empty args', () => {\n    const curried = curry(mulThree);\n    expect(curried()(4)()(3)()(2)).toBe(24);\n    expect(curried()()()()(4)(2)(3)).toBe(24);\n  });\n\n  test('can access this', () => {\n    const curried = curry(function (val) {\n      return this.multiplier * val;\n    });\n\n    const obj = { multiplier: 5, mul: curried };\n    expect(obj.mul()).toBeInstanceOf(Function);\n    expect(obj.mul(7)).toBe(35);\n  });\n});"
}