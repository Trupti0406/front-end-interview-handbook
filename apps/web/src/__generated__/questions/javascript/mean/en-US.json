{
  "description": "var Component=(()=>{var o=Object.create;var t=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var x=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),y=(r,e)=>{for(var a in e)t(r,a,{get:e[a],enumerable:!0})},i=(r,e,a,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of u(e))!f.call(r,c)&&c!==a&&t(r,c,{get:()=>e[c],enumerable:!(l=m(e,c))||l.enumerable});return r};var g=(r,e,a)=>(a=r!=null?o(p(r)):{},i(e||!r||!r.__esModule?t(a,\"default\",{value:r,enumerable:!0}):a,r)),j=r=>i(t({},\"__esModule\",{value:!0}),r);var s=x((w,h)=>{h.exports=_jsx_runtime});var v={};y(v,{default:()=>b,frontmatter:()=>_});var n=g(s()),_={title:\"Mean\",excerpt:\"Implement a function that finds the mean of the values inside an array\"};function d(r){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",ol:\"ol\",li:\"li\",em:\"em\",pre:\"pre\",ul:\"ul\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a function \",(0,n.jsx)(e.code,{children:\"mean(array)\"}),\" that returns the mean (also known as average) of the values inside \",(0,n.jsx)(e.code,{children:\"array\"}),\", which is an array of numbers.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"array\"}),\" \",(0,n.jsx)(e.em,{children:\"(Array)\"}),\": Array of numbers.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:\"(Number)\"}),\": Returns the mean of the values in \",(0,n.jsx)(e.code,{children:\"array\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`mean([4, 2, 8, 6]); // => 5\\r\nmean([1, 2, 3, 4]); // => 2.5\\r\nmean([1, 2, 2]); // => 1.6666666666666667\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The function should return \",(0,n.jsx)(e.code,{children:\"NaN\"}),\" if \",(0,n.jsx)(e.code,{children:\"array\"}),\" is empty.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`mean([]); // => NaN\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://lodash.com/docs/#mean\",children:[\"Lodash \",(0,n.jsx)(e.code,{children:\"_.mean\"})]})}),`\n`]})]})}function N(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(d,r)})):d(r)}var b=N;return j(v);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/mean\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/mean.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/src/mean.run.test.ts": "import mean from './mean';\n\ndescribe('mean', () => {\n  test('empty input array', () => {\n    expect(mean([])).toEqual(NaN);\n  });\n\n  test('single value', () => {\n    expect(mean([0])).toEqual(0);\n  });\n\n  test('two values', () => {\n    expect(mean([1, 3])).toEqual(2);\n  });\n});\n",
    "/src/mean.submit.test.ts": "import mean from './mean';\n\ndescribe('mean', () => {\n  test('empty input array', () => {\n    expect(mean([])).toEqual(NaN);\n  });\n\n  test('single value', () => {\n    expect(mean([0])).toEqual(0);\n    expect(mean([1])).toEqual(1);\n  });\n\n  test('two values', () => {\n    expect(mean([0, 0])).toEqual(0);\n    expect(mean([1, 3])).toEqual(2);\n    expect(mean([0, 6])).toEqual(3);\n  });\n\n  test('positive values', () => {\n    expect(mean([4, 2, 8, 6])).toEqual(5);\n    expect(mean([0, 1, 2, 3, 4])).toEqual(2);\n  });\n\n  test('negative values', () => {\n    expect(mean([-4, -2, -8, -6])).toEqual(-5);\n    expect(mean([0, -1, -2, -3, -4])).toEqual(-2);\n  });\n\n  test('same values', () => {\n    expect(mean([0, 0, 0])).toEqual(0);\n    expect(mean([1, 1, 1, 1])).toEqual(1);\n    expect(mean([-2, -2, -2, -2, -2])).toEqual(-2);\n  });\n\n  test('mean is not exact', () => {\n    expect(mean([0, -1, -2, -3])).toBeCloseTo(-1.5);\n    expect(mean([1, 2, 2])).toBeCloseTo(1.6666666666666667);\n    expect(mean([1, 3, 5, 4, 2, 2, 6, 2])).toBeCloseTo(3.125);\n  });\n\n  test('decimal values', () => {\n    expect(mean([-1.3, -2, 3])).toBeCloseTo(-0.1);\n    expect(mean([-1, 2, 0.2])).toBeCloseTo(0.4);\n    expect(mean([1, -2, -2])).toBeCloseTo(-1);\n  });\n});\n",
    "/src/mean.ts": "/**\r\n * @param {Array<number>} array - Array from which the elements are all numbers.\r\n * @return {number} Returns mean.\r\n */\r\nexport default function mean(array: Array<number>): number {\r\n  let total: number = 0;\r\n\r\n  // Calculate the sum of all numbers in the array.\r\n  for (let i: number = 0; i < array.length; i++) {\r\n    total += array[i];\r\n  }\r\n\r\n  // Calculate the mean from the sum.\r\n  const mean: number = total / array.length;\r\n\r\n  return mean;\r\n}\r\n"
  },
  "format": "javascript",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1709856000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": "Implement a function that finds the mean of the values inside an array",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/mean",
    "importance": "low",
    "languages": [
      "js"
    ],
    "nextQuestions": [],
    "premium": true,
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "get"
    ],
    "slug": "mean",
    "subtitle": null,
    "title": "Mean",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array - Array from which the elements are all numbers.\n * @return {Number} Returns mean.\n */\nexport default function mean(array) {\n  throw 'Not implemented!';\n}",
    "ts": "/**\r\n * @param {Array<number>} array - Array from which the elements are all numbers.\r\n * @return {number} Returns mean.\r\n */\r\nexport default function mean(array: number[]): number {\r\n  throw 'Not implemented!';\r\n}"
  },
  "solution": "var Component=(()=>{var f=Object.create;var l=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var v=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),x=(a,e)=>{for(var n in e)l(a,n,{get:e[n],enumerable:!0})},s=(a,e,n,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of b(e))!p.call(a,r)&&r!==n&&l(a,r,{get:()=>e[r],enumerable:!(o=g(e,r))||o.enumerable});return a};var k=(a,e,n)=>(n=a!=null?f(y(a)):{},s(e||!a||!a.__esModule?l(n,\"default\",{value:a,enumerable:!0}):n,a)),w=a=>s(l({},\"__esModule\",{value:!0}),a);var h=v((D,i)=>{i.exports=_jsx_runtime});var M={};x(M,{default:()=>A});var t=k(h());var c=MDXCodeBlock;var u=`/**\n * @param {Array} array - Array from which the elements are all numbers.\n * @return {Number} Returns mean.\n */\nexport default function mean(array) {\n  let total = 0;\n\n  // Calculate the sum of all numbers in the array.\n  for (let i = 0; i < array.length; i++) {\n    total += array[i];\n  }\n\n  // Calculate the mean from the sum.\n  const mean = total / array.length;\n\n  return mean;\n}\n`;var m=`/**\\r\n * @param {Array<number>} array - Array from which the elements are all numbers.\\r\n * @return {number} Returns mean.\\r\n */\\r\nexport default function mean(array: Array<number>): number {\\r\n  let total: number = 0;\\r\n\\r\n  // Calculate the sum of all numbers in the array.\\r\n  for (let i: number = 0; i < array.length; i++) {\\r\n    total += array[i];\\r\n  }\\r\n\\r\n  // Calculate the mean from the sum.\\r\n  const mean: number = total / array.length;\\r\n\\r\n  return mean;\\r\n}\\r\n`;function d(a){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",a:\"a\"},a.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(e.p,{children:\"Here is a solution that sums all of the elements and divides it with the number of elements to get the mean using basic functions.\"}),`\n`,(0,t.jsx)(c,{languages:{jsx:u,tsx:m}}),`\n`,(0,t.jsx)(e.h2,{children:\"Edge Cases\"}),`\n`,(0,t.jsxs)(e.p,{children:[`It is possible that the sum of the numbers in the array becomes too big that it \"overflows\". Strictly speaking, overflowing doesn't occur in JavaScript, values larger than `,(0,t.jsx)(e.code,{children:\"Number.MAX_VALUE\"}),\" are represented as \",(0,t.jsx)(e.code,{children:\"Infinity\"}),\" and will lose their actual value.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"To handle large value cases, we can split the array into smaller equal chunks and calculate the average for each chunk. The final average can be determined by taking the average of each chunk's averages. Not all array lengths can be divided into equal chunks, so the key idea here is to divide as small as possible, then take a weighted average of the chunks that depends on the size of each chunk.\"}),`\n`,(0,t.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsxs)(e.a,{href:\"https://lodash.com/docs/#mean\",children:[\"Lodash \",(0,t.jsx)(e.code,{children:\"_.mean\"})]})}),`\n`]})]})}function j(a={}){let{wrapper:e}=a.components||{};return e?(0,t.jsx)(e,Object.assign({},a,{children:(0,t.jsx)(d,a)})):d(a)}var A=j;return w(M);})();\n;return Component;",
  "workspace": {
    "main": "/src/mean.ts",
    "run": "/src/mean.run.test.ts",
    "submit": "/src/mean.submit.test.ts"
  }
}