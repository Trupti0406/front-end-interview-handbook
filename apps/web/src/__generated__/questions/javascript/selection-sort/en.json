{
  "description": "var Component=(()=>{var d=Object.create;var o=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var x=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var i in e)o(t,i,{get:e[i],enumerable:!0})},a=(t,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of p(e))!g.call(t,r)&&r!==i&&o(t,r,{get:()=>e[r],enumerable:!(s=m(e,r))||s.enumerable});return t};var S=(t,e,i)=>(i=t!=null?d(u(t)):{},a(e||!t||!t.__esModule?o(i,\"default\",{value:t,enumerable:!0}):i,t)),y=t=>a(o({},\"__esModule\",{value:!0}),t);var c=x((C,l)=>{l.exports=_jsx_runtime});var b={};f(b,{default:()=>_,frontmatter:()=>j});var n=S(c()),j={title:\"Selection Sort\",excerpt:\"Implement a function that performs a selection sort\"};function h(t){let e=Object.assign({p:\"p\",img:\"img\",h2:\"h2\",pre:\"pre\",code:\"code\",ol:\"ol\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Implement a function that performs a selection sort. The function should take in an array of integers and return an array with the integers sorted in ascending order.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/img/questions/selection-sort/selection-sort-input-output.png\",alt:\"Selection Sort expected input and output\"})}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`selectionSort([9, 3, 6, 2, 1, 11]); // [1, 2, 3, 6, 9, 11]\nselectionSort([12, 16, 14, 1, 2, 3]); // [1, 2, 3, 12, 14, 16]\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Recap\"}),`\n`,(0,n.jsx)(e.p,{children:\"Selection sort is a sorting algorithm that repeatedly scans an unsorted array and with each iteration finds the minimum element to build up a sorted array.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Here is the basic idea behind selection sort:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Find the minimum element in the array.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Swap it with the element at the first position.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Find the second minimum element in the array.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Swap it with the element at the second position.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Continue this process until the entire array is sorted.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/img/questions/selection-sort/selection-sort-explanation.png\",alt:\"Selection Sort explanation\"})})]})}function w(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var _=w;return y(b);})();\n;return Component;",
  "format": "javascript",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1671667200,
    "difficulty": "easy",
    "duration": 10,
    "excerpt": "Implement a function that performs a selection sort",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/selection-sort",
    "importance": "low",
    "languages": [
      "js"
    ],
    "nextQuestions": [
      "quick-sort"
    ],
    "premium": true,
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "insertion-sort"
    ],
    "slug": "selection-sort",
    "title": "Selection Sort"
  },
  "skeleton": "/**\n * @param {Array<number>} arr The input integer array to be sorted.\n * @return {Array<number>}\n */\nexport default function selectionSort(arr) {\n  throw 'Not implemented!';\n}",
  "solution": "var Component=(()=>{var m=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var x=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),b=(r,e)=>{for(var t in e)o(r,t,{get:e[t],enumerable:!0})},s=(r,e,t,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of f(e))!y.call(r,i)&&i!==t&&o(r,i,{get:()=>e[i],enumerable:!(a=p(e,i))||a.enumerable});return r};var I=(r,e,t)=>(t=r!=null?m(g(r)):{},s(e||!r||!r.__esModule?o(t,\"default\",{value:r,enumerable:!0}):t,r)),w=r=>s(o({},\"__esModule\",{value:!0}),r);var d=x((T,l)=>{l.exports=_jsx_runtime});var C={};b(C,{default:()=>S});var n=I(d());var c=MDXCodeBlock;var h=`/**\n * @param {Array<number>} arr The input integer array to be sorted.\n * @return {Array<number>}\n */\nexport default function selectionSort(arr) {\n  // Iterate through the unsorted portion of the array.\n  for (let i = 0; i < arr.length; i++) {\n    // Initialize index of min element to the start\n    // of the unsorted section.\n    let minIndex = i;\n    // Find the min element.\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] < arr[minIndex]) {\n        minIndex = j;\n      }\n    }\n\n    // Swap the found min element with the first element of the\n    // unsorted section.\n    [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];\n\n    // By the end of each outer loop iteration,\n    // [0, i] are sorted.\n  }\n\n  return arr;\n}\n`;function u(r){let e=Object.assign({p:\"p\",h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\",pre:\"pre\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Selection sort is a sorting algorithm that works great for small arrays, or arrays which are largely already sorted.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"It has a time complexity of O(n\",(0,n.jsx)(\"sup\",{children:\"2\"}),\"), which means that it is discouraged for sorting large arrays. It is not generally used in practice.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Clarification Questions\"}),`\n`,(0,n.jsx)(e.p,{children:\"If unspecified:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Should the data be sorted in an ascending or descending order?\"}),`\n`,(0,n.jsx)(e.li,{children:\"Should the data be sorted in-place or is it acceptable to use additional data structures?\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"What kinds of inputs do we need to handle?\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Will it just be an array of integers or should we handle other data types?\"}),`\n`,(0,n.jsx)(e.li,{children:\"Are there a large number of duplicate elements?\"}),`\n`,(0,n.jsx)(e.li,{children:\"How should negative numbers be handled?\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.p,{children:\"Note: This question tackles sorting for an output in ascending order. Refer to the 'Notes' section below on how to handle other cases.\"}),`\n`,(0,n.jsx)(c,{children:h}),`\n`,(0,n.jsx)(e.h2,{children:\"Edge Cases\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Non-integer element input: If the input array comprises of elements of different data types, you may need to return an error, settle for sorting on a best-effort basis, for e.g., only sorting a subset of the input data, or even define custom comparison functions for non-integers.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Single element / Empty input: Either return the original data structure, raise an error, or clarify required handling.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Already sorted input: You may want to detect sorting and return the input unchanged.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Duplicate elements: Especially if the array has a large number of duplicate elements, you may want to further optimize your implementation to avoid unnecessary comparisons.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Invalid input: If the input is not a array, consider throwing an error.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"If asked to sort in descending order, change the comparison to find \",(0,n.jsx)(e.code,{children:\"maxIndex\"}),\" instead of \",(0,n.jsx)(e.code,{children:\"minIndex\"}),\", by using \",(0,n.jsx)(e.code,{children:\">=\"}),\" instead of \",(0,n.jsx)(e.code,{children:\"<\"}),\", in the relevant comparison as per below:\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`if (arr[j] >= arr[maxIndex]) {\n  maxIndex = j;\n}\n`})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"If asked to use additional data structures or to write a pure function rather than sorting the data in-place, use a spread operator to create a new array before applying the sort.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Time Complexity\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The time complexity of selection sort is O(n\",(0,n.jsx)(\"sup\",{children:\"2\"}),\") - the same in all cases. This can be derived by observing the number of loops. There are 2 loops so the complexity is O(n\",(0,n.jsx)(\"sup\",{children:\"2\"}),\").\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Space Complexity\"}),`\n`,(0,n.jsx)(e.p,{children:\"The space complexity is O(1) because we only use constant extra space for storing variables. Memory requirements remain the same for every input.\"})]})}function v(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(u,r)})):u(r)}var S=v;return w(C);})();\n;return Component;",
  "tests": "import sort from './selection-sort';\n\n/* eslint-disable no-undef */\ndescribe('sort', () => {\n  test('empty', () => {\n    expect(sort([])).toEqual([]);\n  });\n\n  test('one element', () => {\n    expect(sort([1])).toEqual([1]);\n  });\n\n  test('two elements', () => {\n    expect(sort([2, 1])).toEqual([1, 2]);\n    expect(sort([1, 2])).toEqual([1, 2]);\n  });\n\n  test('more than two elements', () => {\n    expect(sort([10, 2, 4])).toEqual([2, 4, 10]);\n    expect(sort([4, 5, 6, 1, 2, 3])).toEqual([1, 2, 3, 4, 5, 6]);\n    expect(sort([1, 2, 3, 4, 5, 0])).toEqual([0, 1, 2, 3, 4, 5]);\n    expect(sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])).toEqual([\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n    ]);\n    expect(sort([5, 4, 3, 2, 1, 10, 9, 8, 7, 6])).toEqual([\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n    ]);\n    expect(sort([98322, 3242, 876, -234, 34, 12331])).toEqual([\n      -234, 34, 876, 3242, 12331, 98322,\n    ]);\n  });\n\n  test('duplicate elements', () => {\n    expect(sort([1, 1])).toEqual([1, 1]);\n    expect(sort([2, 2, 2])).toEqual([2, 2, 2]);\n    expect(sort([2, 1, 2])).toEqual([1, 2, 2]);\n    expect(sort([1, 1, 1, 1, 1, 1])).toEqual([1, 1, 1, 1, 1, 1]);\n    expect(sort([7, 2, 4, 3, 1, 2])).toEqual([1, 2, 2, 3, 4, 7]);\n  });\n});"
}