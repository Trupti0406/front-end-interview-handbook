{
  "description": "var Component=(()=>{var h=Object.create;var i=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var y=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),g=(r,e)=>{for(var c in e)i(r,c,{get:e[c],enumerable:!0})},t=(r,e,c,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of u(e))!p.call(r,a)&&a!==c&&i(r,a,{get:()=>e[a],enumerable:!(l=f(e,a))||l.enumerable});return r};var x=(r,e,c)=>(c=r!=null?h(m(r)):{},t(e||!r||!r.__esModule?i(c,\"default\",{value:r,enumerable:!0}):c,r)),v=r=>t(i({},\"__esModule\",{value:!0}),r);var s=y((w,d)=>{d.exports=_jsx_runtime});var A={};g(A,{default:()=>b,frontmatter:()=>j});var n=x(s()),j={title:\"Difference\",excerpt:\"Implement a function that finds the difference in values between arrays\"};function o(r){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",h2:\"h2\",ol:\"ol\",li:\"li\",em:\"em\",pre:\"pre\",ul:\"ul\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a function \",(0,n.jsx)(e.code,{children:\"difference(array, values)\"}),\" that creates an array of \",(0,n.jsx)(e.code,{children:\"array\"}),\" values not included in the other given arrays using \",(0,n.jsx)(e.a,{href:\"http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero\",children:(0,n.jsx)(e.code,{children:\"SameValueZero\"})}),\" for equality comparisons. The order and references of result values are determined by the first array.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"array\"}),\" \",(0,n.jsx)(e.em,{children:\"(Array)\"}),\": The array to inspect.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"values\"}),\" \",(0,n.jsx)(e.em,{children:\"(Array)\"}),\": The values to exclude.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:\"(Array)\"}),\": Returns the new array of filtered values.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`difference([1, 2, 3], [2, 3]); // => [1]\ndifference([1, 2, 3, 4], [2, 3, 1]); // => [4]\ndifference([1, 2, 3], [2, 3, 1, 4]); // => []\ndifference([1, , 3], [1]); // => [3]\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The function should return the original array values if \",(0,n.jsx)(e.code,{children:\"values\"}),\" is empty.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`difference([1, 2, 3], []); // => [1, 2, 3]\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://lodash.com/docs/#difference\",children:[\"Lodash \",(0,n.jsx)(e.code,{children:\"_.difference\"})]})}),`\n`]})]})}function _(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(o,r)})):o(r)}var b=_;return v(A);})();\n;return Component;",
  "format": "javascript",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1682553600,
    "difficulty": "easy",
    "duration": 10,
    "excerpt": "Implement a function that finds the difference in values between arrays",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/difference",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "premium": true,
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "get",
      "compact",
      "chunk"
    ],
    "slug": "difference",
    "subtitle": null,
    "title": "Difference",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array - Array from which different elements are to be removed.\n * @param {Array} values - Array of values that are to be removed from the original array.\n * @return {Array} Returns filtered array.\n */\nexport default function difference(array, values) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function difference<T>(\n  array: Array<T>,\n  values: Array<T>,\n): Array<T> {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var v=Object.create;var s=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),C=(r,e)=>{for(var t in e)s(r,t,{get:e[t],enumerable:!0})},l=(r,e,t,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let n of m(e))!x.call(r,n)&&n!==t&&s(r,n,{get:()=>e[n],enumerable:!(i=y(e,n))||i.enumerable});return r};var j=(r,e,t)=>(t=r!=null?v(p(r)):{},l(e||!r||!r.__esModule?s(t,\"default\",{value:r,enumerable:!0}):t,r)),A=r=>l(s({},\"__esModule\",{value:!0}),r);var u=g((w,o)=>{o.exports=_jsx_runtime});var b={};C(b,{default:()=>k});var a=j(u());var c=MDXCodeBlock;var d=`/**\n * @param {Array} array - Array from which different elements are to be removed.\n * @param {Array} values - Array of values that are to be removed from the original array.\n * @return {Array} Returns filtered array.\n */\nexport default function difference(array, values) {\n  const result = [];\n\n  // Create a set of all the values in the values arrays.\n  const valuesSet = new Set(values);\n\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    // Check if the value is in the values set.\n    if (!valuesSet.has(value) && !(value === undefined && !(i in array))) {\n      result.push(value);\n    }\n  }\n\n  return result;\n}\n`;var h=`export default function difference<T>(\n  array: Array<T>,\n  values: Array<T>,\n): Array<T> {\n  const result = [];\n\n  // Create a set of all the values in the values arrays.\n  const valuesSet = new Set(values);\n\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    // Check if the value is in the values set.\n    if (!valuesSet.has(value) && !(value === undefined && !(i in array))) {\n      result.push(value);\n    }\n  }\n\n  return result;\n}\n`;function f(r){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",a:\"a\"},r.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,a.jsx)(c,{languages:{jsx:d,tsx:h}}),`\n`,(0,a.jsx)(e.h2,{children:\"Edge Cases\"}),`\n`,(0,a.jsxs)(e.p,{children:[\"To handle sparse arrays such as \",(0,a.jsx)(e.code,{children:\"[1, ,3]\"}),\", the \",(0,a.jsx)(e.code,{children:\"in\"}),\" operator is used check if the index \",(0,a.jsx)(e.code,{children:\"i\"}),\" is present in the \",(0,a.jsx)(e.code,{children:\"array\"}),\" before checking if the value at index \",(0,a.jsx)(e.code,{children:\"i\"}),\" is undefined. This ensures that sparse arrays are handled correctly.\"]}),`\n`,(0,a.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,a.jsxs)(e.ul,{children:[`\n`,(0,a.jsx)(e.li,{children:(0,a.jsxs)(e.a,{href:\"https://lodash.com/docs/#difference\",children:[\"Lodash \",(0,a.jsx)(e.code,{children:\"_.difference\"})]})}),`\n`]})]})}function T(r={}){let{wrapper:e}=r.components||{};return e?(0,a.jsx)(e,Object.assign({},r,{children:(0,a.jsx)(f,r)})):f(r)}var k=T;return A(b);})();\n;return Component;",
  "tests": "import difference from './difference';\n\ndescribe('difference', () => {\n  test('empty input array', () => {\n    expect(difference([], [])).toEqual([]);\n    expect(difference([], [1, 2, 3])).toEqual([]);\n  });\n\n  test('values array is empty', () => {\n    expect(difference([1, 2, 3], [])).toEqual([1, 2, 3]);\n  });\n\n  test('unique values that are present in array but not in values', () => {\n    expect(difference([1, 2, 3], [2, 3, 4])).toEqual([1]);\n    expect(difference(['a', 'b', 'c'], ['b', 'c', 'd'])).toEqual(['a']);\n    expect(difference([null, undefined, 1, NaN], [undefined, 2, 3])).toEqual([\n      null,\n      1,\n      NaN,\n    ]);\n  });\n\n  test('all values in array are present in values', () => {\n    expect(difference([1, 2, 3], [1, 2, 3])).toEqual([]);\n    expect(difference(['a', 'b', 'c'], ['a', 'b', 'c'])).toEqual([]);\n    expect(difference([null, undefined], [null, undefined])).toEqual([]);\n  });\n\n  test('sparse arrays', () => {\n    expect(difference([1, , 3], [2])).toEqual([1, 3]);\n  });\n\n  test('NaN values', () => {\n    expect(difference([1, NaN, 2], [NaN, 3, 4])).toEqual([1, 2]);\n  });\n});"
}