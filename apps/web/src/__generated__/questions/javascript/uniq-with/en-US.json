{
  "description": "var Component=(()=>{var s=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var x=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),y=(r,e)=>{for(var t in e)i(r,t,{get:e[t],enumerable:!0})},o=(r,e,t,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of m(e))!f.call(r,a)&&a!==t&&i(r,a,{get:()=>e[a],enumerable:!(c=u(e,a))||c.enumerable});return r};var b=(r,e,t)=>(t=r!=null?s(p(r)):{},o(e||!r||!r.__esModule?i(t,\"default\",{value:r,enumerable:!0}):t,r)),g=r=>o(i({},\"__esModule\",{value:!0}),r);var l=x((M,h)=>{h.exports=_jsx_runtime});var W={};y(W,{default:()=>v,frontmatter:()=>j});var n=b(l()),j={title:\"Unique With\",excerpt:\"Implement a function to remove all duplicate values from an array based on a specific comparison criteria.\"};function d(r){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",ol:\"ol\",li:\"li\",em:\"em\",pre:\"pre\",ul:\"ul\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a function \",(0,n.jsx)(e.code,{children:\"uniqWith\"}),\" that takes in an array and returns a duplicate-free version of the array where only the first occurrence of each element compared to each other with \",(0,n.jsx)(e.code,{children:\"comparator\"}),\" is kept. The order of result values is determined by the order they occur in the array.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"array\"}),\" \",(0,n.jsx)(e.em,{children:\"(Array)\"}),\": The array to iterate over.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"comparator\"}),\" \",(0,n.jsx)(e.em,{children:\"(Function)\"}),\": The comparator invoked per element.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:\"(Array)\"}),\": Returns the unique array.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`uniqWith([2.1, 1.2, 2.3], (a, b) => Math.floor(a) === Math.floor(b)); // => [2.1, 1.2]\nuniqWith([{ x: 1 }, { x: 2 }, { x: 1 }], (a, b) => a.x === b.x); //\\xA0=>\\xA0[{\\xA0x:\\xA01\\xA0},\\xA0{\\xA0x:\\xA02\\xA0}]\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"The function should return an empty array or the only value if there is only 0 and 1 given respectively.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`uniqWith([], (a, b) => a === b); // => []\nuniqWith(1); // => [1]\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://lodash.com/docs/#uniqWith\",children:[\"Lodash \",(0,n.jsx)(e.code,{children:\"_.uniqWith\"})]})}),`\n`]})]})}function q(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(d,r)})):d(r)}var v=q;return g(W);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/uniq-with\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/uniq-with.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n",
    "/src/uniq-with.run.test.ts": "import uniqWith from './uniq-with';\n\ndescribe('uniqWith', () => {\n  test('empty array', () => {\n    expect(uniqWith([])).toEqual([]);\n  });\n\n  test('one value', () => {\n    expect(uniqWith([0])).toEqual([0]);\n  });\n\n  test('different values', () => {\n    expect(\n      uniqWith([2.1, 1.2, 2.3], (a, b) => Math.floor(a) === Math.floor(b)),\n    ).toEqual([2.1, 1.2]);\n  });\n\n  test('duplicate values', () => {\n    expect(\n      uniqWith([{ x: 1 }, { x: 2 }, { x: 1 }], (a, b) => a.x === b.x),\n    ).toEqual([{ x: 1 }, { x: 2 }]);\n  });\n});\n",
    "/src/uniq-with.submit.test.ts": "import uniqWith from './uniq-with';\n\ndescribe('uniqWith', () => {\n  test('empty array', () => {\n    expect(uniqWith([])).toEqual([]);\n  });\n\n  test('duplicate values', () => {\n    expect(uniqWith([2, 1, 2])).toEqual([2, 1]);\n    expect(uniqWith([2, 2, 1])).toEqual([2, 1]);\n    expect(uniqWith([2, 1, 2, 3])).toEqual([2, 1, 3]);\n  });\n\n  test('iteratee as a string', () => {\n    expect(\n      uniqWith([{ n: 1 }, { n: 2 }, { n: 1 }], (a, b) => a.n === b.n),\n    ).toEqual([{ n: 1 }, { n: 2 }]);\n    expect(\n      uniqWith(\n        [{ age: 30 }, { age: 22 }, { age: 22 }],\n        (a, b) => a['age'] === b['age'],\n      ),\n    ).toEqual([{ age: 30 }, { age: 22 }]);\n  });\n\n  test('iteratee as a function', () => {\n    expect(\n      uniqWith(\n        [{ data: { score: 10 } }, { data: { score: 10 } }],\n        (a: any, b: any) => a.data.score === b.data.score,\n      ),\n    ).toEqual([{ data: { score: 10 } }]);\n  });\n\n  test('strings comparison', () => {\n    expect(\n      uniqWith(\n        ['apple', 'pear', 'mango'],\n        (a: any, b: any) => a.length === b.length,\n      ),\n    ).toEqual(['apple', 'pear']);\n  });\n\n  test('mixed data types', () => {\n    expect(\n      uniqWith([1, '2', 3], (a: any, b: any) => Number(a) === Number(b)),\n    ).toEqual([1, '2', 3]);\n  });\n});\n",
    "/src/uniq-with.ts": "export default function uniqWith<T>(\n  array: Array<T>,\n  comparator: ((a: T, b: T) => boolean) | string = (a, b) => a === b,\n): Array<T> {\n  const result: Array<T> = [];\n\n  // Ensure `comparator` is a function.\n  const comparatorFunc =\n    typeof comparator === 'function' ? comparator : (a: any, b: any) => a === b;\n\n  array.forEach((item) => {\n    // Check if result array contains the same value when compared with `comparator`.\n    const isUnique =\n      result.findIndex((resultItem) => comparatorFunc(item, resultItem)) === -1;\n    if (isUnique) {\n      result.push(item);\n    }\n  });\n\n  return result;\n}\n"
  },
  "format": "javascript",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1710806400,
    "difficulty": "medium",
    "duration": 15,
    "excerpt": "Implement a function to remove all duplicate values from an array based on a specific comparison criteria.",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/uniq-with",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "premium": true,
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "data-selection",
      "unique-array",
      "uniq-by"
    ],
    "slug": "uniq-with",
    "subtitle": null,
    "title": "Unique With",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array The array to iterate over.\n * @param {Function | string} comparator The comparator invoked per element.\n * @returns {Array} Returns the unique array.\n */\nexport default function uniqWith(array, comparator = (a, b) => a === b) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function uniqWith<T>(\n  array: Array<T>,\n  comparator: ((a: T, b: T) => boolean) | string = (a, b) => a === b,\n): Array<T> {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var p=Object.create;var o=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),q=(r,e)=>{for(var a in e)o(r,a,{get:e[a],enumerable:!0})},i=(r,e,a,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let n of y(e))!b.call(r,n)&&n!==a&&o(r,n,{get:()=>e[n],enumerable:!(c=f(e,n))||c.enumerable});return r};var T=(r,e,a)=>(a=r!=null?p(x(r)):{},i(e||!r||!r.__esModule?o(a,\"default\",{value:r,enumerable:!0}):a,r)),j=r=>i(o({},\"__esModule\",{value:!0}),r);var u=g((k,s)=>{s.exports=_jsx_runtime});var I={};q(I,{default:()=>F});var t=T(u());var h=MDXCodeBlock;var m=`/**\n * @param {Array} array The array to iterate over.\n * @param {Function | string} comparator The comparator invoked per element.\n * @returns {Array} Returns the unique array.\n */\nexport default function uniqWith(array, comparator = (a, b) => a === b) {\n  const result = [];\n\n  // Ensure \\`comparator\\` is a function.\n  const comparatorFunc =\n    typeof comparator === 'function' ? comparator : (a, b) => a === b;\n\n  array.forEach((item) => {\n    // Check if result array contains the same value when compared with \\`comparator\\`.\n    const isUnique =\n      result.findIndex((resultItem) => comparatorFunc(item, resultItem)) === -1;\n    if (isUnique) {\n      result.push(item);\n    }\n  });\n\n  return result;\n}\n`;var l=`export default function uniqWith<T>(\n  array: Array<T>,\n  comparator: ((a: T, b: T) => boolean) | string = (a, b) => a === b,\n): Array<T> {\n  const result: Array<T> = [];\n\n  // Ensure \\`comparator\\` is a function.\n  const comparatorFunc =\n    typeof comparator === 'function' ? comparator : (a: any, b: any) => a === b;\n\n  array.forEach((item) => {\n    // Check if result array contains the same value when compared with \\`comparator\\`.\n    const isUnique =\n      result.findIndex((resultItem) => comparatorFunc(item, resultItem)) === -1;\n    if (isUnique) {\n      result.push(item);\n    }\n  });\n\n  return result;\n}\n`;function d(r){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",a:\"a\"},r.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"We can use the array function \",(0,t.jsx)(e.code,{children:\"findIndex\"}),\" to iterate through each element in the \",(0,t.jsx)(e.code,{children:\"result\"}),\" array to check if there was the same value when compared by \",(0,t.jsx)(e.code,{children:\"comparator\"}),\".\"]}),`\n`,(0,t.jsx)(h,{languages:{jsx:m,tsx:l}}),`\n`,(0,t.jsx)(e.h2,{children:\"Edge Cases\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"To handle mixed data types, the \",(0,t.jsx)(e.code,{children:\"comparator\"}),\" function must be able to process them by either converting the elements to a common type.\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsxs)(e.a,{href:\"https://lodash.com/docs/4.17.15#uniqWith\",children:[\"Lodash \",(0,t.jsx)(e.code,{children:\"_.uniqWith\"})]})}),`\n`]})]})}function C(r={}){let{wrapper:e}=r.components||{};return e?(0,t.jsx)(e,Object.assign({},r,{children:(0,t.jsx)(d,r)})):d(r)}var F=C;return j(I);})();\n;return Component;",
  "workspace": {
    "main": "/src/uniq-with.ts",
    "run": "/src/uniq-with.run.test.ts",
    "submit": "/src/uniq-with.submit.test.ts"
  }
}