{
  "description": "var Component=(()=>{var d=Object.create;var o=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var y=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),x=(n,e)=>{for(var t in e)o(n,t,{get:e[t],enumerable:!0})},s=(n,e,t,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of m(e))!f.call(n,a)&&a!==t&&o(n,a,{get:()=>e[a],enumerable:!(c=h(e,a))||c.enumerable});return n};var j=(n,e,t)=>(t=n!=null?d(p(n)):{},s(e||!n||!n.__esModule?o(t,\"default\",{value:n,enumerable:!0}):t,n)),_=n=>s(o({},\"__esModule\",{value:!0}),n);var u=y((M,i)=>{i.exports=_jsx_runtime});var v={};x(v,{default:()=>A,frontmatter:()=>g});var r=j(u()),g={title:\"Unique Array\",excerpt:\"Implement a function to remove all duplicate values from an array\"};function l(n){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\"},n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:[\"Implement a function \",(0,r.jsx)(e.code,{children:\"uniqueArray\"}),\" that takes in an array and returns a duplicate-free version of the array where only the first occurrence of each element is kept. The order of result values is determined by the order they occur in the array.\"]}),`\n`,(0,r.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:\"language-js\",children:`uniqueArray([1, 2, 3]); // [1, 2, 3]\nuniqueArray([1, 1, 2]); // [1, 2]\nuniqueArray([2, 1, 2]); // [2, 1]\n`})})]})}function q(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(l,n)})):l(n)}var A=q;return _(v);})();\n;return Component;",
  "format": "javascript",
  "metadata": {
    "author": "yangshun",
    "companies": [],
    "created": 1655164800,
    "difficulty": "easy",
    "duration": 10,
    "excerpt": "Implement a function to remove all duplicate values from an array",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/unique-array",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "premium": true,
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "data-selection"
    ],
    "slug": "unique-array",
    "subtitle": null,
    "title": "Unique Array",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array\n * @return {Array}\n */\nexport default function uniqueArray(array) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function uniqueArray<T extends ReadonlyArray<unknown>>(\n  array: T,\n): Array<T[number]> {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var y=Object.create;var o=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var x=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),b=(r,e)=>{for(var t in e)o(r,t,{get:e[t],enumerable:!0})},s=(r,e,t,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of w(e))!v.call(r,i)&&i!==t&&o(r,i,{get:()=>e[i],enumerable:!(c=f(e,i))||c.enumerable});return r};var q=(r,e,t)=>(t=r!=null?y(g(r)):{},s(e||!r||!r.__esModule?o(t,\"default\",{value:r,enumerable:!0}):t,r)),A=r=>s(o({},\"__esModule\",{value:!0}),r);var l=x((T,h)=>{h.exports=_jsx_runtime});var C={};b(C,{default:()=>_});var n=q(l());var a=MDXCodeBlock;var d=`/**\n * @param {Array} array\n * @return {Array}\n */\nexport default function uniqueArray(array) {\n  return Array.from(new Set(array));\n}\n`;var u=`export default function uniqueArray(array) {\n  const result = [];\n\n  array.forEach((item) => {\n    if (!result.includes(item)) {\n      result.push(item);\n    }\n  });\n\n  return result;\n}\n`;var p=`export default function uniqueArray(array) {\n  const result = [];\n  const seen = new Set();\n\n  array.forEach((item) => {\n    if (!seen.has(item)) {\n      result.push(item);\n      seen.add(item);\n    }\n  });\n\n  return result;\n}\n`;function m(r){let e=Object.assign({p:\"p\",h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\",a:\"a\",h3:\"h3\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"This question is a simple question and is expected to be used as a warm up question in interviews. However, there are some traps in the question which we will go through.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Clarification Questions\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"How do we compare equality for non-primitive values like arrays and objects?\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"For the purpose of this question in an interview setting, we can use \",(0,n.jsx)(e.code,{children:\"===\"}),\" for comparison. Lodash's \",(0,n.jsx)(e.code,{children:\"uniq\"}),\" function uses \",(0,n.jsx)(e.a,{href:\"https://262.ecma-international.org/7.0/#sec-samevaluezero\",children:(0,n.jsx)(e.code,{children:\"SameValueZero\"})}),\" which is much more sophisticated.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Will the array only contain values of the same type?\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"We cannot make that assumption.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Brute force approach\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We can use a new array to store the \",(0,n.jsx)(e.code,{children:\"result\"}),\". By iterating through the input array, we check if the current element is in the \",(0,n.jsx)(e.code,{children:\"result\"}),\" array using \",(0,n.jsx)(e.code,{children:\"Array.prototype.includes()\"}),\" and add it into the \",(0,n.jsx)(e.code,{children:\"results\"}),\" array if it doesn't exist.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"However, this solution is O(n\",(0,n.jsx)(\"sup\",{children:\"2\"}),\") because \",(0,n.jsx)(e.code,{children:\"Array.prototype.includes()\"}),\" is an O(n) operation and we do it once for every element in the input array.\"]}),`\n`,(0,n.jsx)(a,{children:u}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Using \",(0,n.jsx)(e.code,{children:\"Set\"}),\" to track existing elements\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"As seen above, \",(0,n.jsx)(e.code,{children:\"Array.prototype.includes()\"}),\" is not efficient. We can check for existence of an element in O(1) time with the right data structure. \",(0,n.jsx)(e.code,{children:\"Set\"}),\"s are the perfect data structure to achieve this. Instead of using \",(0,n.jsx)(e.code,{children:\"Array.prototype.includes()\"}),\", we can use \",(0,n.jsx)(e.code,{children:\"Set.prototype.has()\"}),\" to query in O(1) time for the existence of an element. The structure is similar to the brute force approach above. The time complexity of this solution is O(n).\"]}),`\n`,(0,n.jsx)(a,{children:p}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Converting to \",(0,n.jsx)(e.code,{children:\"Set\"}),\" then back\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The simplest one-liner answer is to convert the array into a \",(0,n.jsx)(e.code,{children:\"Set\"}),\", then back into an array. If your interviewer does not allow you to do this elegant one-liner, you can use the previous approach. The time complexity of this solution is also O(n).\"]}),`\n`,(0,n.jsx)(a,{children:d}),`\n`,(0,n.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"An \",(0,n.jsx)(e.code,{children:\"Object\"}),\" cannot be used as a replacement for \",(0,n.jsx)(e.code,{children:\"Set\"}),\" for tracking seen values because object keys are strings and the ability to distinguish between types vs their stringified versions will be lost (e.g. \",(0,n.jsx)(e.code,{children:\"2\"}),\" vs \",(0,n.jsx)(e.code,{children:\"'2'\"}),\" and \",(0,n.jsx)(e.code,{children:\"true\"}),\" vs \",(0,n.jsx)(e.code,{children:\"'true'\"}),\"). We have a test to check for this.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://lodash.com/docs/4.17.15#uniq\",children:[\"Lodash \",(0,n.jsx)(e.code,{children:\"_.uniq\"})]})}),`\n`]})]})}function O(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(m,r)})):m(r)}var _=O;return A(C);})();\n;return Component;",
  "tests": "import uniqueArray from './unique-array';\n\ndescribe('uniqueArray', () => {\n  test('empty array', () => {\n    expect(uniqueArray([])).toEqual([]);\n  });\n\n  test('one value', () => {\n    expect(uniqueArray([0])).toEqual([0]);\n  });\n\n  test('different values', () => {\n    expect(uniqueArray([2, 3])).toEqual([2, 3]);\n    expect(uniqueArray([0, 1, 2, 3])).toEqual([0, 1, 2, 3]);\n  });\n\n  test('duplicate values', () => {\n    expect(uniqueArray([2, 1, 2])).toEqual([2, 1]);\n    expect(uniqueArray([2, 2, 1])).toEqual([2, 1]);\n    expect(uniqueArray([2, 1, 2, 3])).toEqual([2, 1, 3]);\n  });\n\n  test('string values', () => {\n    expect(uniqueArray(['foo', 'bar', 'foo'])).toEqual(['foo', 'bar']);\n    expect(uniqueArray(['foo', 'bar', 'bar', 'foo'])).toEqual(['foo', 'bar']);\n    expect(uniqueArray(['1', '2', '2', '3'])).toEqual(['1', '2', '3']);\n  });\n\n  test('boolean values', () => {\n    expect(uniqueArray([false])).toEqual([false]);\n    expect(uniqueArray([false, true])).toEqual([false, true]);\n    expect(uniqueArray([true, false, true])).toEqual([true, false]);\n    expect(uniqueArray([true, true, false])).toEqual([true, false]);\n  });\n\n  test('null-ish values', () => {\n    expect(uniqueArray([null])).toEqual([null]);\n    expect(uniqueArray([null, null])).toEqual([null]);\n    expect(uniqueArray([null, undefined])).toEqual([null, undefined]);\n    expect(uniqueArray([null, undefined, null])).toEqual([null, undefined]);\n    expect(uniqueArray([null, null, undefined])).toEqual([null, undefined]);\n  });\n\n  test('mixed values', () => {\n    expect(uniqueArray([2, 1, '2', '1'])).toEqual([2, 1, '2', '1']);\n    expect(uniqueArray(['2', 2, 2, 1, 1, '2', '1'])).toEqual(['2', 2, 1, '1']);\n    expect(uniqueArray([true, 'true', true])).toEqual([true, 'true']);\n  });\n});"
}