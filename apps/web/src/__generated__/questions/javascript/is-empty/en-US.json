{
  "description": "var Component=(()=>{var h=Object.create;var s=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),j=(t,e)=>{for(var c in e)s(t,c,{get:e[c],enumerable:!0})},l=(t,e,c,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!f.call(t,r)&&r!==c&&s(t,r,{get:()=>e[r],enumerable:!(i=m(e,r))||i.enumerable});return t};var _=(t,e,c)=>(c=t!=null?h(p(t)):{},l(e||!t||!t.__esModule?s(c,\"default\",{value:t,enumerable:!0}):c,t)),g=t=>l(s({},\"__esModule\",{value:!0}),t);var a=y((w,o)=>{o.exports=_jsx_runtime});var b={};j(b,{default:()=>E,frontmatter:()=>x});var n=_(a()),x={title:\"Is Empty\",excerpt:\"Implement a function to check if a value is an empty object, collection, map, or set\"};function d(t){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",ol:\"ol\",li:\"li\",em:\"em\",pre:\"pre\",ul:\"ul\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a function \",(0,n.jsx)(e.code,{children:\"isEmpty(value)\"}),\" to check if a value is an empty object, collection, map, or set.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Array-like values such as \",(0,n.jsx)(e.code,{children:\"arguments\"}),\" objects, arrays, buffers, strings, or jQuery-like collections are considered empty if they have a \",(0,n.jsx)(e.code,{children:\"length\"}),\" of \",(0,n.jsx)(e.code,{children:\"0\"}),\". Similarly, maps and sets are considered empty if they have a \",(0,n.jsx)(e.code,{children:\"size\"}),\" of \",(0,n.jsx)(e.code,{children:\"0\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"However for this question, we only need to consider arrays, buffers, strings, objects, maps and sets.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"value\"}),\" \",(0,n.jsx)(e.em,{children:\"(*)\"}),\": The value to check.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:\"(boolean)\"}),\": Returns \",(0,n.jsx)(e.code,{children:\"true\"}),\" if \",(0,n.jsx)(e.code,{children:\"value\"}),\" is empty, else \",(0,n.jsx)(e.code,{children:\"false\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Example\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`_.isEmpty(null); // => true\n_.isEmpty(true); // => true\n_.isEmpty(1); // => true\n_.isEmpty([1, 2, 3]); // => false\n_.isEmpty({ a: 1 }); // => false\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://lodash.com/docs/#isEmpty\",children:[\"Lodash \",(0,n.jsx)(e.code,{children:\"_.isEmpty\"})]})}),`\n`]})]})}function v(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var E=v;return g(b);})();\n;return Component;",
  "format": "javascript",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1683331200,
    "difficulty": "medium",
    "duration": 15,
    "excerpt": "Implement a function to check if a value is an empty object, collection, map, or set",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/is-empty",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "premium": true,
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "is-empty",
    "subtitle": null,
    "title": "Is Empty",
    "topics": []
  },
  "skeleton": {
    "js": "// Refer to https://github.com/lodash/lodash/blob/4.17.15-es/TODO_REPLACE_ME.js\n\n/**\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n */\nexport default function isEmpty(value) {\n  throw 'Not implemented';\n}",
    "ts": "export default function isEmpty(value: unknown): boolean {\n  throw 'Not implemented';\n}"
  },
  "solution": "var Component=(()=>{var p=Object.create;var s=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var j=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var n in e)s(t,n,{get:e[n],enumerable:!0})},l=(t,e,n,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!v.call(t,r)&&r!==n&&s(t,r,{get:()=>e[r],enumerable:!(a=f(e,r))||a.enumerable});return t};var g=(t,e,n)=>(n=t!=null?p(y(t)):{},l(e||!t||!t.__esModule?s(n,\"default\",{value:t,enumerable:!0}):n,t)),x=t=>l(s({},\"__esModule\",{value:!0}),t);var i=j((w,c)=>{c.exports=_jsx_runtime});var E={};b(E,{default:()=>O});var o=g(i());var u=MDXCodeBlock;var h=`// Refer to https://github.com/lodash/lodash/blob/4.17.15-es/TODO_REPLACE_ME.js\n\nexport default function isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n\n  const valueType = typeof value;\n\n  // Arrays/Strings/Buffers.\n  if (\n    Array.isArray(value) ||\n    valueType === 'string' ||\n    Buffer.isBuffer(value)\n  ) {\n    return value.length === 0;\n  }\n\n  // Map/Set.\n  if (value instanceof Map || value instanceof Set) {\n    return value.size === 0;\n  }\n\n  // Plain object.\n  const prototype = Object.getPrototypeOf(value);\n  if (prototype === null || prototype === Object.prototype) {\n    return Object.keys(value).length === 0;\n  }\n\n  return true;\n}\n`;function d(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",a:\"a\"},t.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,o.jsx)(e.p,{children:\"The important part of this question is to be aware of how to check for each type of data and how to determine whether it's empty.\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"Note Lodash's \",(0,o.jsx)(e.code,{children:\"isEmpty\"}),\" also checks for less common data types like \",(0,o.jsx)(e.code,{children:\"arguments\"}),\" objects and DOM collections but we've excluded that from the solution.\"]}),`\n`,(0,o.jsx)(u,{children:h}),`\n`,(0,o.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsx)(e.li,{children:(0,o.jsxs)(e.a,{href:\"https://lodash.com/docs/#isEmpty\",children:[\"Lodash \",(0,o.jsx)(e.code,{children:\"_.isEmpty\"})]})}),`\n`]})]})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(d,t)})):d(t)}var O=M;return x(E);})();\n;return Component;",
  "tests": "import isEmpty from './is-empty';\n\ndescribe('isEmpty', () => {\n  test('empty values', () => {\n    expect(isEmpty(true)).toBe(true);\n    expect(isEmpty(1)).toBe(true);\n    expect(isEmpty(NaN)).toBe(true);\n    expect(isEmpty(/x/)).toBe(true);\n    expect(isEmpty(Symbol('x'))).toBe(true);\n    expect(isEmpty()).toBe(true);\n  });\n\n  describe('strings', () => {\n    test('empty string', () => {\n      expect(isEmpty('')).toBe(true);\n    });\n\n    test('non-empty string', () => {\n      expect(isEmpty('a')).toBe(false);\n    });\n  });\n\n  describe('objects', () => {\n    test('empty object', () => {\n      expect(isEmpty({})).toBe(true);\n    });\n\n    test('non-empty object', () => {\n      expect(isEmpty({ a: 0 })).toBe(false);\n    });\n\n    test('object that has a `length` property', () => {\n      expect(isEmpty({ length: 0 })).toBe(false);\n    });\n\n    test('objects with negative lengths', function () {\n      function Foo() {}\n      Foo.prototype.length = -1;\n\n      expect(isEmpty(new Foo())).toBe(true);\n    });\n\n    test('non-number lengths', function () {\n      expect(isEmpty({ length: '0' })).toBe(false);\n    });\n  });\n\n  describe('maps', function () {\n    test('empty map', () => {\n      const map = new Map();\n      expect(isEmpty(map)).toBe(true);\n    });\n\n    test('non-empty map', () => {\n      const map = new Map([['a', 1]]);\n      expect(isEmpty(map)).toBe(false);\n    });\n  });\n\n  describe('sets', function () {\n    test('empty set', () => {\n      const set = new Set();\n      expect(isEmpty(set)).toBe(true);\n    });\n\n    test('non-empty set', () => {\n      const set = new Set([1]);\n      expect(isEmpty(set)).toBe(false);\n    });\n  });\n\n  describe('buffers', () => {\n    test('empty buffer', () => {\n      expect(isEmpty(Buffer.alloc(0))).toBe(true);\n    });\n\n    test('non-empty buffer', () => {\n      expect(isEmpty(Buffer.alloc(1))).toBe(false);\n    });\n  });\n\n  describe('arrays', () => {\n    test('empty array', () => {\n      expect(isEmpty([])).toBe(true);\n    });\n\n    test('non-empty array', () => {\n      expect(isEmpty([1])).toBe(false);\n    });\n  });\n});"
}