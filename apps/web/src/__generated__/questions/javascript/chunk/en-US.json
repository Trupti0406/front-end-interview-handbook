{
  "description": "var Component=(()=>{var d=Object.create;var c=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var r in e)c(t,r,{get:e[r],enumerable:!0})},h=(t,e,r,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of m(e))!f.call(t,i)&&i!==r&&c(t,i,{get:()=>e[i],enumerable:!(a=u(e,i))||a.enumerable});return t};var x=(t,e,r)=>(r=t!=null?d(p(t)):{},h(e||!t||!t.__esModule?c(r,\"default\",{value:t,enumerable:!0}):r,t)),j=t=>h(c({},\"__esModule\",{value:!0}),t);var s=g((w,l)=>{l.exports=_jsx_runtime});var z={};y(z,{default:()=>_,frontmatter:()=>k});var n=x(s()),k={title:\"Chunk\",excerpt:\"Implement a function that creates an array of elements split into smaller groups of a specified size.\"};function o(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",strong:\"strong\",pre:\"pre\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Lodash's Chunk method\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Implement a function \",(0,n.jsx)(e.code,{children:\"chunk\"}),\" that emulates the functionality of the Lodash utility function \",(0,n.jsx)(e.code,{children:\"_.chunk(array, [size=1])\"}),\". The function splits the input array into smaller arrays of length \",(0,n.jsx)(e.code,{children:\"size\"}),\" and returns them within a \",(0,n.jsx)(e.strong,{children:\"new\"}),\" array. The function should not modify the original input array.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`chunk(array, [(size = 1)]);\n`})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"array\"}),\": The array to split.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"size\"}),\": The chunk size. A positive integer.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`chunk(['a', 'b', 'c', 'd']); // => [['a'], ['b'], ['c'], ['d']]\nchunk([1, 2, 3, 4], 2); // => [[1, 2], [3, 4]]\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"If the length is not divisible by the \",(0,n.jsx)(e.code,{children:\"size\"}),\", the final chunk will contain the remaining elements.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`chunk(['a', 'b', 'c', 'd'], 3); // => [['a', 'b', 'c'], ['d']]\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The function should return an empty array if the \",(0,n.jsx)(e.code,{children:\"array\"}),\" argument is empty.\"]})]})}function b(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(o,t)})):o(t)}var _=b;return j(z);})();\n;return Component;",
  "format": "javascript",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1682553600,
    "difficulty": "easy",
    "duration": 10,
    "excerpt": "Implement a function that creates an array of elements split into smaller groups of a specified size.",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/chunk",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "premium": true,
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "get"
    ],
    "slug": "chunk",
    "title": "Chunk"
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array - The array to process.\n * @param {number} [size=1] - The length of each chunk.\n * @returns {Array} - Returns the new array of chunks.\n */\nexport default function chunk(array, size = 1) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function chunk<T>(array: Array<T>, size = 1): Array<Array<T>> {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var y=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var k=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),x=(r,e)=>{for(var t in e)i(r,t,{get:e[t],enumerable:!0})},h=(r,e,t,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of f(e))!m.call(r,a)&&a!==t&&i(r,a,{get:()=>e[a],enumerable:!(o=p(e,a))||o.enumerable});return r};var w=(r,e,t)=>(t=r!=null?y(g(r)):{},h(e||!r||!r.__esModule?i(t,\"default\",{value:r,enumerable:!0}):t,r)),j=r=>h(i({},\"__esModule\",{value:!0}),r);var l=k((X,c)=>{c.exports=_jsx_runtime});var C={};x(C,{default:()=>M});var n=w(l());var s=MDXCodeBlock;var u=`/**\n * @param {Array} array - The array to process.\n * @param {number} [size=1] - The length of each chunk.\n * @returns {Array} - Returns the new array of chunks.\n */\nexport default function chunk(array, size = 1) {\n  const length = array == null ? 0 : array.length;\n  if (!length || size < 1) {\n    return [];\n  }\n\n  const result = [];\n\n  for (let i = 0; i < array.length; i += size) {\n    const chunk = array.slice(i, i + size);\n    result.push(chunk);\n  }\n\n  return result;\n}\n`;function d(r){let e=Object.assign({h2:\"h2\",p:\"p\",pre:\"pre\",code:\"code\",ul:\"ul\",li:\"li\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(s,{children:u}),`\n`,(0,n.jsx)(e.h2,{children:\"Note\"}),`\n`,(0,n.jsx)(e.p,{children:\"Regarding the edge case of modifying the array while iterating over it, Lodash will operate on a shallow copy of the array to avoid modifying the original array while iterating over it.\"}),`\n`,(0,n.jsx)(e.p,{children:\"If you would like to modify the array while iterating through it:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`for (let i = 0; i < array.length; i += size) {\n  const chunk = array.slice(i, i + size);\n  result.push(chunk);\n\n  // Make a shallow copy of the current chunk and use it as the next starting point\n  // for the next iteration of the loop.\n  array = array.slice();\n  array.splice(i, size, ...chunk);\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://lodash.com/docs/#chunk\",children:[\"Lodash \",(0,n.jsx)(e.code,{children:\"_.chunk\"})]})}),`\n`]})]})}function _(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(d,r)})):d(r)}var M=_;return j(C);})();\n;return Component;",
  "tests": "import chunk from './chunk';\n\ndescribe('chunk', () => {\n  test('splits an array into chunks of the given size', () => {\n    const input = [1, 2, 3, 4, 5, 6, 7, 'A', 'B', 'C'];\n    const size = 3;\n    const expectedOutput = [[1, 2, 3], [4, 5, 6], [7, 'A', 'B'], ['C']];\n    const output = chunk(input, size);\n    expect(output).toEqual(expectedOutput);\n  });\n\n  test('handles an empty array', () => {\n    const input = [];\n    const size = 3;\n    const expectedOutput = [];\n    const output = chunk(input, size);\n    expect(output).toEqual(expectedOutput);\n  });\n\n  test('handles default size', () => {\n    const input = ['A', 'B', 'C'];\n    const expectedOutput = [['A'], ['B'], ['C']];\n    const output = chunk(input);\n    expect(output).toEqual(expectedOutput);\n  });\n\n  test('handles a size larger than the array length', () => {\n    const input = [1, 2, 3];\n    const size = 5;\n    const expectedOutput = [[1, 2, 3]];\n    const output = chunk(input, size);\n    expect(output).toEqual(expectedOutput);\n  });\n\n  test('returns a shallow copy of the input array', () => {\n    const input = [1, 2, 3, 4, 5, 6, 7];\n    const size = 3;\n    const output = chunk(input, size);\n    output[0][0] = 100;\n    expect(input[0]).toEqual(1);\n  });\n});"
}