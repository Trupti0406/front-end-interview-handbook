{
  "description": "var Component=(()=>{var l=Object.create;var i=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),p=(t,e)=>{for(var r in e)i(t,r,{get:e[r],enumerable:!0})},c=(t,e,r,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of u(e))!x.call(t,a)&&a!==r&&i(t,a,{get:()=>e[a],enumerable:!(d=f(e,a))||d.enumerable});return t};var I=(t,e,r)=>(r=t!=null?l(m(t)):{},c(e||!t||!t.__esModule?i(r,\"default\",{value:t,enumerable:!0}):r,t)),y=t=>c(i({},\"__esModule\",{value:!0}),t);var h=g((S,s)=>{s.exports=_jsx_runtime});var _={};p(_,{default:()=>L,frontmatter:()=>v});var n=I(h()),v={title:\"Find Last Index\",excerpt:\"Implement a function that returns the index of the last element in the array that satisfies the provided testing function.\"};function o(t){let e=Object.assign({p:\"p\",code:\"code\",strong:\"strong\",pre:\"pre\",h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a function \",(0,n.jsx)(e.code,{children:\"findLastIndex\"}),\" that takes an array of values, a function predicate, and an optional \",(0,n.jsx)(e.code,{children:\"fromIndex\"}),\" number argument, and returns the index of the last element in the array that satisfies the provided testing function predicate. It iterates over elements of the \",(0,n.jsx)(e.code,{children:\"array\"}),\" from \",(0,n.jsx)(e.strong,{children:\"right to left\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`findLastIndex(array, predicate, [(fromIndex = array.length - 1)]);\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"array\"}),\": The array to iterate over.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"predicate\"}),\": The function invoked per iteration. It is called with three arguments: \",(0,n.jsx)(e.code,{children:\"(value, index, array)\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"fromIndex\"}),\": The index after which the searching starts. If \",(0,n.jsx)(e.code,{children:\"fromIndex\"}),\" is not given then by default value is \",(0,n.jsx)(e.code,{children:\"array.length - 1\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Returns the index of the found element. If no element satisfies the predicate function, return \",(0,n.jsx)(e.code,{children:\"-1\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note:\"}),\" Your function should handle negative indices. If the index is out of range, start searching from the closest index that is within the range.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const arr = [5, 4, 3, 2, 1];\n\n// Search for the last number in the array that is greater than 3\nfindLastIndex(arr, (num) => num > 3); // => 1\n\n// Start searching from index 3 (inclusive)\nfindLastIndex(arr, (num) => num > 1, 3); // => 3\n\n// Start searching from index 3 (inclusive)\nfindLastIndex(arr, (num) => num < 1, 3); // => -1\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Edge cases\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Your function needs to handle negative \",(0,n.jsx)(e.code,{children:\"fromIndex\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"If \",(0,n.jsx)(e.code,{children:\"index > array.length\"}),\", start from the last index. Also, if \",(0,n.jsx)(e.code,{children:\"index < - array.length\"}),\", start searching from index 0.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const arr = [5, 4, 3, 2, 1];\nfindLastIndex(arr, (num) => num > 2, -3); // => 2\n\n// Start from the last index\nfindLastIndex(arr, (num) => num > 0, 10); // => 4\n\n// Start from 0 if fromIndex < -(array.length)\nfindLastIndex(arr, (num) => num > 2, -10); // => -1\n`})})]})}function j(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(o,t)})):o(t)}var L=j;return y(_);})();\n;return Component;",
  "format": "javascript",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1682726400,
    "difficulty": "easy",
    "duration": 10,
    "excerpt": "Implement a function that returns the index of the last element in the array that satisfies the provided testing function.",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/find-last-index",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "premium": true,
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "find-index"
    ],
    "slug": "find-last-index",
    "title": "Find Last Index"
  },
  "skeleton": {
    "js": "/**\n * This function returns the index of the last element in the array that satisfies the provided testing function.\n * Otherwise, it returns -1.\n *\n * @param {Array} array - The array to search.\n * @param {Function} predicate - The function invoked per iteration.\n * @param {number} [fromIndex=array.length-1] - The index to start searching from.\n * @returns The index of the found element, else -1.\n */\nexport default function findLastIndex(\n  array,\n  predicate,\n  fromIndex = array.length - 1,\n) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function findLastIndex<T>(\n  array: Array<T>,\n  predicate: (value: T, index: number, array: Array<T>) => boolean,\n  fromIndex = array.length - 1,\n): number {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var f=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var l=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var g=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),I=(e,t)=>{for(var r in t)i(e,r,{get:t[r],enumerable:!0})},d=(e,t,r,o)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let a of l(t))!y.call(e,a)&&a!==r&&i(e,a,{get:()=>t[a],enumerable:!(o=u(t,a))||o.enumerable});return e};var j=(e,t,r)=>(r=e!=null?f(p(e)):{},d(t||!e||!e.__esModule?i(r,\"default\",{value:e,enumerable:!0}):r,e)),M=e=>d(i({},\"__esModule\",{value:!0}),e);var h=g((b,s)=>{s.exports=_jsx_runtime});var D={};I(D,{default:()=>C});var n=j(h());var x=MDXCodeBlock;var m=`/**\n * This function returns the index of the last element in the array that satisfies the provided testing function.\n * Otherwise, it returns -1.\n *\n * @param {Array} array - The array to search.\n * @param {Function} predicate - The function invoked per iteration.\n * @param {number} [fromIndex=array.length-1] - The index to start searching from.\n * @returns The index of the found element, else -1.\n */\nexport default function findLastIndex(\n  array,\n  predicate,\n  fromIndex = array.length - 1,\n) {\n  let startIndex =\n    fromIndex < 0\n      ? Math.max(array.length + fromIndex, 0)\n      : Math.min(fromIndex, array.length - 1);\n\n  let index = startIndex;\n  // Iterate from the right.\n  while (index >= 0) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n    index--;\n  }\n\n  return -1;\n}\n`;function c(e){let t=Object.assign({h2:\"h2\"},e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(x,{children:m})]})}function T(e={}){let{wrapper:t}=e.components||{};return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(c,e)})):c(e)}var C=T;return M(D);})();\n;return Component;",
  "tests": "import findLastIndex from './find-last-index';\n\ndescribe('findLastIndex', () => {\n  const array = [1, 2, 3, 4, 5];\n\n  test('returns the index of the last element that satisfies the predicate', () => {\n    const predicate = (value) => value > 2;\n    expect(findLastIndex(array, predicate)).toEqual(4);\n  });\n\n  test('returns -1 if no element satisfies the predicate', () => {\n    const predicate = (value) => value > 5;\n    expect(findLastIndex(array, predicate)).toEqual(-1);\n  });\n\n  test('returns -1 if the array is empty', () => {\n    const predicate = (value) => value > 5;\n    expect(findLastIndex([], predicate)).toEqual(-1);\n  });\n\n  test('starts the search from the given index', () => {\n    const predicate = (value) => value < 4;\n    expect(findLastIndex(array, predicate, 3)).toEqual(2);\n  });\n\n  test('handles negative fromIndex', () => {\n    const predicate = (value) => value > 3;\n    expect(findLastIndex(array, predicate, -2)).toEqual(3);\n  });\n\n  test('handles out of range index', () => {\n    expect(findLastIndex(array, (value) => value > 3, 10)).toEqual(4);\n    expect(findLastIndex(array, (value) => value % 2 === 0, -10)).toEqual(-1);\n  });\n});"
}