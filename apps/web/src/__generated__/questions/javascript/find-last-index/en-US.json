{
  "description": "var Component=(()=>{var l=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),p=(r,e)=>{for(var t in e)a(r,t,{get:e[t],enumerable:!0})},c=(r,e,t,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of f(e))!x.call(r,i)&&i!==t&&a(r,i,{get:()=>e[i],enumerable:!(d=m(e,i))||d.enumerable});return r};var I=(r,e,t)=>(t=r!=null?l(u(r)):{},c(e||!r||!r.__esModule?a(t,\"default\",{value:r,enumerable:!0}):t,r)),y=r=>c(a({},\"__esModule\",{value:!0}),r);var o=g((S,h)=>{h.exports=_jsx_runtime});var _={};p(_,{default:()=>v,frontmatter:()=>L});var n=I(o()),L={title:\"Find Last Index\",excerpt:\"Implement a function that returns the index of the last element in the array that satisfies the provided testing function\"};function s(r){let e=Object.assign({p:\"p\",code:\"code\",strong:\"strong\",h2:\"h2\",ol:\"ol\",li:\"li\",em:\"em\",pre:\"pre\",ul:\"ul\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a function \",(0,n.jsx)(e.code,{children:\"findIndex(array, predicate, [fromIndex=array.length-1])\"}),\" that takes an array of values, a function \",(0,n.jsx)(e.code,{children:\"predicate\"}),\", and an optional \",(0,n.jsx)(e.code,{children:\"fromIndex\"}),\" number argument, and returns the index of the last element in the array that satisfies the provided testing function \",(0,n.jsx)(e.code,{children:\"predicate\"}),\". It iterates over elements of the \",(0,n.jsx)(e.code,{children:\"array\"}),\" from \",(0,n.jsx)(e.strong,{children:\"right to left\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"array\"}),\" \",(0,n.jsx)(e.em,{children:\"(Array)\"}),\": The array to inspect.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"predicate\"}),\" \",(0,n.jsx)(e.em,{children:\"(Function)\"}),\": The function invoked per iteration.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"[fromIndex=array.length-1]\"}),\" \",(0,n.jsx)(e.em,{children:\"(number)\"}),\": The index to search from.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:\"(number)\"}),\": Returns the index of the found element, else \",(0,n.jsx)(e.code,{children:\"-1\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note:\"}),\" Your function should handle negative indices. If the index is out of range, start searching from the closest index that is within the range.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const arr = [5, 4, 3, 2, 1];\n\n// Search for the last number in the array that is greater than 3\nfindLastIndex(arr, (num) => num > 3); // => 1\n\n// Start searching from index 3 (inclusive)\nfindLastIndex(arr, (num) => num > 1, 3); // => 3\n\n// Start searching from index 3 (inclusive)\nfindLastIndex(arr, (num) => num < 1, 3); // => -1\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Edge cases\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Your function needs to handle negative \",(0,n.jsx)(e.code,{children:\"fromIndex\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"If \",(0,n.jsx)(e.code,{children:\"index > array.length\"}),\", start from the last index. Also, if \",(0,n.jsx)(e.code,{children:\"index < - array.length\"}),\", start searching from index 0.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const arr = [5, 4, 3, 2, 1];\nfindLastIndex(arr, (num) => num > 2, -3); // => 2\n\n// Start from the last index\nfindLastIndex(arr, (num) => num > 0, 10); // => 4\n\n// Start from 0 if fromIndex < -(array.length)\nfindLastIndex(arr, (num) => num > 2, -10); // => -1\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://lodash.com/docs/#findLastIndex\",children:[\"Lodash \",(0,n.jsx)(e.code,{children:\"_.findLastIndex\"})]})}),`\n`]})]})}function j(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(s,r)})):s(r)}var v=j;return y(_);})();\n;return Component;",
  "format": "javascript",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1682726400,
    "difficulty": "easy",
    "duration": 10,
    "excerpt": "Implement a function that returns the index of the last element in the array that satisfies the provided testing function",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/find-last-index",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "premium": true,
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "find-index"
    ],
    "slug": "find-last-index",
    "title": "Find Last Index"
  },
  "skeleton": {
    "js": "/**\n * This function returns the index of the last element in the array that satisfies the provided testing function.\n * Otherwise, it returns -1.\n *\n * @param {Array} array - The array to search.\n * @param {Function} predicate - The function invoked per iteration.\n * @param {number} [fromIndex=array.length-1] - The index to start searching from.\n * @returns The index of the found element, else -1.\n */\nexport default function findLastIndex(\n  array,\n  predicate,\n  fromIndex = array.length - 1,\n) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function findLastIndex<T>(\n  array: Array<T>,\n  predicate: (value: T, index: number, array: Array<T>) => boolean,\n  fromIndex = array.length - 1,\n): number {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var f=Object.create;var i=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var I=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),g=(n,e)=>{for(var r in e)i(n,r,{get:e[r],enumerable:!0})},d=(n,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of u(e))!y.call(n,a)&&a!==r&&i(n,a,{get:()=>e[a],enumerable:!(o=m(e,a))||o.enumerable});return n};var _=(n,e,r)=>(r=n!=null?f(p(n)):{},d(e||!n||!n.__esModule?i(r,\"default\",{value:n,enumerable:!0}):r,n)),j=n=>d(i({},\"__esModule\",{value:!0}),n);var h=I((X,s)=>{s.exports=_jsx_runtime});var C={};g(C,{default:()=>T});var t=_(h());var c=MDXCodeBlock;var l=`/**\n * This function returns the index of the last element in the array that satisfies the provided testing function.\n * Otherwise, it returns -1.\n *\n * @param {Array} array - The array to search.\n * @param {Function} predicate - The function invoked per iteration.\n * @param {number} [fromIndex=array.length-1] - The index to start searching from.\n * @returns The index of the found element, else -1.\n */\nexport default function findLastIndex(\n  array,\n  predicate,\n  fromIndex = array.length - 1,\n) {\n  let startIndex =\n    fromIndex < 0\n      ? Math.max(array.length + fromIndex, 0)\n      : Math.min(fromIndex, array.length - 1);\n\n  let index = startIndex;\n  // Iterate from the right.\n  while (index >= 0) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n    index--;\n  }\n\n  return -1;\n}\n`;function x(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",a:\"a\",code:\"code\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(c,{children:l}),`\n`,(0,t.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsxs)(e.a,{href:\"https://lodash.com/docs/#findLastIndex\",children:[\"Lodash \",(0,t.jsx)(e.code,{children:\"_.findLastIndex\"})]})}),`\n`]})]})}function L(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(x,n)})):x(n)}var T=L;return j(C);})();\n;return Component;",
  "tests": "import findLastIndex from './find-last-index';\n\ndescribe('findLastIndex', () => {\n  test('empty array', () => {\n    expect(findLastIndex([], (value) => value > 5)).toEqual(-1);\n  });\n\n  test('returns the index of the last element that satisfies the predicate', () => {\n    expect(findLastIndex([1, 2, 3, 4, 5], (value) => value > 2)).toEqual(4);\n  });\n\n  test('no element satisfies the predicate', () => {\n    expect(findLastIndex([1, 2, 3, 4, 5], (value) => value > 5)).toEqual(-1);\n  });\n\n  test('starts the search from the given index', () => {\n    expect(findLastIndex([1, 2, 3, 4, 5], (value) => value < 4, 3)).toEqual(2);\n  });\n\n  test('handles negative fromIndex', () => {\n    expect(findLastIndex([1, 2, 3, 4, 5], (value) => value > 3, -2)).toEqual(3);\n  });\n\n  test('handles out of range indeices', () => {\n    expect(findLastIndex([1, 2, 3, 4, 5], (value) => value > 3, 10)).toEqual(4);\n    expect(\n      findLastIndex([1, 2, 3, 4, 5], (value) => value % 2 === 0, -10),\n    ).toEqual(-1);\n  });\n});"
}