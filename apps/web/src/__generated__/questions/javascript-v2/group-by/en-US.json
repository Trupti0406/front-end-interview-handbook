{
  "description": "var Component=(()=>{var d=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var y=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),f=(r,e)=>{for(var t in e)a(r,t,{get:e[t],enumerable:!0})},c=(r,e,t,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of p(e))!m.call(r,o)&&o!==t&&a(r,o,{get:()=>e[o],enumerable:!(i=u(e,o))||i.enumerable});return r};var b=(r,e,t)=>(t=r!=null?d(g(r)):{},c(e||!r||!r.__esModule?a(t,\"default\",{value:r,enumerable:!0}):t,r)),j=r=>c(a({},\"__esModule\",{value:!0}),r);var h=y((k,s)=>{s.exports=_jsx_runtime});var _={};f(_,{default:()=>B,frontmatter:()=>v});var n=b(h()),v={title:\"Group By\",excerpt:\"Implement a function that groups values in an array based on a function or property name\"};function l(r){let e=Object.assign({p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",em:\"em\",pre:\"pre\",h2:\"h2\",ol:\"ol\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a function \",(0,n.jsx)(e.code,{children:\"groupBy(array, iteratee)\"}),\" that takes a array and an \",(0,n.jsx)(e.code,{children:\"iteratee\"}),\" function or a property name string, and groups the values in the array based on the \",(0,n.jsx)(e.code,{children:\"iteratee\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"iteratee\"}),\"s can either be:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Functions: \",(0,n.jsx)(e.code,{children:\"iteratee\"}),\" functions is invoked with one argument: \",(0,n.jsx)(e.em,{children:\"(value)\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Strings: The property of an object. E.g. \",(0,n.jsx)(e.code,{children:\"'length'\"}),\" can be used to return the number of elements of arrays.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`groupBy(array, iteratee);\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"array\"}),\" \",(0,n.jsx)(e.em,{children:\"(Array)\"}),\": The array to iterate over.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"iteratee\"}),\" \",(0,n.jsx)(e.em,{children:\"(Function)\"}),\": The iteratee to transform elements. The function is invoked with one argument: (value).\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:\"(Object)\"}),\": Returns the composed aggregate object.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`groupBy([6.1, 4.2, 6.3], Math.floor);\n// => { '4': [4.2], '6': [6.1, 6.3] }\n\n// Group by string length\ngroupBy(['one', 'two', 'three'], 'length');\n// => { '3': ['one', 'two'], '5': ['three'] }\n\nconst users = [\n  { user: 'barney', age: 36 },\n  { user: 'fred', age: 40 },\n];\n\n// Group by a property of the objects\ngroupBy(users, 'age');\n// => { '36': [{'user': 'barney', 'age': 36}], '40': [{'user': 'fred', 'age': 40}] }\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,n.jsx)(e.p,{children:\"In JavaScript, numbers might be converted to floating point numbers. You might want to make sure that keys are converted to strings before using them. This ensures they are not accidentally converted to floating point representations.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://lodash.com/docs/#groupBy\",children:[\"Lodash \",(0,n.jsx)(e.code,{children:\"_.groupBy\"})]})}),`\n`]})]})}function x(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(l,r)})):l(r)}var B=x;return j(_);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/group-by\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/group-by.js\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n",
    "/src/group-by.js": "/**\n * @param {Array} array The array to iterate over.\n * @param {Function|string} iteratee The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n */\nexport default function groupBy(array, iteratee) {\n  const result = {};\n  const iterateeFunc =\n    typeof iteratee === 'function' ? iteratee : (value) => value[iteratee];\n\n  for (const element of array) {\n    const key = iterateeFunc(element);\n    if (!Object.prototype.hasOwnProperty.call(result, key)) {\n      result[key] = [];\n    }\n\n    result[key].push(element);\n  }\n\n  return result;\n}\n",
    "/src/group-by.run.test.ts": "import groupBy from './group-by';\n\ndescribe('groupBy', () => {\n  test('empty array', () => {\n    expect(groupBy([], 'length')).toEqual({});\n  });\n\n  describe('function iteratees', () => {\n    test('single-element arrays', () => {\n      expect(groupBy([6.1], Math.floor)).toEqual({ 6: [6.1] });\n    });\n\n    test('two-element arrays', () => {\n      expect(groupBy([6.1, 4.2], Math.floor)).toEqual({ 4: [4.2], 6: [6.1] });\n    });\n\n    test('multiple element arrays', () => {\n      expect(groupBy([6.1, 4.2, 6.3], Math.floor)).toEqual({\n        4: [4.2],\n        6: [6.1, 6.3],\n      });\n    });\n\n    test('keys that are also properties', () => {\n      expect(groupBy(['one', 'two', 'three'], () => 'length')).toEqual({\n        length: ['one', 'two', 'three'],\n      });\n    });\n  });\n\n  describe('property iteratees', () => {\n    test('single-element arrays', () => {\n      expect(groupBy(['one'], 'length')).toEqual({ 3: ['one'] });\n    });\n\n    test('two-element arrays', () => {\n      expect(groupBy(['one', 'two'], 'length')).toEqual({ 3: ['one', 'two'] });\n    });\n\n    test('multiple element arrays', () => {\n      expect(groupBy(['one', 'two', 'three'], 'length')).toEqual({\n        3: ['one', 'two'],\n        5: ['three'],\n      });\n    });\n\n    test('groups elements of array of objects by a property', () => {\n      const users = [\n        { user: 'barney', age: 36 },\n        { user: 'fred', age: 40 },\n        { user: 'pebbles', age: 1 },\n      ];\n\n      expect(groupBy(users, 'age')).toEqual({\n        36: [{ user: 'barney', age: 36 }],\n        40: [{ user: 'fred', age: 40 }],\n        1: [{ user: 'pebbles', age: 1 }],\n      });\n    });\n  });\n\n  test('does not mutate the original array', () => {\n    const arr = ['one', 'two', 'three'];\n    const copy = arr.slice();\n    groupBy(arr, 'length');\n    expect(arr).toEqual(copy);\n  });\n});\n",
    "/src/group-by.submit.test.ts": "import groupBy from './group-by';\n\ndescribe('groupBy', () => {\n  test('empty array', () => {\n    expect(groupBy([], 'length')).toEqual({});\n  });\n\n  describe('function iteratees', () => {\n    test('single-element arrays', () => {\n      expect(groupBy([6.1], Math.floor)).toEqual({ 6: [6.1] });\n    });\n\n    test('two-element arrays', () => {\n      expect(groupBy([6.1, 4.2], Math.floor)).toEqual({ 4: [4.2], 6: [6.1] });\n    });\n\n    test('multiple element arrays', () => {\n      expect(groupBy([6.1, 4.2, 6.3], Math.floor)).toEqual({\n        4: [4.2],\n        6: [6.1, 6.3],\n      });\n    });\n\n    test('keys that are also properties', () => {\n      expect(groupBy(['one', 'two', 'three'], () => 'length')).toEqual({\n        length: ['one', 'two', 'three'],\n      });\n    });\n  });\n\n  describe('property iteratees', () => {\n    test('single-element arrays', () => {\n      expect(groupBy(['one'], 'length')).toEqual({ 3: ['one'] });\n    });\n\n    test('two-element arrays', () => {\n      expect(groupBy(['one', 'two'], 'length')).toEqual({ 3: ['one', 'two'] });\n    });\n\n    test('multiple element arrays', () => {\n      expect(groupBy(['one', 'two', 'three'], 'length')).toEqual({\n        3: ['one', 'two'],\n        5: ['three'],\n      });\n    });\n\n    test('groups elements of array of objects by a property', () => {\n      const users = [\n        { user: 'barney', age: 36 },\n        { user: 'fred', age: 40 },\n        { user: 'pebbles', age: 1 },\n      ];\n\n      expect(groupBy(users, 'age')).toEqual({\n        36: [{ user: 'barney', age: 36 }],\n        40: [{ user: 'fred', age: 40 }],\n        1: [{ user: 'pebbles', age: 1 }],\n      });\n    });\n  });\n\n  test('does not mutate the original array', () => {\n    const arr = ['one', 'two', 'three'];\n    const copy = arr.slice();\n    groupBy(arr, 'length');\n    expect(arr).toEqual(copy);\n  });\n});\n"
  },
  "format": "javascript",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1690502400,
    "difficulty": "medium",
    "duration": 15,
    "excerpt": "Implement a function that groups values in an array based on a function or property name",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/group-by",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "premium": true,
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "count-by"
    ],
    "slug": "group-by",
    "subtitle": null,
    "title": "Group By",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array The array to iterate over.\n * @param {Function|string} iteratee The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n */\nexport default function groupBy(array, iteratee) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function groupBy<T>(\n  array: Array<T>,\n  iteratee: ((value: T) => any) | string,\n): { [key: string]: number } {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var p=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var j=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),k=(r,e)=>{for(var n in e)a(r,n,{get:e[n],enumerable:!0})},s=(r,e,n,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of f(e))!b.call(r,o)&&o!==n&&a(r,o,{get:()=>e[o],enumerable:!(c=m(e,o))||c.enumerable});return r};var x=(r,e,n)=>(n=r!=null?p(g(r)):{},s(e||!r||!r.__esModule?a(n,\"default\",{value:r,enumerable:!0}):n,r)),v=r=>s(a({},\"__esModule\",{value:!0}),r);var h=j((D,l)=>{l.exports=_jsx_runtime});var F={};k(F,{default:()=>B});var t=x(h());var i=MDXCodeBlock;var u=`/**\n * @param {Array} array The array to iterate over.\n * @param {Function|string} iteratee The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n */\nexport default function groupBy(array, iteratee) {\n  const result = {};\n  const iterateeFunc =\n    typeof iteratee === 'function' ? iteratee : (value) => value[iteratee];\n\n  for (const element of array) {\n    const key = iterateeFunc(element);\n    if (!Object.prototype.hasOwnProperty.call(result, key)) {\n      result[key] = [];\n    }\n\n    result[key].push(element);\n  }\n\n  return result;\n}\n`;var d=`/**\n * @param {Array} array The array to iterate over.\n * @param {Function|string} iteratee The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n */\nexport default function groupBy(array, iteratee) {\n  const result = Object.create(null);\n\n  for (const element of array) {\n    const key =\n      typeof iteratee === 'function' ? iteratee(element) : element[iteratee];\n    result[key] ??= [];\n    result[key].push(element);\n  }\n\n  return result;\n}\n`;function y(r){let e=Object.assign({h2:\"h2\",ol:\"ol\",li:\"li\",code:\"code\",p:\"p\",a:\"a\",ul:\"ul\"},r.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Create an empty \",(0,t.jsx)(e.code,{children:\"results\"}),\" object to store the array of elements for each key.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Determine the \",(0,t.jsx)(e.code,{children:\"iteratee\"}),\" function. If \",(0,t.jsx)(e.code,{children:\"iteratee\"}),\" is already a function, we can use it as-is. Otherwise, if a string value was provided, a function is created to access that property on an element.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Iterate through the array and determine the key for each element by calling \",(0,t.jsx)(e.code,{children:\"iteratee(element)\"}),\". If the key does not exist within the \",(0,t.jsx)(e.code,{children:\"results\"}),\" object, set the value for that key to an empty array. Next we can safely push the value into the array for that key.\"]}),`\n`]}),`\n`,(0,t.jsx)(i,{children:u}),`\n`,(0,t.jsxs)(e.p,{children:[\"An alternative way to create the \",(0,t.jsx)(e.code,{children:\"result\"}),\" object is to use the \",(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment\",children:\"nullish coalescing assignment operator\"}),\" to set the value to \",(0,t.jsx)(e.code,{children:\"[]\"}),\" if \",(0,t.jsx)(e.code,{children:\"key\"}),\" doesn't exist within \",(0,t.jsx)(e.code,{children:\"result\"}),\". Note that using nullish coalescing assignment operator means you might be accessing inherited properties, which is not desired,but since the object is created via \",(0,t.jsx)(e.code,{children:\"Object.create(null)\"}),\", there will not be inherited properties and is safe to use.\"]}),`\n`,(0,t.jsx)(i,{children:d}),`\n`,(0,t.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsxs)(e.a,{href:\"https://lodash.com/docs/#groupBy\",children:[\"Lodash \",(0,t.jsx)(e.code,{children:\"_.groupBy\"})]})}),`\n`]})]})}function _(r={}){let{wrapper:e}=r.components||{};return e?(0,t.jsx)(e,Object.assign({},r,{children:(0,t.jsx)(y,r)})):y(r)}var B=_;return v(F);})();\n;return Component;",
  "workspace": {
    "main": "/src/group-by.js",
    "run": "/src/group-by.run.test.ts",
    "submit": "/src/group-by.submit.test.ts"
  }
}