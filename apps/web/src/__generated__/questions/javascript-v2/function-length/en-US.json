{
  "description": "var Component=(()=>{var l=Object.create;var c=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var b=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),g=(n,e)=>{for(var r in e)c(n,r,{get:e[r],enumerable:!0})},a=(n,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of d(e))!p.call(n,o)&&o!==r&&c(n,o,{get:()=>e[o],enumerable:!(i=f(e,o))||i.enumerable});return n};var x=(n,e,r)=>(r=n!=null?l(m(n)):{},a(e||!n||!n.__esModule?c(r,\"default\",{value:n,enumerable:!0}):r,n)),j=n=>a(c({},\"__esModule\",{value:!0}),n);var u=b((F,s)=>{s.exports=_jsx_runtime});var L={};g(L,{default:()=>y,frontmatter:()=>w});var t=x(u()),w={title:\"Function Length\",excerpt:\"Implement a function that returns the number of parameters expected by a function\"};function h(n){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",pre:\"pre\",h2:\"h2\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"Implement a function \",(0,t.jsx)(e.code,{children:\"functionLength\"}),\", to return the number of parameters a function expects. Note that this is a static value defined by the function, not the number of arguments the function is called with (which is determined by \",(0,t.jsx)(e.code,{children:\"arguments.length\"}),\")\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"P.S. Practically, there's no need for this function since it is a simple wrapper. However, it is useful to know how to determine the number of parameters a function expects, which is useful for questions like \",(0,t.jsx)(e.a,{href:\"/questions/javascript/curry-ii\",children:\"Curry II\"}),\".\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`function foo() {}\nfunction bar(a) {}\nfunction baz(a, b) {}\n\nfunctionLength(foo); // 0\nfunctionLength(bar); // 1\nfunctionLength(baz); // 2\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length\",children:\"Function: length | MDN\"})})]})}function _(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(h,n)})):h(n)}var y=_;return j(L);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/function-length\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/function-length.js\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n",
    "/src/function-length.js": "/**\n * @param {Function} fn\n * @return {number}\n */\nexport default function functionLength(fn) {\n  return fn.length;\n}\n",
    "/src/function-length.run.test.ts": "import functionLength from './function-length';\n\ndescribe('functionLength', () => {\n  test('no arguments', () => {\n    expect(functionLength(function foo() {})).toBe(0);\n    expect(functionLength(() => {})).toBe(0);\n  });\n\n  test('one argument', () => {\n    expect(functionLength(function foo(a) {})).toBe(1);\n    expect(functionLength((a) => {})).toBe(1);\n  });\n\n  test('two arguments', () => {\n    expect(functionLength(function foo(a, b) {})).toBe(2);\n    expect(functionLength((a, b) => {})).toBe(2);\n  });\n\n  test('multiple arguments', () => {\n    expect(functionLength(function foo(a, b, c) {})).toBe(3);\n    expect(functionLength((a, b, c) => {})).toBe(3);\n  });\n\n  // TODO: Transpilation output makes the default parameters non-default, thus\n  // the results are different in the browser. Commented out for now.\n  // test('default arguments', () => {\n  //   expect(functionLength(function foo(a, b = 2) {})).toBe(1);\n  //   expect(functionLength(function foo(a = 1, b = 2) {})).toBe(0);\n  // });\n\n  // test('rest arguments', () => {\n  //   expect(functionLength(function foo(...args) {})).toBe(0);\n  //   expect(functionLength(function foo(a, ...args) {})).toBe(1);\n  //   expect(functionLength(function foo(a, b, ...args) {})).toBe(2);\n  //   expect(functionLength(function foo(a, b = 1, ...args) {})).toBe(1);\n  // });\n});\n",
    "/src/function-length.submit.test.ts": "import functionLength from './function-length';\n\ndescribe('functionLength', () => {\n  test('no arguments', () => {\n    expect(functionLength(function foo() {})).toBe(0);\n    expect(functionLength(() => {})).toBe(0);\n  });\n\n  test('one argument', () => {\n    expect(functionLength(function foo(a) {})).toBe(1);\n    expect(functionLength((a) => {})).toBe(1);\n  });\n\n  test('two arguments', () => {\n    expect(functionLength(function foo(a, b) {})).toBe(2);\n    expect(functionLength((a, b) => {})).toBe(2);\n  });\n\n  test('multiple arguments', () => {\n    expect(functionLength(function foo(a, b, c) {})).toBe(3);\n    expect(functionLength((a, b, c) => {})).toBe(3);\n  });\n\n  // TODO: Transpilation output makes the default parameters non-default, thus\n  // the results are different in the browser. Commented out for now.\n  // test('default arguments', () => {\n  //   expect(functionLength(function foo(a, b = 2) {})).toBe(1);\n  //   expect(functionLength(function foo(a = 1, b = 2) {})).toBe(0);\n  // });\n\n  // test('rest arguments', () => {\n  //   expect(functionLength(function foo(...args) {})).toBe(0);\n  //   expect(functionLength(function foo(a, ...args) {})).toBe(1);\n  //   expect(functionLength(function foo(a, b, ...args) {})).toBe(2);\n  //   expect(functionLength(function foo(a, b = 1, ...args) {})).toBe(1);\n  // });\n});\n"
  },
  "format": "javascript",
  "metadata": {
    "author": null,
    "companies": [],
    "created": 1683331200,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": "Implement a function that returns the number of parameters expected by a function",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/function-length",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [
      "curry"
    ],
    "premium": true,
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "number-of-arguments"
    ],
    "slug": "function-length",
    "subtitle": null,
    "title": "Function Length",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {Function} fn\n * @return {number}\n */\nexport default function functionLength(fn) {\n  throw 'Not implemented';\n}",
    "ts": "export default function functionLength(fn: Function): number {\n  throw 'Not implemented';\n}"
  },
  "solution": "var Component=(()=>{var f=Object.create;var c=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var x=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),j=(n,e)=>{for(var r in e)c(n,r,{get:e[r],enumerable:!0})},a=(n,e,r,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!b.call(n,o)&&o!==r&&c(n,o,{get:()=>e[o],enumerable:!(l=p(e,o))||l.enumerable});return n};var _=(n,e,r)=>(r=n!=null?f(g(n)):{},a(e||!n||!n.__esModule?c(r,\"default\",{value:n,enumerable:!0}):r,n)),M=n=>a(c({},\"__esModule\",{value:!0}),n);var h=x((X,i)=>{i.exports=_jsx_runtime});var v={};j(v,{default:()=>F});var t=_(h());var s=MDXCodeBlock;var d=`/**\n * @param {Function} fn\n * @return {number}\n */\nexport default function functionLength(fn) {\n  return fn.length;\n}\n`;function u(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",ul:\"ul\",li:\"li\",a:\"a\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"All function instances have a \",(0,t.jsx)(e.code,{children:\"length\"}),\" property which indicates the number of parameters expected by the function.\"]}),`\n`,(0,t.jsx)(s,{children:d}),`\n`,(0,t.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"length\"}),\" property excludes the rest parameter and only includes parameters before the first one with a default value.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`function foo(a, b = 2) {}\nfoo.length; // 1\n\nfunction bar(a = 1, b = 2) {}\nbar.length; // 0\n\nfunction baz(...args) {}\nbaz.length; // 0\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length\",children:\"Function: length | MDN\"})}),`\n`]})]})}function D(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(u,n)})):u(n)}var F=D;return M(v);})();\n;return Component;",
  "workspace": {
    "main": "/src/function-length.js",
    "run": "/src/function-length.run.test.ts",
    "submit": "/src/function-length.submit.test.ts"
  }
}