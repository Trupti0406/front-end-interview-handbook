{
  "author": "yangshun",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/accordion-react-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/Accordion.js": {
      "code": "import { useState } from 'react';\n\nexport default function Accordion({ sections }) {\n  const [openSections, setOpenSections] = useState(\n    new Set(),\n  );\n\n  return (\n    <div className=\"accordion\">\n      {sections.map(({ value, title, contents }) => {\n        const isExpanded = openSections.has(value);\n\n        return (\n          <div className=\"accordion-item\" key={value}>\n            <button\n              className=\"accordion-item-title\"\n              type=\"button\"\n              onClick={() => {\n                const newOpenSections = new Set(\n                  openSections,\n                );\n                newOpenSections.has(value)\n                  ? newOpenSections.delete(value)\n                  : newOpenSections.add(value);\n                setOpenSections(newOpenSections);\n              }}>\n              {title}\n              <span\n                aria-hidden={true}\n                className={[\n                  'accordion-icon',\n                  isExpanded && 'accordion-icon--rotated',\n                ]\n                  .filter(Boolean)\n                  .join(' ')}\n              />\n            </button>\n            <div\n              className=\"accordion-item-contents\"\n              hidden={!isExpanded}>\n              {contents}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n"
    },
    "/src/App.js": {
      "code": "import Accordion from './Accordion';\n\nimport './styles.css';\n\nexport default function App() {\n  return (\n    <div className=\"wrapper\">\n      <Accordion\n        sections={[\n          {\n            value: 'html',\n            title: 'HTML',\n            contents:\n              'The HyperText Markup Language or HTML is the standard markup language for documents designed to be displayed in a web browser.',\n          },\n          {\n            value: 'css',\n            title: 'CSS',\n            contents:\n              'Cascading Style Sheets is a style sheet language used for describing the presentation of a document written in a markup language such as HTML or XML.',\n          },\n          {\n            value: 'javascript',\n            title: 'JavaScript',\n            contents:\n              'JavaScript, often abbreviated as JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS.',\n          },\n        ]}\n      />\n    </div>\n  );\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.wrapper {\n  align-items: center;\n  display: flex;\n}\n\n.accordion {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n}\n\n.accordion-item {\n  display: flex;\n  flex-direction: column;\n  row-gap: 4px;\n  padding: 4px 0;\n}\n\n.accordion-item:not(:first-child) {\n  border-top: 1px solid #eee;\n}\n\n.accordion-item-title {\n  align-items: center;\n  border: none;\n  background: none;\n  cursor: pointer;\n  font-weight: 500;\n  padding: 4px;\n  justify-content: space-between;\n  text-align: start;\n  display: flex;\n}\n\n.accordion-item-title:hover {\n  background-color: #eee;\n}\n\n.accordion-icon {\n  border: solid currentcolor;\n  border-width: 0 2px 2px 0;\n  display: inline-block;\n  height: 8px;\n  pointer-events: none;\n  transform: translateY(-2px) rotate(45deg);\n  width: 8px;\n}\n\n.accordion-icon--rotated {\n  transform: translateY(2px) rotate(-135deg);\n}\n\n.accordion-item-contents {\n  font-size: 14px;\n  line-height: 1.2em;\n  padding: 4px;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/Accordion.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/Accordion.js",
    "environment": "create-react-app"
  },
  "writeup": "var Component=(()=>{var w=Object.create;var l=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var j=Object.getOwnPropertyNames;var A=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var I=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),y=(n,e)=>{for(var c in e)l(n,c,{get:e[c],enumerable:!0})},h=(n,e,c,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of j(e))!_.call(n,s)&&s!==c&&l(n,s,{get:()=>e[s],enumerable:!(d=b(e,s))||d.enumerable});return n};var r=(n,e,c)=>(c=n!=null?w(A(n)):{},h(e||!n||!n.__esModule?l(c,\"default\",{value:n,enumerable:!0}):c,n)),v=n=>h(l({},\"__esModule\",{value:!0}),n);var a=I((O,u)=>{u.exports=_jsx_runtime});var D={};y(D,{default:()=>k});var t=r(a());var i=r(a());function p(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test Cases\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"All the provided sections should be displayed.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Clicking on a collapsed section's title should expand it.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Clicking on an expanded section's title should collapse it.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Test that all sections are allowed to expand and collapse independently.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Test that you are able to initialize multiple instances of the component, each with independent states.\"}),`\n`]})]})}function C(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(p,n)})):p(n)}var m=C;var o=r(a());function f(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",a:\"a\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"Interactive elements need to be focusable, so we'll use a \",(0,o.jsx)(e.code,{children:\"<button>\"}),\" for the title.\"]}),`\n`,(0,o.jsxs)(e.p,{children:[\"The \",(0,o.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/accordion\",children:\"ARIA Authoring Practices Guide for Accordion\"}),\" has a long list of guidelines for the ARIA roles, states, and properties to add to the various elements of an accordion. \",(0,o.jsx)(e.a,{href:\"/questions/user-interface/accordion-ii\",children:\"Accordion II\"}),\" and \",(0,o.jsx)(e.a,{href:\"/questions/user-interface/accordion-iii\",children:\"Accordion III\"}),\" will focus on improving the accessibility of the Accordion component.\"]})]})}function M(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(f,n)})):f(n)}var x=M;function g(n){let e=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",ul:\"ul\",li:\"li\",code:\"code\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(e.p,{children:\"Implementing a basic (not fully accessible) Accordion component in React is quite simple due to the fact that only one state value is needed, the expanded/collapsed states of each section. React also helps to keep the state and the UI in sync, which is a little more troublesome to do so in Vanilla JavaScript.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Props (API Design)\"}),`\n`,(0,t.jsx)(e.p,{children:\"Part of the complexity of building a component is designing the API for it. In the case of React, it would be the props of the component. At the bare minimum, we will need the following props:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"items\"}),\": A list of item objects. Each item is an object with the fields:\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"value\"}),\": A unique identifier for the accordion item.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"title\"}),\": The text label to show in the accordion title.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"contents\"}),\": The contents to show when the section is expanded.\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{children:\"State\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"We can use ES6 \",(0,t.jsx)(e.code,{children:\"Set\"}),\" to keep track of the sections which are expanded. When the section title is clicked, check if the section's value is within the set. The value will be removed from the set if it's inside and added it into the set otherwise.\"]}),`\n`,(0,t.jsx)(m,{}),`\n`,(0,t.jsx)(x,{})]})}function T(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(g,n)})):g(n)}var k=T;return v(D);})();\n;return Component;"
}