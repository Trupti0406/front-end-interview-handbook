{
  "author": "utpal-d4l",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/two-factor-auth-input-react-solution\",\n  \"author\": \"utpal-d4l\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import { useEffect, useRef, useState } from 'react';\n\nconst singleNumRegex = /^\\d$/;\nconst numRegex = /^\\d+$/;\n\nfunction Input({\n  value,\n  isFocused,\n  isDisabled,\n  onChange,\n  onFocus,\n  onKeyDown,\n  onPaste,\n}) {\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    if (isFocused) {\n      inputRef.current?.setSelectionRange(\n        0,\n        inputRef.current.value.length,\n      );\n      inputRef.current?.focus();\n    }\n  }, [isFocused]);\n\n  return (\n    <input\n      ref={inputRef}\n      type=\"text\"\n      className=\"input-box\"\n      maxLength={1}\n      inputMode=\"numeric\"\n      autoComplete=\"one-time-code\"\n      value={value}\n      disabled={isDisabled}\n      onChange={onChange}\n      onFocus={onFocus}\n      onKeyDown={onKeyDown}\n      onPaste={onPaste}\n    />\n  );\n}\n\nfunction AuthCodeInput({\n  length,\n  isDisabled = false,\n  onSubmit,\n}) {\n  const [code, setCode] = useState(Array(length).fill(''));\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  function clampIndex(index) {\n    if (index <= 0) {\n      return 0;\n    }\n\n    if (index >= length) {\n      return length - 1;\n    }\n\n    return index;\n  }\n\n  function onChange(event, index) {\n    const value = event.target.value;\n    if (!singleNumRegex.test(value)) {\n      return;\n    }\n\n    setCode(\n      code.map((codeDigit, idx) =>\n        index === idx ? String(value) : codeDigit,\n      ),\n    );\n    setFocusedIndex(clampIndex(focusedIndex + 1));\n  }\n\n  function onFocus(index) {\n    setFocusedIndex(index);\n  }\n\n  function onKeyDown(event, index) {\n    switch (event.key) {\n      case 'ArrowLeft':\n        setFocusedIndex(clampIndex(focusedIndex - 1));\n        break;\n      case 'ArrowRight':\n        setFocusedIndex(clampIndex(focusedIndex + 1));\n        break;\n      case 'Backspace':\n        if (code[index]) {\n          setCode(\n            code.map((codeDigit, idx) =>\n              index === idx ? '' : codeDigit,\n            ),\n          );\n        } else if (index - 1 >= 0) {\n          setCode(\n            code.map((codeDigit, idx) =>\n              index - 1 === idx ? '' : codeDigit,\n            ),\n          );\n          setFocusedIndex(clampIndex(index - 1));\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  function onPaste(event) {\n    event.preventDefault();\n    const pastedCode = event.clipboardData.getData('text');\n\n    if (!numRegex.test(pastedCode)) {\n      return;\n    }\n\n    setCode(\n      code.map(\n        (codeDigit, idx) => pastedCode[idx] ?? codeDigit,\n      ),\n    );\n    setFocusedIndex(clampIndex(pastedCode.length));\n  }\n\n  function onReset(event) {\n    event.preventDefault();\n    setCode(Array(length).fill(''));\n    setFocusedIndex(0);\n  }\n\n  function onVerify(event) {\n    event.preventDefault();\n    onSubmit(code.join(''));\n  }\n\n  const isVerifyEnabled = code.every((codeDigit) =>\n    Boolean(codeDigit),\n  );\n  const isResetEnabled = code.some((codeDigit) =>\n    Boolean(codeDigit),\n  );\n\n  return (\n    <form className=\"container\">\n      <div className=\"flex-container\">\n        {code.map((codeDigit, index) => (\n          <Input\n            key={index}\n            value={codeDigit}\n            isFocused={focusedIndex === index}\n            isDisabled={isDisabled}\n            onChange={(event) => onChange(event, index)}\n            onFocus={() => onFocus(index)}\n            onKeyDown={(event) => onKeyDown(event, index)}\n            onPaste={onPaste}\n          />\n        ))}\n      </div>\n      <div className=\"flex-container\">\n        <button\n          type=\"reset\"\n          className=\"button button--secondary\"\n          disabled={!isResetEnabled || isDisabled}\n          onClick={onReset}>\n          RESET\n        </button>\n        <button\n          type=\"submit\"\n          className=\"button button--primary\"\n          disabled={!isVerifyEnabled || isDisabled}\n          onClick={onVerify}>\n          VERIFY\n        </button>\n      </div>\n    </form>\n  );\n}\n\nfunction App() {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  function onSubmit(code) {\n    setIsSubmitting(true);\n    fetch(\n      'https://www.greatfrontend.com/api/questions/two-factor-auth-input',\n      {\n        method: 'POST',\n        body: JSON.stringify({ otp: code }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      },\n    )\n      .then((res) => res.text())\n      .then((res) => alert(res))\n      .catch(() =>\n        alert(\n          'Something went wrong. Please try again later.',\n        ),\n      )\n      .finally(() => setIsSubmitting(false));\n  }\n\n  return (\n    <AuthCodeInput\n      length={6}\n      onSubmit={onSubmit}\n      isDisabled={isSubmitting}\n    />\n  );\n}\n\nexport default App;\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": ":root {\n  --shade-high: #8f6af2;\n  --shade-mid: #baa4f6;\n  --shade-low: #e6dffa;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.container {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.flex-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.input-box {\n  height: 2.5rem;\n  width: 2.5rem;\n  border-radius: 0.25rem;\n  text-align: center;\n  border: none;\n  outline: none;\n  background: var(--shade-low);\n  font-weight: 600;\n  font-size: 1rem;\n}\n\n.input-box::selection {\n  background-color: rgba(255, 255, 255, 0.2);\n}\n\n.input-box:focus {\n  background: var(--shade-high);\n  color: white;\n}\n\n.input-box:disabled {\n  cursor: not-allowed;\n}\n\n.button {\n  border: none;\n  outline: none;\n  border-radius: 0.25rem;\n  padding: 0.5rem 1rem;\n  font-size: 0.75rem;\n  font-weight: 500;\n  cursor: pointer;\n}\n\n.button:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.button--primary {\n  background-color: var(--shade-mid);\n  border: 0.0625rem solid var(--shade-mid);\n  color: black;\n  transition: all 0.2s linear;\n}\n\n.button--primary:not(:disabled):hover {\n  background-color: var(--shade-high);\n  border: 0.0625rem solid var(--shade-high);\n  color: white;\n}\n\n.button--secondary {\n  background-color: transparent;\n  color: black;\n  border: 0.0625rem solid black;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app"
  },
  "writeup": "var Component=(()=>{var b=Object.create;var c=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var w=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=>{for(var o in e)c(t,o,{get:e[o],enumerable:!0})},d=(t,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of m(e))!y.call(t,l)&&l!==o&&c(t,l,{get:()=>e[l],enumerable:!(s=x(e,l))||s.enumerable});return t};var r=(t,e,o)=>(o=t!=null?b(v(t)):{},d(e||!t||!t.__esModule?c(o,\"default\",{value:t,enumerable:!0}):o,t)),T=t=>d(c({},\"__esModule\",{value:!0}),t);var h=w((C,u)=>{u.exports=_jsx_runtime});var M={};g(M,{default:()=>_});var n=r(h());var i=r(h());function a(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Invalid input should not be allowed in input boxes.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Entering a valid input should fill the input box and move the focus to the next input box.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Pressing Tab/Arrow buttons should move the focus to left/right based on the pressed key.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Pressing Backspace should delete the current input (if filled) or move to previous input box and delete any input present from previous input box.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Pasting a code should paste the code if the pasted code is valid input.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Reset should be disabled if no input is present.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Submit should be enabled only when all input boxed are filled with valid input.\"}),`\n`,(0,i.jsx)(e.li,{children:\"No interaction should be allowed when a network request is in progress.\"}),`\n`]})]})}function j(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(a,t)})):a(t)}var p=j;function f(t){let e=Object.assign({h2:\"h2\",h3:\"h3\",ul:\"ul\",li:\"li\",code:\"code\",p:\"p\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.h3,{children:\"State\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"code\"}),\": This state variable stores the auth code entered by the user.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"focusedIndex\"}),\": This state variable stores the index of the currently focused input box.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"isSubmitting\"}),\": This state variable represents the current submitting status of the auth input.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,n.jsx)(e.p,{children:\"The solution uses flexbox to render the auth input boxes.\"}),`\n`,(0,n.jsx)(e.h3,{children:(0,n.jsx)(e.code,{children:\"clampIndex\"})}),`\n`,(0,n.jsx)(e.p,{children:\"This is a utility function to always keep the focused input index in range from 0, ..., size-1.\"}),`\n`,(0,n.jsx)(e.h3,{children:(0,n.jsx)(e.code,{children:\"onChange\"})}),`\n`,(0,n.jsx)(e.p,{children:\"This function is called whenever the user types in a character.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Invalid character: The entered value is neglected.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Valid character: Fills currently focused input box and moves the focus to the next input box.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:(0,n.jsx)(e.code,{children:\"onFocus\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This function updates the \",(0,n.jsx)(e.code,{children:\"focusedIndex\"}),\" whenever the user clicks on any input box other than the currently focused input box.\"]}),`\n`,(0,n.jsx)(e.h3,{children:(0,n.jsx)(e.code,{children:\"onKeyDown\"})}),`\n`,(0,n.jsx)(e.p,{children:\"This function is called whenever a key is pressed and does some operation based on the pressed key.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Left Arrow: Moves the focus to the left of the currently focused input box.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Right Arrow: Moves the focus to the right of the currently focused input box.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Backspace:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"If the currently focused input box has character, delete it.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Else move the focus to the previous input box and delete any character present from the previous input box.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:(0,n.jsx)(e.code,{children:\"onPaste\"})}),`\n`,(0,n.jsx)(e.p,{children:\"This function is called whenever the user pastes a code into the input box. The function checks for a valid code and then fills the input boxes accordingly.\"}),`\n`,(0,n.jsx)(e.h3,{children:(0,n.jsx)(e.code,{children:\"onReset\"})}),`\n`,(0,n.jsx)(e.p,{children:\"This function is called whenever the Reset button is clicked and resets the entered code and focused index.\"}),`\n`,(0,n.jsx)(e.h3,{children:(0,n.jsx)(e.code,{children:\"onVerify\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This function is called whenever Verify button is clicked and calls the \",(0,n.jsx)(e.code,{children:\"onSubmit\"}),\" function passed to the \",(0,n.jsx)(e.code,{children:\"AuthCodeInput\"}),\" component.\"]}),`\n`,(0,n.jsx)(e.h3,{children:(0,n.jsx)(e.code,{children:\"onSubmit\"})}),`\n`,(0,n.jsx)(e.p,{children:\"This function is called when the auth code is submitted. This function calls the API and displays the response based on the validity of the entered auth code.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,n.jsx)(e.p,{children:\"Use of semantic HTML elements like form, input, button, etc. will automatically provide with some accessibility.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Tab will move the focus to the next field.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Shift + Tab will move the focus to the previous field.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Note: Other key presses are handled via \",(0,n.jsx)(e.code,{children:\"onKeyDown\"}),\" function.\"]}),`\n`,(0,n.jsx)(p,{})]})}function k(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(f,t)})):f(t)}var _=k;return T(M);})();\n;return Component;"
}