{
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/memory-game-svelte-skeleton\",\n  \"version\": \"0.0.1\",\n  \"main\": \"src/index.js\",\n  \"dependencies\": {\n    \"svelte\": \"^3.58.0\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Svelte</title>\n    <link rel=\"stylesheet\" href=\"public/bundle.css\" />\n  </head>\n\n  <body>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n"
    },
    "/src/App.svelte": {
      "code": "<script>\n  import './styles.css';\n\n  const emojis = [\n    '🐵',\n    '🐶',\n    '🦊',\n    '🐱',\n    '🦁',\n    '🐯',\n    '🐴',\n    '🦄',\n    '🦓',\n    '🦌',\n    '🐮',\n    '🐷',\n    '🐭',\n    '🐹',\n    '🐻',\n    '🐨',\n    '🐼',\n    '🐽',\n    '🐸',\n    '🐰',\n    '🐙',\n  ];\n</script>\n\n<div>Hello World</div>\n"
    },
    "/src/index.js": {
      "code": "import App from './App.svelte';\nimport './styles.css';\n\nconst app = new App({\n  target: document.body,\n});\n\nexport default app;\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.svelte",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.svelte",
    "environment": "svelte"
  },
  "writeup": "var Component=(()=>{var f=Object.create;var i=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var j=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},c=(t,e,n,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of y(e))!x.call(t,r)&&r!==n&&i(t,r,{get:()=>e[r],enumerable:!(o=g(e,r))||o.enumerable});return t};var d=(t,e,n)=>(n=t!=null?f(w(t)):{},c(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),_=t=>c(i({},\"__esModule\",{value:!0}),t);var l=j((X,m)=>{m.exports=_jsx_runtime});var k={};b(k,{default:()=>v});var s=d(l());var a=d(l());function h(t){let e=Object.assign({p:\"p\",img:\"img\",h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:\"Build a memory game where the player needs to match pairs of cards.\"}),`\n`,(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{src:\"/img/questions/memory-game/memory-game-example.png\",alt:\"Memory game example\"})}),`\n`,(0,a.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,a.jsxs)(e.ul,{children:[`\n`,(0,a.jsx)(e.li,{children:\"Display a grid of faced-down cards on the screen, with each card representing a different item or image. You can use emojis as the image, a list of emojis has been provided.\"}),`\n`,(0,a.jsx)(e.li,{children:\"The grid should consist of an equal number of cards to make pairs.\"}),`\n`,(0,a.jsx)(e.li,{children:\"When a player clicks on a card, it should flip over and reveal its image.\"}),`\n`,(0,a.jsx)(e.li,{children:\"Allow the player to select two cards at a time.\"}),`\n`,(0,a.jsx)(e.li,{children:\"If the two selected cards have the same image, it's a match and they should remain face-up.\"}),`\n`,(0,a.jsxs)(e.li,{children:[\"If the two selected cards have different images and the player\",`\n`,(0,a.jsxs)(e.ul,{children:[`\n`,(0,a.jsx)(e.li,{children:\"Selects other cards, the two selected cards should flip back.\"}),`\n`,(0,a.jsx)(e.li,{children:\"Do nothing, the two selected cards should flip back facedown after a short delay.\"}),`\n`]}),`\n`]}),`\n`,(0,a.jsx)(e.li,{children:'When all pairs have been successfully matched, end the game and display a \"Play again\" button.'}),`\n`]})]})}function D(t={}){let{wrapper:e}=t.components||{};return e?(0,a.jsx)(e,Object.assign({},t,{children:(0,a.jsx)(h,t)})):h(t)}var u=D;function p(t){return(0,s.jsx)(u,{})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,s.jsx)(e,Object.assign({},t,{children:(0,s.jsx)(p,t)})):p(t)}var v=M;return _(k);})();\n;return Component;"
}