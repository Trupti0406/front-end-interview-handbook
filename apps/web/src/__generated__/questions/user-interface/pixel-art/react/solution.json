{
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/pixel-art-react-solution\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\",\n      \"react-app/jest\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import { useState } from 'react';\nimport Board from './Board';\nimport ColorPicker from './ColorPicker';\n\nimport './styles.css';\n\nconst COLORS = [\n  'white',\n  'gray',\n  'red',\n  'orange',\n  'yellow',\n  'green',\n  'teal',\n  'blue',\n  'purple',\n  'beige',\n];\n\nexport default function App() {\n  const [selectedColor, setColor] = useState(COLORS[0]);\n  const [isDrawing, setIsDrawing] = useState(true);\n  return (\n    <div>\n      <Board selectedColor={selectedColor} isDrawing={isDrawing} />\n      <ColorPicker\n        colors={COLORS}\n        selectedColor={selectedColor}\n        setColor={setColor}\n        isDrawing={isDrawing}\n        setIsDrawing={setIsDrawing}\n      />\n    </div>\n  );\n}\n"
    },
    "/src/Board.js": {
      "code": "import { useState } from 'react';\nimport Cell from './Cell';\n\nconst size = 15;\n\nexport default function Board({ selectedColor, isDrawing }) {\n  const grid = Array(size).fill(Array(size).fill(null));\n  const [isDragging, setIsDragging] = useState(false);\n\n  return (\n    <div className=\"grid\">\n      {grid.map((row, rowIndex) => {\n        const rowClassName = `grid__row ${\n          rowIndex % 2 === 0 ? 'grid__row--even' : 'grid__row--odd'\n        }`;\n        return (\n          <div\n            className={rowClassName}\n            key={rowIndex}\n            onMouseDown={() => setIsDragging(true)}\n            onMouseUp={() => setIsDragging(false)}>\n            {row.map((cell, cellIndex) => (\n              <Cell\n                key={cellIndex}\n                isDragging={isDragging}\n                isDrawing={isDrawing}\n                selectedColor={selectedColor}\n              />\n            ))}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n"
    },
    "/src/Cell.js": {
      "code": "import { useState } from 'react';\n\nexport default function Cell({ isDragging, isDrawing, selectedColor }) {\n  const [cellColor, setCellColor] = useState(null);\n\n  function onCellMouseOver() {\n    if (isDragging && isDrawing) {\n      setCellColor(selectedColor);\n    } else if (isDragging && !isDrawing) {\n      setCellColor(null);\n    }\n  }\n\n  function onCellClick() {\n    if (isDrawing) {\n      setCellColor(selectedColor);\n    } else {\n      setCellColor(null);\n    }\n  }\n\n  const cellClassName = cellColor === null ? '' : cellColor;\n  return (\n    <button\n      onMouseDown={onCellClick}\n      onMouseOver={onCellMouseOver}\n      className={`grid__cell ${cellClassName}`}\n    />\n  );\n}\n"
    },
    "/src/ColorPicker.js": {
      "code": "export default function ColorPicker({\n  colors,\n  selectedColor,\n  setColor,\n  isDrawing,\n  setIsDrawing,\n}) {\n  function onColorClick(color) {\n    setIsDrawing(true);\n    setColor(color);\n  }\n\n  function buttonClassName(drawingButtonClicked) {\n    if (isDrawing === drawingButtonClicked) {\n      return 'color-picker__option color-picker__option--selected';\n    } else {\n      return 'color-picker__option color-picker__option--not-selected';\n    }\n  }\n\n  return (\n    <div className=\"color-picker-container\">\n      <div>\n        <button\n          onClick={() => setIsDrawing(true)}\n          className={buttonClassName(true)}>\n          Draw\n        </button>\n        <button\n          onClick={() => setIsDrawing(false)}\n          className={buttonClassName(false)}>\n          Erase\n        </button>\n      </div>\n      <div className=\"color-picker\">\n        {colors.map((color, index) => {\n          const colorSelectedClassName =\n            color === selectedColor ? 'color--selected' : 'color--not-selected';\n          const colorClassName = `color ${colorSelectedClassName} ${color}`;\n          return (\n            <button\n              key={index}\n              className={colorClassName}\n              onClick={() => onColorClick(color)}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.color-picker-container {\n  display: flex;\n  gap: 20px;\n}\n\n.color-picker__option {\n  height: 36px;\n  background-color: transparent;\n  border: 2px solid black;\n  font-size: 14px;\n}\n\n.color-picker__option--selected {\n  background-color: black;\n  color: white;\n}\n\n.color-picker {\n  display: flex;\n}\n\n.color {\n  width: 20px;\n  height: 20px;\n}\n\n.color--not-selected {\n  border: 2px solid transparent;\n}\n\n.white {\n  border: 2px solid #e9ecef;\n}\n\n.color--selected {\n  border: 2px solid black;\n}\n\n.grid {\n  margin-bottom: 20px;\n}\n\n.grid__row {\n  display: flex;\n}\n\n.grid__cell {\n  width: 20px;\n  height: 20px;\n  border: 0;\n  background-color: transparent;\n}\n\n.grid__row--even .grid__cell:nth-child(odd) {\n  background-color: #e9ecef;\n}\n\n.grid__row--odd .grid__cell:nth-child(even) {\n  background-color: #e9ecef;\n}\n\n.white,\n.grid .grid__row .white {\n  background-color: #ffffff;\n}\n\n.gray,\n.grid .grid__row .gray {\n  background-color: #e9ecef;\n}\n\n.red,\n.grid .grid__row .red {\n  background-color: #cc0001;\n}\n\n.orange .grid .grid__row .orange {\n  background-color: #fb940b;\n}\n\n.yellow,\n.grid .grid__row .yellow {\n  background-color: #ffff01;\n}\n\n.green,\n.grid .grid__row .green {\n  background-color: #01cc00;\n}\n\n.teal,\n.grid .grid__row .teal {\n  background-color: #38d9a9;\n}\n\n.blue,\n.grid .grid__row .blue {\n  background-color: #228be6;\n}\n\n.purple,\n.grid .grid__row .purple {\n  background-color: #7950f2;\n}\n\n.beige,\n.grid .grid__row .beige {\n  background-color: #ff8787;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app"
  },
  "writeup": "var Component=(()=>{var C=Object.create;var c=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var b=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),v=(n,e)=>{for(var l in e)c(n,l,{get:e[l],enumerable:!0})},h=(n,e,l,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of x(e))!_.call(n,i)&&i!==l&&c(n,i,{get:()=>e[i],enumerable:!(d=D(e,i))||d.enumerable});return n};var s=(n,e,l)=>(l=n!=null?C(y(n)):{},h(e||!n||!n.__esModule?c(l,\"default\",{value:n,enumerable:!0}):l,n)),j=n=>h(c({},\"__esModule\",{value:!0}),n);var a=b((A,u)=>{u.exports=_jsx_runtime});var W={};v(W,{default:()=>S});var o=s(a());var r=s(a());function g(n){let e=Object.assign({h2:\"h2\",p:\"p\",ul:\"ul\",li:\"li\"},n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,r.jsx)(e.p,{children:\"TODO(react)\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"The board should render a 15x15 grid.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Board should not have any colors applied on initial load.\"}),`\n`,(0,r.jsx)(e.li,{children:\"There should be a ColorPicker that shows which color is currently selected.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Clicking once on a Cell while Drawing should color that cell.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Clicking and dragging over multiple cells while Drawing should color those cells.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Clicking once on a Cell while Erasing should erase that cell's color.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Clicking and dragging over multiple cells while Erasing should remove those cell's colors.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Drawing over an already colored cell with a different color should update that color.\"}),`\n`]})]})}function k(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(g,n)})):g(n)}var p=k;var t=s(a());function w(n){let e=Object.assign({h2:\"h2\",p:\"p\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"A11y\"}),`\n`,(0,t.jsx)(e.p,{children:\"Not implemented in solution, but for extra credit, you can add keyboard navigation events (up, down, left, right) to select cells and draw/erase with Enter.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Consider using a button instead of a div for semantic HTML.\"})]})}function M(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(w,n)})):w(n)}var m=M;function f(n){let e=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",code:\"code\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,o.jsx)(e.p,{children:\"TODO(react): Review solution.\"}),`\n`,(0,o.jsx)(e.h3,{children:\"State\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"The parent App component stores the color selected (\",(0,o.jsx)(e.code,{children:\"selectedColor\"}),\") and Draw option (\",(0,o.jsx)(e.code,{children:\"isDrawing\"}),\") or Erase (\",(0,o.jsx)(e.code,{children:\"!isDrawing\"}),\") as state. We initialize the \",(0,o.jsx)(e.code,{children:\"selectedColor\"}),\" as the first color in our array and isDrawing to true.\"]}),`\n`,(0,o.jsxs)(e.p,{children:[\"We pass \",(0,o.jsx)(e.code,{children:\"setColor\"}),\" function from App to the \",(0,o.jsx)(e.code,{children:\"ColorPicker\"}),\" subcomponent. Whenever a color is clicked on in the \",(0,o.jsx)(e.code,{children:\"ColorPicker\"}),\", we call setColor with the selected color as the parameter to update App's \",(0,o.jsx)(e.code,{children:\"selectedColor\"}),\" state.\"]}),`\n`,(0,o.jsxs)(e.p,{children:[\"We also pass \",(0,o.jsx)(e.code,{children:\"setIsDrawing\"}),\" to \",(0,o.jsx)(e.code,{children:\"ColorPicker\"}),\" so that we update isDrawing with true or false depending on if 'Draw' or 'Erase' is selected.\"]}),`\n`,(0,o.jsxs)(e.p,{children:[\"The Board Component is another child of App. Board will render 15x15 Cell components. Each Cell component can store a color as its state (initialized as null) and it receives isDrawing, isDragging, and \",(0,o.jsx)(e.code,{children:\"selectedColor\"}),\" (color selected on the \",(0,o.jsx)(e.code,{children:\"ColorPicker\"}),\") as props from Board.\"]}),`\n`,(0,o.jsx)(e.p,{children:\"On Board, when we start to mouseover (onMouseOver) and drag the mouse, we set isDragging to true, and when we let go of the mouse (onMouseUp) we set isDragging to false.\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"If isDragging is true and we are drawing, any Cell that we mouse over (onMouseOver) gets its cellColor state set to \",(0,o.jsx)(e.code,{children:\"selectedColor\"}),\". (It's okay to set a repeated color). We also need to add a mouseDown function to set the color of a cell right after we click.\"]}),`\n`,(0,o.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"We use the COLORS array passed to \",(0,o.jsx)(e.code,{children:\"ColorPicker\"}),' to render the color options that can be selected. We also need to show tabs for selecting \"Draw\" or \"Erase\".']}),`\n`,(0,o.jsx)(e.p,{children:\"In the Board component, to create a NxN board, we create a 2D Matrix Array by filling an array with N arrays that have N elements. (Array(n).fill(Array(n).fill(null)))\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"We map through the 2D Matrix and for each row array, we map and return each Cell component. (To create the checkerboard pattern we use style every other odd or even row with CSS pseudo-classes- ie. \",(0,o.jsx)(e.code,{children:\".grid__row--even .grid__cell:nth-child(odd)\"}),\")\"]}),`\n`,(0,o.jsxs)(e.p,{children:[\"When we click or drag the mouseover with a color, we set that cell's classname to \",(0,o.jsx)(e.code,{children:\"grid__cell ${color}\"}),\". In the CSS submodule, the Cell color classname \",(0,o.jsx)(e.code,{children:\".grid .grid__row .white\"}),\" has a higher number of selectors (3) than the grid background-color (2), so the selected cell color will have a higher CSS specificity order of precedence. Some alternative ways to style the cell with a color are inline styles, using the !important CSS rule, or using a CSS Id rule (not recommended).\"]}),`\n`,(0,o.jsx)(e.h3,{children:\"Explain some special functions\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"We can set isDrawing to true whenever a color is selected on \",(0,o.jsx)(e.code,{children:\"ColorPicker\"}),\" because it is assumed that we want to start drawing on the board.\"]}),`\n`,(0,o.jsx)(e.p,{children:\"When the Erase option is selected (!isDrawing), we set the cellColor in Cell to null. If the cellColor is null, we don't name a color to the cell classname so it defaults to the grid background color.\"}),`\n`,(0,o.jsx)(p,{}),`\n`,(0,o.jsx)(m,{})]})}function O(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(f,n)})):f(n)}var S=O;return j(W);})();\n;return Component;"
}