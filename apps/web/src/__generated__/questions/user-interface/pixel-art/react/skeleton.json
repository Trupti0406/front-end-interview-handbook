{
  "author": "yangshun",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/pixel-art-react-skeleton\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\",\n      \"react-app/jest\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import { useState } from 'react';\nimport Board from './Board';\nimport ColorPicker from './ColorPicker';\n\nimport './styles.css';\n\nconst COLORS = [\n  'white',\n  'gray',\n  'red',\n  'orange',\n  'yellow',\n  'green',\n  'teal',\n  'blue',\n  'purple',\n  'beige',\n];\n\nexport default function App() {\n  const [selectedColor, setColor] = useState(COLORS[0]);\n  const [isDrawing, setIsDrawing] = useState(true);\n  return (\n    <div>\n      <Board selectedColor={selectedColor} isDrawing={isDrawing} />\n      <ColorPicker\n        colors={COLORS}\n        selectedColor={selectedColor}\n        setColor={setColor}\n        isDrawing={isDrawing}\n        setIsDrawing={setIsDrawing}\n      />\n    </div>\n  );\n}\n"
    },
    "/src/Board.js": {
      "code": "import { useState } from 'react';\nimport Cell from './Cell';\n\nconst size = 15;\n\nexport default function Board({ selectedColor, isDrawing }) {\n  const grid = Array(size).fill(Array(size).fill(null));\n  const [isDragging, setIsDragging] = useState(false);\n\n  return (\n    <div className=\"grid\">\n      {grid.map((row, rowIndex) => {\n        const rowClassName = `grid__row ${\n          rowIndex % 2 === 0 ? 'grid__row--even' : 'grid__row--odd'\n        }`;\n        return (\n          <div\n            className={rowClassName}\n            key={rowIndex}\n            onMouseDown={() => setIsDragging(true)}\n            onMouseUp={() => setIsDragging(false)}>\n            {row.map((cell, cellIndex) => (\n              <Cell\n                key={cellIndex}\n                isDragging={isDragging}\n                isDrawing={isDrawing}\n                selectedColor={selectedColor}\n              />\n            ))}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n"
    },
    "/src/Cell.js": {
      "code": "import { useState } from 'react';\n\nexport default function Cell({ isDragging, isDrawing, selectedColor }) {\n  const [cellColor, setCellColor] = useState(null);\n\n  function onCellMouseOver() {\n    if (isDragging && isDrawing) {\n      setCellColor(selectedColor);\n    } else if (isDragging && !isDrawing) {\n      setCellColor(null);\n    }\n  }\n\n  function onCellClick() {\n    if (isDrawing) {\n      setCellColor(selectedColor);\n    } else {\n      setCellColor(null);\n    }\n  }\n\n  const cellClassName = cellColor === null ? '' : cellColor;\n  return (\n    <button\n      onMouseDown={onCellClick}\n      onMouseOver={onCellMouseOver}\n      className={`grid__cell ${cellClassName}`}\n    />\n  );\n}\n"
    },
    "/src/ColorPicker.js": {
      "code": "export default function ColorPicker({\n  colors,\n  selectedColor,\n  setColor,\n  isDrawing,\n  setIsDrawing,\n}) {\n  function onColorClick(color) {\n    setIsDrawing(true);\n    setColor(color);\n  }\n\n  function buttonClassName(drawingButtonClicked) {\n    if (isDrawing === drawingButtonClicked) {\n      return 'color-picker__option color-picker__option--selected';\n    } else {\n      return 'color-picker__option color-picker__option--not-selected';\n    }\n  }\n\n  return (\n    <div className=\"color-picker-container\">\n      <div>\n        <button\n          onClick={() => setIsDrawing(true)}\n          className={buttonClassName(true)}>\n          Draw\n        </button>\n        <button\n          onClick={() => setIsDrawing(false)}\n          className={buttonClassName(false)}>\n          Erase\n        </button>\n      </div>\n      <div className=\"color-picker\">\n        {colors.map((color, index) => {\n          const colorSelectedClassName =\n            color === selectedColor ? 'color--selected' : 'color--not-selected';\n          const colorClassName = `color ${colorSelectedClassName} ${color}`;\n          return (\n            <button\n              key={index}\n              className={colorClassName}\n              onClick={() => onColorClick(color)}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.color-picker-container {\n  display: flex;\n  gap: 20px;\n}\n\n.color-picker__option {\n  height: 36px;\n  background-color: transparent;\n  border: 2px solid black;\n  font-size: 14px;\n}\n\n.color-picker__option--selected {\n  background-color: black;\n  color: white;\n}\n\n.color-picker {\n  display: flex;\n}\n\n.color {\n  width: 20px;\n  height: 20px;\n}\n\n.color--not-selected {\n  border: 2px solid transparent;\n}\n\n.white {\n  border: 2px solid #e9ecef;\n}\n\n.color--selected {\n  border: 2px solid black;\n}\n\n.grid {\n  margin-bottom: 20px;\n}\n\n.grid__row {\n  display: flex;\n}\n\n.grid__cell {\n  width: 20px;\n  height: 20px;\n  border: 0;\n  background-color: transparent;\n}\n\n.grid__row--even .grid__cell:nth-child(odd) {\n  background-color: #e9ecef;\n}\n\n.grid__row--odd .grid__cell:nth-child(even) {\n  background-color: #e9ecef;\n}\n\n.white,\n.grid .grid__row .white {\n  background-color: #ffffff;\n}\n\n.gray,\n.grid .grid__row .gray {\n  background-color: #e9ecef;\n}\n\n.red,\n.grid .grid__row .red {\n  background-color: #cc0001;\n}\n\n.orange .grid .grid__row .orange {\n  background-color: #fb940b;\n}\n\n.yellow,\n.grid .grid__row .yellow {\n  background-color: #ffff01;\n}\n\n.green,\n.grid .grid__row .green {\n  background-color: #01cc00;\n}\n\n.teal,\n.grid .grid__row .teal {\n  background-color: #38d9a9;\n}\n\n.blue,\n.grid .grid__row .blue {\n  background-color: #228be6;\n}\n\n.purple,\n.grid .grid__row .purple {\n  background-color: #7950f2;\n}\n\n.beige,\n.grid .grid__row .beige {\n  background-color: #ff8787;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app"
  },
  "writeup": "var Component=(()=>{var f=Object.create;var t=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var j=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),D=(i,e)=>{for(var l in e)t(i,l,{get:e[l],enumerable:!0})},o=(i,e,l,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of g(e))!b.call(i,r)&&r!==l&&t(i,r,{get:()=>e[r],enumerable:!(s=x(e,r))||s.enumerable});return i};var d=(i,e,l)=>(l=i!=null?f(w(i)):{},o(e||!i||!i.__esModule?t(l,\"default\",{value:i,enumerable:!0}):l,i)),v=i=>o(t({},\"__esModule\",{value:!0}),i);var a=j((E,h)=>{h.exports=_jsx_runtime});var y={};D(y,{default:()=>C});var c=d(a());var n=d(a());function u(i){let e=Object.assign({p:\"p\",img:\"img\",h2:\"h2\",ul:\"ul\",li:\"li\",a:\"a\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Build a pixel art drawing tool where users can paint pixels with selected colors and also erase colored pixels.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/img/questions/pixel-art/pixel-art-example.png\",alt:\"Pixel art example\"})}),`\n`,(0,n.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"The canvas is a 15 x 15 grid of pixels. Each pixel is 20px x 20px.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Modes\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:'There are 2 modes available: \"Draw\" and \"Erase\"'}),`\n`,(0,n.jsx)(e.li,{children:\"Clicking on the individual tab item will activate the respective mode.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Drawing mode\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"A color can be selected from the list of colors. Selected colors will have a black border to indicate the selected state.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Dragging on the canvas will fill the underlying pixel with the selected color.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Erasing mode\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Dragging on the canvas while this mode is selected will remove the fill from the underlying pixels.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Colors:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"White: #ffffff\"}),`\n`,(0,n.jsx)(e.li,{children:\"Gray: #e9ecef\"}),`\n`,(0,n.jsx)(e.li,{children:\"Red: #cc0001\"}),`\n`,(0,n.jsx)(e.li,{children:\"Orange: #fb940b\"}),`\n`,(0,n.jsx)(e.li,{children:\"Yellow: #ffff01\"}),`\n`,(0,n.jsx)(e.li,{children:\"Green: #01cc00\"}),`\n`,(0,n.jsx)(e.li,{children:\"Teal: #38d9a9\"}),`\n`,(0,n.jsx)(e.li,{children:\"Blue: #228be6\"}),`\n`,(0,n.jsx)(e.li,{children:\"Purple: #7950f2\"}),`\n`,(0,n.jsx)(e.li,{children:\"Beige: #ff8787\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Source\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"This question is adapted from \",(0,n.jsx)(e.a,{href:\"https://sadanandpai.github.io/frontend-mini-challenges/src/mc/pixel-art/\",children:\"Front End Mini Challenges\"}),\".\"]})]})}function _(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(u,i)})):u(i)}var m=_;function p(i){return(0,c.jsx)(m,{})}function M(i={}){let{wrapper:e}=i.components||{};return e?(0,c.jsx)(e,Object.assign({},i,{children:(0,c.jsx)(p,i)})):p(i)}var C=M;return v(y);})();\n;return Component;"
}