{
  "files": {
    "/jsconfig.json": {
      "code": "{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\"\n  },\n  \"include\": [\"src\"]\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-challenges/product-listing-section-solution\",\n  \"version\": \"0.0.1\",\n  \"dependencies\": {\n    \"clsx\": \"^2.1.1\",\n    \"react-icons\": \"^5.2.1\",\n    \"react-router-dom\": \"^6.23.1\",\n    \"usehooks-ts\": \"^3.1.0\",\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta\n      name=\"description\"\n      content=\"Web site created using create-react-app\" />\n    <title>Product Listing Section</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import { Route, Routes } from 'react-router-dom';\n\nimport ProductListingPage from 'src/pages/ProductListing';\nimport ProductDetailPage from './pages/ProductDetail';\nimport Layout from './Layout';\n\nfunction App() {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Layout />}>\n        <Route path=\"/products/:productId\" element={<ProductDetailPage />} />\n        <Route path=\"/\" element={<ProductListingPage />} />\n      </Route>\n    </Routes>\n  );\n}\n\nexport default App;\n"
    },
    "/src/components/CartControl/CartControl.jsx": {
      "code": "import clsx from 'clsx';\nimport { RiAddFill, RiSubtractFill } from 'react-icons/ri';\nimport Tooltip from '../ui/Tooltip';\n\nconst CartControl = ({ quantity, decrement, increment, availableStock }) => {\n  const disabledDecrement = quantity === 1;\n  const disabledIncrement = quantity >= availableStock;\n\n  return (\n    <div\n      className={clsx(\n        'w-[125px] h-9',\n        'flex justify-center items-center gap-3',\n        'py-0.5 px-[5px]',\n        'bg-neutral-50 rounded-md border border-neutral-200'\n      )}\n      role=\"group\"\n      aria-label=\"Product Quantity control\">\n      <button\n        type=\"button\"\n        className={clsx(\n          'flex justify-center items-center rounded',\n          'text-neutral-600 disabled:text-neutral-400',\n          'cursor-pointer disabled:pointer-events-none'\n        )}\n        disabled={disabledDecrement}\n        onClick={decrement}\n        aria-label=\"Decrease quantity\">\n        <RiSubtractFill className=\"size-5 p-0.5 shrink-0\" />\n      </button>\n      <span\n        className=\"flex-1 text-center font-medium text-sm text-neutral-600\"\n        aria-live=\"polite\">\n        {quantity}\n      </span>\n      <Tooltip content=\"Insufficient stock\" show={disabledIncrement}>\n        <button\n          type=\"button\"\n          className={clsx(\n            'flex justify-center items-center rounded',\n            'text-neutral-600 disabled:text-neutral-400',\n            'cursor-pointer disabled:pointer-events-none'\n          )}\n          disabled={disabledIncrement}\n          onClick={increment}\n          aria-label=\"Increase quantity\">\n          <RiAddFill className=\"size-5 p-0.5 shrink-0\" />\n        </button>\n      </Tooltip>\n    </div>\n  );\n};\n\nexport default CartControl;\n"
    },
    "/src/components/CartControl/index.js": {
      "code": "import CartControl from './CartControl';\n\nexport default CartControl;\n"
    },
    "/src/components/ProductCard/index.js": {
      "code": "import ProductCard from './ProductCard';\n\nexport default ProductCard;\n"
    },
    "/src/components/ProductCard/ProductCard.jsx": {
      "code": "import clsx from 'clsx';\nimport { useCallback, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport Link from '../ui/Link';\nimport ColorSwatches from '../ui/ColorSwatches';\n\nimport { COLORS } from 'src/constants';\nimport { getUnavailableColors } from 'src/pages/ProductDetail/utils';\n\nconst ProductCard = ({ product }) => {\n  const navigate = useNavigate();\n  const { images, name, inventory, colors } = product;\n  const { discount_percentage, sale_price, list_price, color } = inventory[0];\n\n  const hasDiscount = !!discount_percentage;\n\n  const unavailableColors = useMemo(\n    () => getUnavailableColors(product),\n    [product],\n  );\n\n  const redirectUrl = `/products/${product.product_id}`;\n\n  const handleKeyDown = useCallback(\n    (event) => {\n      if (event.key === 'Enter') {\n        navigate(redirectUrl);\n      }\n    },\n    [navigate, redirectUrl],\n  );\n\n  return (\n    <div\n      tabIndex={0}\n      onKeyDown={handleKeyDown}\n      className={clsx(\n        'relative w-full',\n        'group',\n        'flex flex-col gap-4',\n        'rounded-lg',\n        'outline-none',\n        'focus:ring-4 focus:ring-indigo-600/[.12]',\n      )}>\n      <img\n        src={images[0].image_url}\n        alt={`${name}'s product preview`}\n        loading=\"lazy\"\n        className={clsx(\n          'h-[225px] w-full rounded-lg object-cover md:h-[300px]',\n        )}\n      />\n      <div className={clsx('flex flex-col', 'min-h-[152px]')}>\n        <span className=\"mb-0.5 text-xs text-neutral-600\">\n          {COLORS[color]?.label}\n        </span>\n        <Link\n          to={redirectUrl}\n          tabIndex={-1}\n          variant=\"unstyled\"\n          className={clsx(\n            'text-lg font-medium text-neutral-900',\n            'group-hover:text-indigo-700',\n          )}>\n          <span aria-hidden={true} className=\"absolute inset-0\" />\n          {name}\n        </Link>\n        <div className=\"mt-3 flex items-center gap-2\">\n          <span className=\"text-lg text-neutral-500\">\n            ${hasDiscount ? sale_price : list_price}\n          </span>\n          {hasDiscount && (\n            <span className=\"text-xs text-neutral-600 line-through\">\n              ${list_price}\n            </span>\n          )}\n        </div>\n        <div className=\"mt-3 flex flex-wrap gap-1\">\n          {colors.map((color) => (\n            <ColorSwatches\n              key={color}\n              color={COLORS[color].value}\n              size=\"sm\"\n              outOfStock={unavailableColors.includes(color)}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProductCard;\n"
    },
    "/src/components/ui/Accordion/Accordion.jsx": {
      "code": "import clsx from 'clsx';\nimport { useState, useRef, createContext, useContext } from 'react';\nimport { RiAddCircleLine, RiIndeterminateCircleLine } from 'react-icons/ri';\n\nconst AccordionItemContext = createContext();\n\nconst AccordionItem = ({ children, id }) => {\n  const [isOpen, setIsOpen] = useState(true);\n\n  return (\n    <div>\n      <AccordionItemContext.Provider value={{ id, isOpen, setIsOpen }}>\n        {children}\n      </AccordionItemContext.Provider>\n    </div>\n  );\n};\n\nconst AccordionTrigger = ({ children }) => {\n  const { id, isOpen, setIsOpen } = useContext(AccordionItemContext);\n  const Icon = isOpen ? RiIndeterminateCircleLine : RiAddCircleLine;\n  return (\n    <button\n      className={clsx(\n        'w-full',\n        'flex gap-6 justify-between items-center',\n        'focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n        'text-left text-lg text-neutral-900 font-medium'\n      )}\n      onClick={() => setIsOpen(!isOpen)}\n      aria-expanded={isOpen}\n      aria-controls={`accordion-content-${id}`}\n      id={`accordion-header-${id}`}>\n      <span>{children}</span>\n      <Icon className=\"size-6 text-neutral-400\" />\n    </button>\n  );\n};\n\nconst AccordionContent = ({ children }) => {\n  const contentRef = useRef(null);\n  const { id, isOpen } = useContext(AccordionItemContext);\n\n  return (\n    <div\n      id={`accordion-content-${id}`}\n      role=\"region\"\n      aria-labelledby={`accordion-header-${id}`}\n      className={clsx(\n        'overflow-hidden transition-max-height duration-300',\n        'pr-12',\n        isOpen && 'mt-2'\n      )}\n      style={{\n        maxHeight: isOpen ? `${contentRef.current?.scrollHeight}px` : '0',\n      }}\n      ref={contentRef}>\n      {children}\n    </div>\n  );\n};\n\nconst Accordion = ({ children }) => {\n  return (\n    <div className=\"w-full\">\n      {children.map((item, index) => (\n        <div key={item.props.id}>\n          {item}\n          {index !== children.length - 1 && (\n            <div className=\"h-[1px] bg-neutral-200 mt-8 mb-[23px]\" />\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\n"
    },
    "/src/components/ui/Accordion/index.js": {
      "code": "import * as Accordion from './Accordion';\n\nexport * from './Accordion';\nexport default Accordion;\n"
    },
    "/src/components/ui/Badge/Badge.jsx": {
      "code": "import clsx from 'clsx';\n\nconst sizeClasses = {\n  sm: clsx('h-5', 'py px-[5px]', 'text-xs'),\n  md: clsx('h-6', 'py px-[7px]', 'text-sm'),\n  lg: clsx('h-7', 'py-[3px] px-[9px]', 'text-sm'),\n};\n\nconst variantClasses = {\n  neutral: clsx('bg-gray-50', 'border-neutral-200', 'text-neutral-600'),\n  danger: clsx('bg-red-50', 'border-red-200', 'text-red-600'),\n  warning: clsx('bg-amber-50', 'border-amber-200', 'text-amber-700'),\n  success: clsx('bg-green-50', 'border-green-200', 'text-green-700'),\n  brand: clsx('bg-indigo-50', 'border-indigo-200', 'text-indigo-700'),\n};\n\nconst Badge = ({ label, size = 'md', variant = 'neutral', className }) => {\n  const commonClasses = clsx('rounded-full text-center border');\n  return (\n    <div\n      className={clsx(\n        commonClasses,\n        sizeClasses[size],\n        variantClasses[variant],\n        className\n      )}>\n      {label}\n    </div>\n  );\n};\n\nexport default Badge;\n"
    },
    "/src/components/ui/Badge/index.js": {
      "code": "import Badge from './Badge';\n\nexport default Badge;\n"
    },
    "/src/components/ui/Button/Button.jsx": {
      "code": "import clsx from 'clsx';\n\nimport Link from 'src/components/ui/Link';\n\nconst paddingClasses = {\n  md: 'px-3.5 py-2.5',\n  lg: 'px-4 py-2.5',\n  xl: 'px-5 py-3',\n  '2xl': 'px-6 py-4',\n};\n\n// We need this because secondary button has border\nconst secondaryVariantPaddingClasses = {\n  md: 'px-[13px] py-[9px]',\n  lg: 'px-[15px] py-[9px]',\n  xl: 'px-[19px] py-[11px]',\n  '2xl': 'px-[23px] py-[15px]',\n};\n\nconst fontSizeClasses = {\n  md: 'text-sm',\n  lg: 'text-base',\n  xl: 'text-base',\n  '2xl': 'text-lg',\n};\n\nconst spacingClasses = {\n  md: 'gap-x-1.5',\n  lg: 'gap-x-2',\n  xl: 'gap-x-2',\n  '2xl': 'gap-x-3',\n};\n\nconst heightClasses = {\n  md: 'h-10',\n  lg: 'h-11',\n  xl: 'h-12',\n  '2xl': 'h-15',\n};\n\nconst iconOnlySizeClasses = {\n  md: 'size-10',\n  lg: 'size-11',\n  xl: 'size-12',\n  '2xl': 'size-14',\n};\n\nconst iconSizeClasses = {\n  md: 'size-5',\n  lg: 'size-5',\n  xl: 'size-5',\n  '2xl': 'size-6',\n};\n\nconst variantClasses = {\n  primary: clsx(\n    'border-none',\n    'bg-indigo-700',\n    'shadow-custom',\n    'text-white',\n    'hover:bg-indigo-800 focus:bg-indigo-800'\n  ),\n  secondary: clsx(\n    'border border-neutral-200',\n    'bg-white',\n    'shadow-custom',\n    'text-neutral-900',\n    'hover:bg-neutral-50 focus:bg-neutral-50'\n  ),\n  tertiary: clsx(\n    'border-none',\n    'text-indigo-700',\n    'hover:bg-neutral-50 focus:bg-neutral-50'\n  ),\n  danger: clsx(\n    'border-none',\n    'bg-red-600',\n    'text-white',\n    'hover:bg-red-700 focus:bg-red-700 focus:outline-none focus-visible:ring-4 focus-visible:ring-red-600/[.12]'\n  ),\n  link: clsx(\n    'text-indigo-700',\n    'hover:text-indigo-800 focus:text-indigo-800',\n    'rounded focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]'\n  ),\n};\n\nconst variantDisabledClasses = {\n  primary: clsx(\n    'disabled:bg-neutral-100',\n    'disabled:text-neutral-400',\n    'disabled:shadow-none'\n  ),\n  secondary: clsx(\n    'disabled:bg-neutral-100',\n    'disabled:text-neutral-400',\n    'disabled:shadow-none'\n  ),\n  tertiary: clsx('disabled:bg-none', 'disabled:text-neutral-400'),\n  danger: clsx('disabled:bg-none', 'disabled:text-neutral-400'),\n  link: clsx('disabled:text-neutral-400'),\n};\n\nconst Button = ({\n  label,\n  className,\n  isDisabled,\n  startIcon: StartIcon,\n  endIcon: EndIcon,\n  isLabelHidden,\n  size = 'md',\n  variant = 'primary',\n  iconClassName,\n  href,\n  ...props\n}) => {\n  const commonClasses = clsx(\n    'inline-flex items-center justify-center rounded font-medium outline-none cursor-pointer',\n    'focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n    'transition-colors',\n    'text-nowrap'\n  );\n\n  if (href) {\n    return (\n      <Link\n        to={href}\n        variant={variant}\n        disabled={isDisabled}\n        className={clsx(commonClasses, spacingClasses[size], className)}\n        {...props}>\n        {StartIcon && (\n          <StartIcon\n            className={clsx('size-5 p-0.5 shrink-0', iconClassName)}\n            aria-hidden=\"true\"\n          />\n        )}\n        {label}\n        {EndIcon && (\n          <EndIcon\n            className={clsx('size-5 p-0.5 shrink-0', iconClassName)}\n            aria-hidden=\"true\"\n          />\n        )}\n      </Link>\n    );\n  }\n\n  const children = isLabelHidden ? (\n    (\n      <StartIcon\n        className={clsx('shrink-0', iconSizeClasses[size], iconClassName)}\n        aria-hidden=\"true\"\n      />\n    ) || (\n      <EndIcon\n        className={clsx('shrink-0', iconSizeClasses[size], iconClassName)}\n        aria-hidden=\"true\"\n      />\n    )\n  ) : (\n    <>\n      {StartIcon && (\n        <StartIcon\n          className={clsx('size-5 p-0.5 shrink-0', iconClassName)}\n          aria-hidden=\"true\"\n        />\n      )}\n      {label}\n      {EndIcon && (\n        <EndIcon\n          className={clsx('size-5 p-0.5 shrink-0', iconClassName)}\n          aria-hidden=\"true\"\n        />\n      )}\n    </>\n  );\n\n  return (\n    <button\n      className={clsx(\n        commonClasses,\n        variant !== 'link' && heightClasses[size],\n        variant !== 'link' &&\n          (variant === 'secondary'\n            ? secondaryVariantPaddingClasses[size]\n            : paddingClasses[size]),\n        fontSizeClasses[size],\n        spacingClasses[size],\n        isLabelHidden && iconOnlySizeClasses[size],\n        variantClasses[variant],\n        variantDisabledClasses[variant],\n        isDisabled && 'pointer-events-none',\n        className\n      )}\n      disabled={isDisabled}\n      {...props}>\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n"
    },
    "/src/components/ui/Button/index.js": {
      "code": "import Button from './Button';\n\nexport default Button;\n"
    },
    "/src/components/ui/CheckboxInput/CheckboxInput.jsx": {
      "code": "import { useId } from 'react';\nimport clsx from 'clsx';\n\nconst CheckboxInput = ({ value, defaultValue, disabled, label, onChange }) => {\n  const id = useId();\n\n  return (\n    <div className=\"flex items-center gap-3\">\n      <div className=\"flex size-6 items-center justify-center\">\n        <input\n          checked={value}\n          className={clsx(\n            'size-4',\n            'rounded',\n            'text-indigo-600',\n            'border border-neutral-300',\n            'bg-transparent',\n            ['disabled:!bg-neutral-200', 'disabled:cursor-not-allowed'],\n            'focus:ring-4 focus:ring-offset-0 focus:ring-indigo-600/[.12] focus:outline-none focus:border-indigo-600'\n          )}\n          defaultChecked={defaultValue}\n          disabled={disabled}\n          id={id}\n          type=\"checkbox\"\n          onChange={event => {\n            if (!onChange) {\n              return;\n            }\n\n            onChange(event.target.checked, event);\n          }}\n        />\n      </div>\n      <label\n        htmlFor={id}\n        className={clsx(\n          'block',\n          disabled ? 'text-neutral-400' : 'text-neutral-600'\n        )}>\n        {label}\n      </label>\n    </div>\n  );\n};\n\nexport default CheckboxInput;\n"
    },
    "/src/components/ui/CheckboxInput/index.js": {
      "code": "import CheckboxInput from './CheckboxInput';\n\nexport default CheckboxInput;\n"
    },
    "/src/components/ui/ColorSwatches/ColorSwatches.jsx": {
      "code": "import clsx from 'clsx';\n\nconst outerSizeClasses = {\n  md: 'size-[56.67px]',\n  sm: 'size-6',\n};\n\nconst innerSizeClasses = {\n  md: 'size-[38px]',\n  sm: 'size-4',\n};\n\nconst ringSizeClasses = {\n  md: 'focus:ring-[9.33px]',\n  sm: 'focus:ring-4',\n};\n\nconst strokeLineClasses = {\n  md: 'h-0.5 w-11',\n  sm: 'h-px w-5',\n};\n\nconst ColorSwatches = ({\n  color,\n  selected,\n  onClick,\n  outOfStock,\n  size = 'md',\n  type = 'radio',\n}) => {\n  const readOnly = !onClick || outOfStock;\n\n  return (\n    <label\n      key={color}\n      aria-label={color}\n      className={clsx(\n        'flex items-center justify-center',\n        'rounded-full',\n        outerSizeClasses[size],\n        readOnly ? 'pointer-events-none' : 'cursor-pointer'\n      )}>\n      <input\n        type={type}\n        name=\"color-choice\"\n        value={color}\n        checked={selected}\n        className=\"sr-only\"\n        onChange={() => {\n          if (!onClick) {\n            return;\n          }\n          onClick(color);\n        }}\n        tabIndex={-1}\n        disabled={outOfStock}\n      />\n      <div\n        aria-hidden=\"true\"\n        className={clsx(\n          'relative',\n          'flex items-center justify-center',\n          'rounded-full',\n          innerSizeClasses[size],\n          color === '#fff' && 'border border-neutral-200',\n          selected\n            ? 'outline outline-1 outline-indigo-600 border-2 border-white'\n            : !readOnly && [\n                'hover:border-2 hover:border-indigo-200',\n                'focus:outline-none focus:border-none focus:ring-indigo-600/[.12]',\n                ringSizeClasses[size],\n              ]\n        )}\n        style={{ backgroundColor: color }}\n        tabIndex={selected || outOfStock || readOnly ? -1 : 0}\n        onKeyDown={e => {\n          if (e.key === 'Enter' || e.key === ' ') {\n            onClick(color);\n          }\n        }}>\n        {selected && !outOfStock && (\n          <svg\n            width=\"28\"\n            height=\"28\"\n            viewBox=\"0 0 28 28\"\n            fill=\"none\"\n            className={clsx(color === '#fff' ? 'fill-black' : 'fill-white')}\n            xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M11.6673 17.6993L22.3918 6.97485L24.0417 8.62477L11.6673 20.9991L4.24268 13.5745L5.89259 11.9246L11.6673 17.6993Z\" />\n          </svg>\n        )}\n        {outOfStock && (\n          <div\n            className={clsx(\n              'absolute bg-neutral-600 -rotate-45',\n              strokeLineClasses[size]\n            )}\n          />\n        )}\n      </div>\n    </label>\n  );\n};\n\nexport default ColorSwatches;\n"
    },
    "/src/components/ui/ColorSwatches/index.js": {
      "code": "import ColorSwatches from './ColorSwatches';\n\nexport default ColorSwatches;\n"
    },
    "/src/components/ui/Dropdown/Dropdown.jsx": {
      "code": "import clsx from 'clsx';\nimport {\n  createContext,\n  useContext,\n  useEffect,\n  useId,\n  useRef,\n  useState,\n} from 'react';\nimport { RiArrowDownSLine } from 'react-icons/ri';\n\nimport Button from '../Button';\n\nconst DropdownContext = createContext();\n\nconst DropdownItem = ({ children, isSelected, onSelect }) => {\n  const { setIsOpen, isOpen } = useContext(DropdownContext);\n  const handleOptionClick = () => {\n    setIsOpen(false);\n    if (onSelect) {\n      onSelect();\n    }\n  };\n\n  return (\n    <div\n      onClick={handleOptionClick}\n      className={clsx(\n        'block text-sm',\n        'cursor-pointer',\n        'rounded',\n        'hover:bg-neutral-50',\n        'border-none outline-none',\n        'focus:ring focus:ring-indigo-200',\n        'p-2',\n        isSelected ? 'text-indigo-700 font-medium' : 'text-neutral-600'\n      )}\n      role=\"menuitem\"\n      tabIndex={isOpen ? 0 : -1}\n      id=\"menu-item-0\">\n      {children}\n    </div>\n  );\n};\n\nconst Dropdown = ({ children }) => {\n  const id = useId();\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef(null);\n\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  return (\n    <div className=\"relative inline-block text-left\" ref={dropdownRef}>\n      <div>\n        <Button\n          type=\"button\"\n          label=\"Sort by\"\n          onClick={() => setIsOpen(!isOpen)}\n          id={id}\n          aria-expanded=\"true\"\n          aria-haspopup=\"true\"\n          variant=\"secondary\"\n          endIcon={RiArrowDownSLine}\n        />\n      </div>\n\n      <div\n        className={clsx(\n          'absolute right-0 z-dropdown mt-2 w-56 origin-top-right max-h-50',\n          'border border-[#e6e6e6]',\n          'rounded-lg bg-white shadow-lg',\n          'transition ease-in-out duration-300 transform origin-top',\n          isOpen ? 'scale-y-100 opacity-100' : 'scale-y-0 opacity-0'\n        )}\n        role=\"menu\"\n        aria-orientation=\"vertical\"\n        aria-labelledby={id}\n        tabIndex={-1}>\n        <div className=\"flex flex-col gap-2 p-2\" role=\"none\">\n          <DropdownContext.Provider value={{ isOpen, setIsOpen }}>\n            {children}\n          </DropdownContext.Provider>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Dropdown, DropdownItem };\n"
    },
    "/src/components/ui/Dropdown/index.js": {
      "code": "import * as Dropdown from './Dropdown';\n\nexport * from './Dropdown';\nexport default Dropdown;\n"
    },
    "/src/components/ui/Link/index.js": {
      "code": "import Link from './Link';\n\nexport default Link;\n"
    },
    "/src/components/ui/Link/Link.jsx": {
      "code": "import clsx from 'clsx';\nimport { Link as RouterLink } from 'react-router-dom';\n\nconst linkVariantClasses = {\n  primary: clsx(\n    'text-indigo-700',\n    'hover:text-indigo-800 focus:text-indigo-800',\n    'rounded focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n    'px-0.5'\n  ),\n  gray: clsx(\n    'text-neutral-600',\n    'hover:text-neutral-900 focus:text-neutral-900',\n    'rounded focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n    'px-0.5'\n  ),\n  unstyled: '',\n};\n\nconst Link = ({\n  children,\n  disabled,\n  className,\n  variant = 'primary',\n  ...props\n}) => {\n  return (\n    <RouterLink\n      {...props}\n      className={clsx(\n        'font-medium rounded',\n        linkVariantClasses[variant],\n        {\n          'pointer-events-none text-neutral-400': disabled,\n        },\n        className\n      )}>\n      {children}\n    </RouterLink>\n  );\n};\n\nexport default Link;\n"
    },
    "/src/components/ui/Rating/index.js": {
      "code": "import StarRating from './Rating';\n\nexport default StarRating;\n"
    },
    "/src/components/ui/Rating/Rating.jsx": {
      "code": "import { useState } from 'react';\nimport clsx from 'clsx';\n\nimport Star from './Star';\n\nconst Rating = ({ value, max = 5, onChange, selected, showHover }) => {\n  const [hoveredIndex, setHoveredIndex] = useState(null);\n\n  const readOnlyMode = !onChange;\n\n  return (\n    <div className=\"flex items-center gap-1 group star-rating\">\n      {Array.from({ length: max }).map((_, index) => (\n        <span\n          key={index}\n          tabIndex={readOnlyMode ? -1 : 0}\n          onMouseEnter={() => !readOnlyMode && setHoveredIndex(index)}\n          onMouseLeave={() => !readOnlyMode && setHoveredIndex(null)}\n          className={clsx(\n            !readOnlyMode && 'cursor-pointer',\n            selected ? 'text-yellow-500' : 'text-yellow-400'\n          )}\n          onClick={() => onChange?.(index + 1)}>\n          <Star\n            filled={\n              hoveredIndex != null ? index <= hoveredIndex : value >= index + 1\n            }\n            halfFilled={value < index + 1 && value > index}\n            className={clsx(showHover && 'group-hover:stroke-indigo-200')}\n          />\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Rating;\n"
    },
    "/src/components/ui/Rating/Star.jsx": {
      "code": "import clsx from 'clsx';\n\nconst Star = ({ filled, halfFilled, className }) => {\n  return filled ? (\n    <svg\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      className={clsx('stroke-current fill-current', className)}\n      xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        className=\"star-icon\"\n        d=\"M9 0.80198L11.0661 5.76946C11.2101 6.11569 11.5357 6.35226 11.9095 6.38223L17.2723 6.81216L13.1864 10.3122C12.9016 10.5561 12.7773 10.9389 12.8643 11.3037L14.1126 16.5368L9.52125 13.7325C9.20124 13.537 8.79876 13.537 8.47874 13.7325L3.88743 16.5368L5.13574 11.3037C5.22275 10.9389 5.09838 10.5561 4.81359 10.3122L0.727691 6.81216L6.0905 6.38223C6.46429 6.35226 6.7899 6.11569 6.93391 5.76946L9 0.80198Z\"\n      />\n    </svg>\n  ) : halfFilled ? (\n    <svg\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\">\n      <g clipPath=\"url(#clip0_3052_704)\">\n        <path\n          d=\"M9.53834 1.60996C9.70914 1.19932 10.2909 1.19932 10.4617 1.60996L12.5278 6.57744C12.5998 6.75056 12.7626 6.86885 12.9495 6.88383L18.3123 7.31376C18.7556 7.3493 18.9354 7.90256 18.5976 8.19189L14.5117 11.6919C14.3693 11.8139 14.3071 12.0053 14.3506 12.1876L15.5989 17.4208C15.7021 17.8534 15.2315 18.1954 14.8519 17.9635L10.2606 15.1592C10.1006 15.0615 9.89938 15.0615 9.73937 15.1592L5.14806 17.9635C4.76851 18.1954 4.29788 17.8534 4.40108 17.4208L5.64939 12.1876C5.69289 12.0053 5.6307 11.8139 5.48831 11.6919L1.40241 8.19189C1.06464 7.90256 1.24441 7.3493 1.68773 7.31376L7.05054 6.88383C7.23744 6.86885 7.40024 6.75056 7.47225 6.57744L9.53834 1.60996Z\"\n          fill=\"#E5E7EB\"\n        />\n        <g clipPath=\"url(#clip1_3052_704)\">\n          <path\n            d=\"M9.53834 1.60996C9.70914 1.19932 10.2909 1.19932 10.4617 1.60996L12.5278 6.57744C12.5998 6.75056 12.7626 6.86885 12.9495 6.88383L18.3123 7.31376C18.7556 7.3493 18.9354 7.90256 18.5976 8.19189L14.5117 11.6919C14.3693 11.8139 14.3071 12.0053 14.3506 12.1876L15.5989 17.4208C15.7021 17.8534 15.2315 18.1954 14.8519 17.9635L10.2606 15.1592C10.1006 15.0615 9.89938 15.0615 9.73937 15.1592L5.14806 17.9635C4.76851 18.1954 4.29788 17.8534 4.40108 17.4208L5.64939 12.1876C5.69289 12.0053 5.6307 11.8139 5.48831 11.6919L1.40241 8.19189C1.06464 7.90256 1.24441 7.3493 1.68773 7.31376L7.05054 6.88383C7.23744 6.86885 7.40024 6.75056 7.47225 6.57744L9.53834 1.60996Z\"\n            fill=\"#FACC15\"\n          />\n        </g>\n      </g>\n      <defs>\n        <clipPath id=\"clip0_3052_704\">\n          <rect width=\"20\" height=\"20\" fill=\"white\" />\n        </clipPath>\n        <clipPath id=\"clip1_3052_704\">\n          <rect width=\"10\" height=\"20\" fill=\"white\" />\n        </clipPath>\n      </defs>\n    </svg>\n  ) : (\n    <svg\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      className={clsx('stroke-gray-200 fill-gray-200', className)}\n      xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M9 0.80198L11.0661 5.76946C11.2101 6.11569 11.5357 6.35226 11.9095 6.38223L17.2723 6.81216L13.1864 10.3122C12.9016 10.5561 12.7773 10.9389 12.8643 11.3037L14.1126 16.5368L9.52125 13.7325C9.20124 13.537 8.79876 13.537 8.47874 13.7325L3.88743 16.5368L5.13574 11.3037C5.22275 10.9389 5.09838 10.5561 4.81359 10.3122L0.727691 6.81216L6.0905 6.38223C6.46429 6.35226 6.7899 6.11569 6.93391 5.76946L9 0.80198Z\" />\n    </svg>\n  );\n};\n\nexport default Star;\n"
    },
    "/src/components/ui/SlideOut/index.js": {
      "code": "import SlideOut from './SlideOut';\n\nexport default SlideOut;\n"
    },
    "/src/components/ui/SlideOut/SlideOut.jsx": {
      "code": "import { createPortal } from 'react-dom';\nimport clsx from 'clsx';\nimport { RiCloseLine } from 'react-icons/ri';\nimport { useEffect } from 'react';\n\nconst SlideOut = ({\n  children,\n  isShown,\n  trigger,\n  title,\n  onClose,\n  className,\n}) => {\n  useEffect(() => {\n    if (isShown) {\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'auto';\n    }\n    return () => {\n      document.body.style.overflow = 'auto';\n    };\n  }, [isShown]);\n\n  return (\n    <>\n      {trigger}\n\n      {isShown &&\n        createPortal(\n          <div\n            className={clsx(\n              'fixed inset-0  z-modal lg:hidden',\n              'bg-neutral-950 bg-opacity-70',\n              'flex items-center justify-center'\n            )}\n            role=\"dialog\"\n            aria-modal=\"true\">\n            <div\n              id=\"slideout\"\n              className={clsx(\n                'fixed inset-0 z-fixed bg-white max-w-[360px]',\n                'animate-slideout',\n                'overflow-auto',\n                className\n              )}>\n              <div\n                className={clsx(\n                  'z-sticky sticky top-0 bg-white p-6',\n                  'flex flex-col gap-6'\n                )}>\n                <div\n                  className={clsx(\n                    'flex items-center',\n                    !!title ? 'justify-between' : 'justify-end'\n                  )}>\n                  {title}\n                  <button\n                    onClick={onClose}\n                    aria-label=\"Close sideout\"\n                    type=\"button\"\n                    className={clsx(\n                      'text-neutral-600 rounded',\n                      'focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]'\n                    )}>\n                    <RiCloseLine className=\"size-5\" />\n                  </button>\n                </div>\n                <div className=\"h-[1px] bg-neutral-200 w-full\" />\n              </div>\n              <div className=\"px-6 pb-6\">{children}</div>\n            </div>\n          </div>,\n          document.body\n        )}\n    </>\n  );\n};\n\nexport default SlideOut;\n"
    },
    "/src/components/ui/Tooltip/index.js": {
      "code": "import Tooltip from './Tooltip';\n\nexport default Tooltip;\n"
    },
    "/src/components/ui/Tooltip/Tooltip.jsx": {
      "code": "import clsx from 'clsx';\nimport { useState } from 'react';\n\nconst Tooltip = ({ children, content, position = 'top', show = true }) => {\n  const [visible, setVisible] = useState(false);\n\n  const positions = {\n    top: 'bottom-full left-1/2 transform -translate-x-1/2 mb-2',\n    bottom: 'top-full left-1/2 transform -translate-x-1/2 mt-2',\n    left: 'right-full top-1/2 transform -translate-y-1/2 mr-2',\n    right: 'left-full top-1/2 transform -translate-y-1/2 ml-2',\n  };\n\n  const arrowPositions = {\n    top: 'bottom-[-4px] left-1/2 transform -translate-x-1/2 border-t-neutral-950 border-t-8 border-x-8 border-x-transparent',\n    bottom:\n      'top-[-4px] left-1/2 transform -translate-x-1/2 border-b-neutral-950 border-b-8 border-x-8 border-x-transparent',\n    left: 'right-[-4px] top-1/2 transform -translate-y-1/2 border-l-neutral-950 border-l-8 border-y-8 border-y-transparent',\n    right:\n      'left-[-4px] top-1/2 transform -translate-y-1/2 border-r-neutral-950 border-r-8 border-y-8 border-y-transparent',\n  };\n\n  return (\n    <div\n      className=\"relative flex items-center\"\n      onMouseEnter={() => show && setVisible(true)}\n      onMouseLeave={() => show && setVisible(false)}>\n      {children}\n      {visible && (\n        <div\n          className={clsx(\n            'absolute py-2 px-3 rounded-lg shadow-lg min-w-max max-w-xs',\n            'bg-neutral-950',\n            'text-white text-xs font-medium',\n            positions[position]\n          )}>\n          {content}\n          <div className={clsx('absolute', arrowPositions[position])} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Tooltip;\n"
    },
    "/src/constants.js": {
      "code": "export const COLORS = {\n  white: { value: '#fff', label: 'White' },\n  black: { value: '#000', label: 'Black' },\n  red: { value: '#DC2626', label: 'Red' },\n  orange: { value: '#EA580C', label: 'Orange' },\n  yellow: { value: '#F59E0B', label: 'Yellow' },\n  green: { value: '#10B981', label: 'Green' },\n  blue: { value: '#4F46E5', label: 'Blue' },\n  brown: { value: '#CA8A04', label: 'Brown' },\n  beige: { value: '#d2b08a', label: 'Beige' },\n  pink: { value: '#EC4899', label: 'Pink' },\n};\n\nexport const COLLECTIONS_OPTIONS = {\n  title: 'Collections',\n  key: 'collection',\n  items: [\n    {\n      name: 'Latest arrivals',\n      value: 'latest',\n    },\n    {\n      name: 'Urban Oasis',\n      value: 'urban',\n    },\n    {\n      name: 'Cozy Comfort',\n      value: 'cozy',\n    },\n    {\n      name: 'Fresh Fusion',\n      value: 'fresh',\n    },\n  ],\n};\n\nexport const CATEGORY_OPTIONS = {\n  title: 'Category',\n  key: 'category',\n  items: [\n    {\n      name: 'Unisex',\n      value: 'unisex',\n    },\n    {\n      name: 'Women',\n      value: 'women',\n    },\n    {\n      name: 'Men',\n      value: 'men',\n    },\n  ],\n};\n\nexport const COLORS_OPTIONS = {\n  title: 'Colors',\n  key: 'color',\n  items: [\n    {\n      color: COLORS.white.value,\n      value: 'white',\n    },\n    {\n      color: COLORS.black.value,\n      value: 'black',\n    },\n    {\n      color: COLORS.red.value,\n      value: 'red',\n    },\n    {\n      color: COLORS.orange.value,\n      value: 'orange',\n    },\n    {\n      color: COLORS.yellow.value,\n      value: 'yellow',\n    },\n    {\n      color: COLORS.green.value,\n      value: 'green',\n    },\n    {\n      color: COLORS.blue.value,\n      value: 'blue',\n    },\n    {\n      color: COLORS.brown.value,\n      value: 'brown',\n    },\n    {\n      color: COLORS.beige.value,\n      value: 'beige',\n    },\n    {\n      color: COLORS.pink.value,\n      value: 'pink',\n    },\n  ],\n};\n\nexport const RATING_OPTIONS = {\n  title: 'Rating',\n  key: 'rating',\n  items: [\n    {\n      value: 5,\n      name: '5 star rating',\n    },\n    {\n      value: 4,\n      name: '4 star rating',\n    },\n    {\n      value: 3,\n      name: '3 star rating',\n    },\n    {\n      value: 2,\n      name: '2 star rating',\n    },\n    {\n      value: 1,\n      name: '1 star rating',\n    },\n  ],\n};\n\nexport const SORT_OPTIONS = [\n  {\n    name: 'Newest',\n    value: 'created',\n    direction: 'desc',\n  },\n  {\n    name: 'Best rating',\n    value: 'rating',\n    direction: 'desc',\n  },\n  {\n    name: 'Most popular',\n    value: 'popularity',\n    direction: 'desc',\n  },\n  {\n    name: 'Price: Low to high',\n    value: 'price',\n    direction: 'asc',\n  },\n  {\n    name: 'Price: High to low',\n    value: 'price',\n    direction: 'desc',\n  },\n];\n"
    },
    "/src/index.css": {
      "code": "@import url('https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  font-family:\n    'Noto Sans',\n    system-ui,\n    -apple-system,\n    BlinkMacSystemFont,\n    'Segoe UI',\n    Roboto,\n    Oxygen,\n    Ubuntu,\n    Cantarell,\n    'Open Sans',\n    'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility;\n  background: linear-gradient(147.52deg, #f9fafb 8.89%, #d2d6db 100.48%);\n}\n\n/* Custom z-index */\n.z-sticky {\n  z-index: 1020;\n}\n.z-fixed {\n  z-index: 1030;\n}\n.z-dropdown {\n  z-index: 1000;\n}\n.z-modal {\n  z-index: 1055;\n}\n\n/* Custom animations and keyframes */\n@keyframes slideout {\n  from {\n    transform: translateX(-100%);\n  }\n  to {\n    transform: translateX(0%);\n  }\n}\n\n.animate-slideout {\n  animation: slideout 0.4s ease-out;\n}\n\n/* Custom box shadow */\n.shadow-custom {\n  box-shadow:\n    0px 1px 2px 0 rgb(0 0 0 / 0.06),\n    0px 1px 3px 0 rgb(0 0 0 / 0.1);\n}\n.shadow-input {\n  box-shadow:\n    0px 0px 0px 1px #444ce7,\n    0px 1px 2px rgba(16, 24, 40, 0.05),\n    0px 0px 0px 4px rgba(68, 76, 231, 0.12);\n}\n"
    },
    "/src/index.js": {
      "code": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n);\n"
    },
    "/src/Layout.jsx": {
      "code": "import clsx from 'clsx';\nimport { Outlet } from 'react-router-dom';\n\nconst Layout = () => {\n  return (\n    <main className=\"mx-auto min-h-screen max-w-[1440px] p-4\">\n      <div\n        className={clsx(\n          'min-h-[calc(100vh_-_32px)] rounded-md bg-white',\n          'shadow-sm md:shadow-md lg:shadow-lg',\n        )}>\n        <Outlet />\n      </div>\n    </main>\n  );\n};\n\nexport default Layout;\n"
    },
    "/src/pages/ProductDetail/components/AvailableColors.jsx": {
      "code": "import { useMemo } from 'react';\n\nimport ColorSwatches from 'src/components/ui/ColorSwatches';\nimport { useProductDetailsContext } from './ProductDetailsContext';\nimport { COLORS } from 'src/constants';\nimport { getUnavailableColors } from '../utils';\n\nconst AvailableColors = () => {\n  const { selectedColor, setSelectedColor, product } =\n    useProductDetailsContext();\n  const { colors } = product;\n  const unavailableColors = useMemo(\n    () => getUnavailableColors(product),\n    [product]\n  );\n\n  return (\n    <fieldset aria-label=\"Choose a color\">\n      <legend className=\"text-sm text-neutral-500\">Available Colors</legend>\n      <div className=\"flex gap-4 flex-wrap mt-4\">\n        {colors.map(color => (\n          <ColorSwatches\n            key={color}\n            color={COLORS[color].value}\n            outOfStock={unavailableColors.includes(color)}\n            selected={selectedColor === color}\n            onClick={() => setSelectedColor(color)}\n          />\n        ))}\n      </div>\n    </fieldset>\n  );\n};\n\nexport default AvailableColors;\n"
    },
    "/src/pages/ProductDetail/components/AvailableSizes.jsx": {
      "code": "import clsx from 'clsx';\nimport { useMemo } from 'react';\n\nimport { useProductDetailsContext } from './ProductDetailsContext';\nimport { getUnavailableSizes } from '../utils';\n\nconst SIZE_MAP = {\n  xs: 'XS',\n  sm: 'S',\n  md: 'M',\n  lg: 'L',\n  xl: 'XL',\n};\n\nconst AvailableSizes = () => {\n  const { selectedSize, setSelectedSize, selectedColor, product } =\n    useProductDetailsContext();\n  const { sizes } = product;\n  const unavailableSizes = useMemo(\n    () =>\n      getUnavailableSizes({\n        product,\n        color: selectedColor,\n      }),\n    [product, selectedColor]\n  );\n\n  return (\n    <fieldset aria-label=\"Choose a size\">\n      <legend className=\"text-sm text-neutral-500\">Available Sizes</legend>\n\n      <div className={clsx('mt-4', 'flex gap-4 flex-wrap')}>\n        {sizes.map(size => {\n          const outOfStock = unavailableSizes.includes(size);\n\n          return (\n            <label\n              key={size}\n              aria-label={size}\n              className={clsx(\n                outOfStock ? 'pointer-events-none' : 'cursor-pointer'\n              )}>\n              <input\n                type=\"radio\"\n                name=\"size-choice\"\n                value={size}\n                className=\"sr-only\"\n                disabled={outOfStock}\n                tabIndex={-1}\n                aria-checked={selectedSize === size}\n                onChange={() => setSelectedSize(size)}\n              />\n              <span\n                aria-hidden=\"true\"\n                tabIndex={selectedSize === size || outOfStock ? -1 : 0}\n                className={clsx(\n                  'w-16 h-12',\n                  'flex justify-center items-center gap-1.5',\n                  'px-5 py-3',\n                  'uppercase font-medium',\n                  'rounded border',\n                  'focus:outline-none',\n                  outOfStock\n                    ? [\n                        'text-neutral-400',\n                        'pointer-events-none',\n                        'bg-neutral-100',\n                      ]\n                    : [\n                        'text-neutral-900',\n                        'cursor-pointer',\n                        'bg-white focus:bg-neutral-50 hover:bg-neutral-50',\n                      ],\n                  selectedSize === size\n                    ? 'border-indigo-600'\n                    : 'border-neutral-200',\n                  outOfStock && selectedSize !== size && 'border-none'\n                )}\n                onKeyDown={e => {\n                  if (e.key === 'Enter' || e.key === ' ') {\n                    setSelectedSize(size);\n                  }\n                }}>\n                {SIZE_MAP[size]}\n              </span>\n            </label>\n          );\n        })}\n      </div>\n    </fieldset>\n  );\n};\n\nexport default AvailableSizes;\n"
    },
    "/src/pages/ProductDetail/components/InfoSection.jsx": {
      "code": "import {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from 'src/components/ui/Accordion';\n\nimport { useProductDetailsContext } from './ProductDetailsContext';\n\nconst InfoSection = () => {\n  const { product } = useProductDetailsContext();\n  const { info } = product;\n\n  return (\n    <section aria-labelledby=\"product-faq\" className=\"mt-10\">\n      <Accordion>\n        {info.map(item => (\n          <AccordionItem key={item.title} id={item.title}>\n            <AccordionTrigger>{item.title}</AccordionTrigger>\n            <AccordionContent>\n              <ul className=\"list-disc ml-4 pl-2 text-neutral-600\">\n                {item.description.map(descItem => (\n                  <li key={descItem}>{descItem}</li>\n                ))}\n              </ul>\n            </AccordionContent>\n          </AccordionItem>\n        ))}\n      </Accordion>\n    </section>\n  );\n};\n\nexport default InfoSection;\n"
    },
    "/src/pages/ProductDetail/components/ProductDetail.jsx": {
      "code": "import ProductImages from './ProductImages';\nimport ProductMetadata from './ProductMetadata';\n\nimport { useProductDetailsContext } from './ProductDetailsContext';\n\nconst ProductDetail = () => {\n  const { isProductLoading, product } = useProductDetailsContext();\n\n  if (isProductLoading || !product) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <>\n      <div className=\"col-span-4 md:col-span-6\">\n        <ProductImages />\n      </div>\n      <div className=\"col-span-4 md:col-span-6\">\n        <ProductMetadata />\n      </div>\n    </>\n  );\n};\n\nexport default ProductDetail;\n"
    },
    "/src/pages/ProductDetail/components/ProductDetailsContext.jsx": {
      "code": "import {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { getUnavailableSizes } from '../utils';\n\nconst ProductDetailsContext = createContext();\n\nexport const useProductDetailsContext = () => useContext(ProductDetailsContext);\n\nconst ProductDetailsContextProvider = ({ children }) => {\n  const navigate = useNavigate();\n  const { productId } = useParams();\n  const [product, setProduct] = useState(null);\n  const [isProductLoading, setIsProductLoading] = useState(false);\n  const [selectedColor, setSelectedColor] = useState(null);\n  const [selectedSize, setSelectedSize] = useState(null);\n  const [itemQuantity, setItemQuantity] = useState(1);\n\n  const getProduct = useCallback(async () => {\n    setIsProductLoading(true);\n    const data = await fetch(\n      `https://www.greatfrontend.com/api/projects/challenges/e-commerce/products/${productId}`\n    );\n    const result = await data.json();\n\n    if (!result.error) {\n      setProduct(result);\n      setSelectedColor(result.colors[0]);\n    } else {\n      return navigate('/not-found');\n    }\n    setIsProductLoading(false);\n  }, [productId, navigate]);\n\n  const decrementQuantity = useCallback(() => {\n    setItemQuantity(prev => (prev > 1 ? prev - 1 : 1));\n  }, []);\n\n  const incrementQuantity = useCallback(() => {\n    setItemQuantity(prev => prev + 1);\n  }, []);\n\n  useEffect(() => {\n    getProduct();\n  }, [getProduct]);\n\n  // Set first available size as the initial selected size\n  useEffect(() => {\n    if (!product || !selectedColor) {\n      return;\n    }\n\n    const unavailableSizes = getUnavailableSizes({\n      product,\n      color: selectedColor,\n    });\n    const availableSizes = [...product.sizes].filter(\n      size => !unavailableSizes.includes(size)\n    );\n    if (availableSizes.length > 0) {\n      setSelectedSize(availableSizes[0]);\n    }\n  }, [selectedColor, product]);\n\n  const value = useMemo(() => {\n    return {\n      product,\n      isProductLoading,\n      selectedColor,\n      setSelectedColor,\n      selectedSize,\n      setSelectedSize,\n      itemQuantity,\n      incrementQuantity,\n      decrementQuantity,\n    };\n  }, [\n    product,\n    isProductLoading,\n    selectedColor,\n    setSelectedColor,\n    selectedSize,\n    setSelectedSize,\n    itemQuantity,\n    incrementQuantity,\n    decrementQuantity,\n  ]);\n\n  return (\n    <ProductDetailsContext.Provider value={value}>\n      {children}\n    </ProductDetailsContext.Provider>\n  );\n};\n\nexport default ProductDetailsContextProvider;\n"
    },
    "/src/pages/ProductDetail/components/ProductImages.jsx": {
      "code": "import { useMemo, useState } from 'react';\nimport clsx from 'clsx';\n\nimport { useProductDetailsContext } from './ProductDetailsContext';\nimport { getSelectedColorImages } from '../utils';\n\nconst ProductImages = () => {\n  const { product, selectedColor } = useProductDetailsContext();\n  const [selectedPreview, setSelectedPreview] = useState(0);\n\n  const images = useMemo(\n    () => getSelectedColorImages({ product, color: selectedColor }),\n    [product, selectedColor]\n  );\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <img\n        src={product.images[selectedPreview].image_url}\n        alt=\"Selected preview\"\n        loading=\"lazy\"\n        className=\"h-[400px] md:h-[800px] w-full object-cover rounded-lg\"\n      />\n      <div className=\"flex gap-4 overflow-x-auto\">\n        {images.map((image, index) => (\n          <img\n            key={image.image_url + index}\n            src={image.image_url}\n            alt={`Preview ${index + 1}`}\n            loading=\"lazy\"\n            onClick={() => setSelectedPreview(index)}\n            className={clsx(\n              'rounded-lg shrink-0 block',\n              'w-20 h-[120px] md:h-[190px] md:w-[188px] lg:w-40 object-cover',\n              'cursor-pointer',\n              index === selectedPreview && 'border-[3px] border-indigo-600'\n            )}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ProductImages;\n"
    },
    "/src/pages/ProductDetail/components/ProductMetadata.jsx": {
      "code": "import clsx from 'clsx';\nimport { useMediaQuery } from 'usehooks-ts';\nimport { useMemo } from 'react';\n\nimport Badge from 'src/components/ui/Badge';\nimport Button from 'src/components/ui/Button';\nimport Rating from 'src/components/ui/Rating';\nimport AvailableColors from './AvailableColors';\nimport AvailableSizes from './AvailableSizes';\nimport ProductQuantity from './ProductQuantity';\nimport InfoSection from './InfoSection';\n\nimport { useProductDetailsContext } from './ProductDetailsContext';\nimport { getInventoryData } from '../utils';\n\nconst ProductMetadata = () => {\n  const isMobileAndBelow = useMediaQuery('(max-width: 767px)');\n  const { product, itemQuantity, selectedColor, selectedSize } =\n    useProductDetailsContext();\n\n  const { name, description, reviews, rating } = product;\n  const inventoryData = useMemo(\n    () =>\n      getInventoryData({ product, color: selectedColor, size: selectedSize }),\n    [product, selectedColor, selectedSize]\n  );\n  const { discount_percentage, list_price, sale_price, stock } = inventoryData;\n\n  const roundedRating = Math.round(rating * 10) / 10;\n  const hasDiscount = !!discount_percentage;\n\n  return (\n    <div>\n      <section\n        className={clsx('flex flex-col gap-8')}\n        aria-labelledby=\"information-heading\">\n        <div className=\"flex flex-col items-start\">\n          <h1 className=\"text-3xl md:text-5xl font-semibold\">{name}</h1>\n          <div className=\"mt-5\">\n            <div className=\"inline-flex gap-2 items-end\">\n              <span className=\"text-3xl font-medium text-neutral-600\">\n                ${hasDiscount ? sale_price : list_price}\n              </span>\n              {hasDiscount && (\n                <span className=\"text-lg font-medium text-neutral-400 line-through\">\n                  ${list_price}\n                </span>\n              )}\n            </div>\n          </div>\n          {hasDiscount && (\n            <div className=\"mt-2\">\n              <Badge\n                label={`${discount_percentage}% OFF`}\n                size=\"lg\"\n                variant=\"warning\"\n              />\n            </div>\n          )}\n\n          <div className={clsx('flex items-center gap-2 flex-wrap', 'mt-3')}>\n            <div className=\"text-xl text-neutral-900\">{roundedRating ?? 0}</div>\n            <Rating value={roundedRating ?? 0} />\n            {reviews > 0 ? (\n              <Button\n                label={`See all ${reviews} reviews`}\n                href=\"#\"\n                variant=\"primary\"\n                className=\"text-sm\"\n              />\n            ) : (\n              <div className=\"flex gap-[2px]\">\n                <span className=\"text-sm text-neutral-900\">\n                  No reviews yet.\n                </span>\n                <Button\n                  label=\"Be the first.\"\n                  href=\"#\"\n                  variant=\"primary\"\n                  className=\"text-sm\"\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        <p className=\"text-neutral-600\">{description}</p>\n      </section>\n\n      <section aria-labelledby=\"product-options\" className=\"mt-8\">\n        <form className=\"flex flex-col gap-8\">\n          <AvailableColors />\n          <AvailableSizes />\n          <ProductQuantity availableStock={stock} />\n\n          {/* Out of stock message */}\n          {stock === 0 && (\n            <div className=\"text-xl font-semibold text-neutral-900\">\n              Sorry, this item is out of stock\n            </div>\n          )}\n\n          <Button\n            label=\"Add to Cart\"\n            size={isMobileAndBelow ? 'xl' : '2xl'}\n            isDisabled={itemQuantity === 0 || stock === 0}\n          />\n        </form>\n      </section>\n\n      <InfoSection />\n    </div>\n  );\n};\n\nexport default ProductMetadata;\n"
    },
    "/src/pages/ProductDetail/components/ProductQuantity.jsx": {
      "code": "import CartControl from 'src/components/CartControl';\nimport { useProductDetailsContext } from './ProductDetailsContext';\n\nconst ProductQuantity = ({ availableStock }) => {\n  const { itemQuantity, incrementQuantity, decrementQuantity } =\n    useProductDetailsContext();\n\n  return (\n    <fieldset aria-label=\"Choose a color\">\n      <legend className=\"text-sm text-neutral-500\">Quantity</legend>\n      <div className=\"mt-4\">\n        <CartControl\n          quantity={itemQuantity}\n          decrement={decrementQuantity}\n          increment={incrementQuantity}\n          availableStock={availableStock}\n        />\n      </div>\n    </fieldset>\n  );\n};\n\nexport default ProductQuantity;\n"
    },
    "/src/pages/ProductDetail/index.js": {
      "code": "import ProductDetailPage from './ProductDetailPage';\n\nexport default ProductDetailPage;\n"
    },
    "/src/pages/ProductDetail/ProductDetailPage.jsx": {
      "code": "import clsx from 'clsx';\n\nimport ProductDetail from './components/ProductDetail';\nimport ProductDetailsContextProvider from './components/ProductDetailsContext';\n\nconst ProductDetailPage = () => {\n  return (\n    <ProductDetailsContextProvider>\n      <div\n        className={clsx(\n          'w-full',\n          'px-4 py-12 md:py-16 lg:p-24',\n          'grid grid-cols-4 md:grid-cols-6 lg:grid-cols-12 gap-x-4 md:gap-x-8 gap-y-12'\n        )}>\n        <ProductDetail />\n      </div>\n    </ProductDetailsContextProvider>\n  );\n};\n\nexport default ProductDetailPage;\n"
    },
    "/src/pages/ProductDetail/utils.js": {
      "code": "export const getUnavailableColors = product => {\n  const colorsInStock = new Set();\n  const allColors = new Set(product.colors);\n\n  product.inventory.forEach(item => {\n    if (item.stock > 0) {\n      colorsInStock.add(item.color);\n    }\n  });\n\n  const unavailableColors = [...allColors].filter(\n    color => !colorsInStock.has(color)\n  );\n\n  return unavailableColors;\n};\n\nexport const getUnavailableSizes = ({ product, color }) => {\n  const sizesInStock = new Set();\n  const allSizes = new Set(product.sizes);\n\n  product.inventory.forEach(item => {\n    if (item.stock > 0 && item.color === color) {\n      sizesInStock.add(item.size);\n    }\n  });\n\n  const unavailableSizes = [...allSizes].filter(\n    size => !sizesInStock.has(size)\n  );\n\n  return unavailableSizes;\n};\n\nexport const getInventoryData = ({ product, color, size }) => {\n  let data = {};\n  product.inventory.forEach(item => {\n    if (item.size === size && item.color === color) {\n      data = item;\n    }\n  });\n\n  return data;\n};\n\nexport const getSelectedColorImages = ({ product, color }) => {\n  const images = product.images?.filter(image => image.color === color);\n  return images;\n};\n"
    },
    "/src/pages/ProductListing/components/Accordion/Accordion.jsx": {
      "code": "import clsx from 'clsx';\nimport { useState, useRef, createContext, useContext } from 'react';\nimport { RiAddLine, RiSubtractLine } from 'react-icons/ri';\n\nconst AccordionItemContext = createContext();\n\nconst AccordionItem = ({ children, id }) => {\n  const [isOpen, setIsOpen] = useState(true);\n\n  return (\n    <div>\n      <AccordionItemContext.Provider value={{ id, isOpen, setIsOpen }}>\n        {children}\n      </AccordionItemContext.Provider>\n    </div>\n  );\n};\n\nconst AccordionTrigger = ({ children }) => {\n  const { id, isOpen, setIsOpen } = useContext(AccordionItemContext);\n  const Icon = isOpen ? RiSubtractLine : RiAddLine;\n  return (\n    <button\n      className={clsx(\n        'w-full',\n        'flex gap-6 justify-between items-center',\n        'focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n        'text-left text-neutral-900 font-medium'\n      )}\n      onClick={() => setIsOpen(!isOpen)}\n      aria-expanded={isOpen}\n      aria-controls={`accordion-content-${id}`}\n      id={`accordion-header-${id}`}>\n      <span>{children}</span>\n      <Icon className=\"m-0.5 size-5 text-neutral-600\" aria-hidden={true} />\n    </button>\n  );\n};\n\nconst AccordionContent = ({ children }) => {\n  const contentRef = useRef(null);\n  const { id, isOpen } = useContext(AccordionItemContext);\n\n  return (\n    <div\n      id={`accordion-content-${id}`}\n      role=\"region\"\n      aria-labelledby={`accordion-header-${id}`}\n      className={clsx(\n        'overflow-hidden',\n        'pr-12',\n        isOpen && 'mt-6',\n        'transition-max-height ease-in-out duration-300 transform origin-top',\n        isOpen ? 'scale-y-100 opacity-100' : 'scale-y-0 opacity-0'\n      )}\n      style={{\n        maxHeight: isOpen ? `${contentRef.current?.scrollHeight}px` : '0',\n      }}\n      ref={contentRef}>\n      <div className=\"text-neutral-600\">{children}</div>\n    </div>\n  );\n};\n\nconst Accordion = ({ children }) => {\n  const hasMultipleItem = Array.isArray(children);\n  return (\n    <div className=\"w-full\">\n      {!hasMultipleItem\n        ? children\n        : children.map((item, index) => (\n            <div key={item.props.id}>\n              {item}\n              <div className=\"h-[1px] bg-neutral-200 my-6\" />\n            </div>\n          ))}\n    </div>\n  );\n};\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\n"
    },
    "/src/pages/ProductListing/components/Accordion/index.js": {
      "code": "import * as Accordion from './Accordion';\n\nexport * from './Accordion';\nexport default Accordion;\n"
    },
    "/src/pages/ProductListing/components/Filter.jsx": {
      "code": "import clsx from 'clsx';\nimport { RiFilterLine } from 'react-icons/ri';\nimport { useState } from 'react';\n\nimport CheckboxInput from 'src/components/ui/CheckboxInput';\nimport ColorSwatches from 'src/components/ui/ColorSwatches';\nimport Rating from 'src/components/ui/Rating';\nimport SlideOut from 'src/components/ui/SlideOut';\nimport Button from 'src/components/ui/Button';\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from 'src/pages/ProductListing/components/Accordion';\n\nimport { useProductListingContext } from './ProductListingContext';\nimport {\n  CATEGORY_OPTIONS,\n  COLLECTIONS_OPTIONS,\n  COLORS_OPTIONS,\n  RATING_OPTIONS,\n} from 'src/constants';\n\nconst Filter = () => {\n  const {\n    selectedCategory,\n    selectedCollections,\n    selectedColors,\n    selectedRating,\n    filterCount,\n    onSelect,\n    resetFilters,\n  } = useProductListingContext();\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\n\n  const filterItems = (\n    <div className=\"flex flex-col items-center\">\n      <Accordion>\n        <AccordionItem id={COLLECTIONS_OPTIONS.key}>\n          <AccordionTrigger>{COLLECTIONS_OPTIONS.title}</AccordionTrigger>\n          <AccordionContent>\n            <div className=\"flex flex-col gap-4 lg:gap-6\">\n              {COLLECTIONS_OPTIONS.items.map(({ name, value }) => (\n                <CheckboxInput\n                  label={name}\n                  key={value}\n                  value={selectedCollections.has(value)}\n                  onChange={() => onSelect(COLLECTIONS_OPTIONS.key, value)}\n                />\n              ))}\n            </div>\n          </AccordionContent>\n        </AccordionItem>\n\n        <AccordionItem id={CATEGORY_OPTIONS.key}>\n          <AccordionTrigger>{CATEGORY_OPTIONS.title}</AccordionTrigger>\n          <AccordionContent>\n            <div className=\"flex flex-col gap-4\">\n              {CATEGORY_OPTIONS.items.map(({ name, value }) => (\n                <CheckboxInput\n                  label={name}\n                  key={value}\n                  value={selectedCategory.has(value)}\n                  onChange={() => onSelect(CATEGORY_OPTIONS.key, value)}\n                />\n              ))}\n            </div>\n          </AccordionContent>\n        </AccordionItem>\n\n        <AccordionItem id={COLORS_OPTIONS.key}>\n          <AccordionTrigger>{COLORS_OPTIONS.title}</AccordionTrigger>\n          <AccordionContent>\n            <div className=\"flex gap-2 flex-wrap\">\n              {COLORS_OPTIONS.items.map(({ color, value }) => (\n                <ColorSwatches\n                  key={value}\n                  type=\"checkbox\"\n                  color={color}\n                  selected={selectedColors.has(value)}\n                  onClick={() => onSelect(COLORS_OPTIONS.key, value)}\n                  size=\"sm\"\n                />\n              ))}\n            </div>\n          </AccordionContent>\n        </AccordionItem>\n\n        <AccordionItem id={RATING_OPTIONS.key}>\n          <AccordionTrigger>{RATING_OPTIONS.title}</AccordionTrigger>\n          <AccordionContent>\n            <div className=\"flex flex-col gap-4 lg:gap-6 items-start\">\n              {RATING_OPTIONS.items.map(({ value }) => (\n                <button\n                  key={value}\n                  type=\"button\"\n                  className={clsx(\n                    'rounded',\n                    'focus:outline-none focus-visible:ring-2 focus:ring-offset-0 focus:ring-indigo-600/[.12]'\n                  )}\n                  onClick={() => onSelect(RATING_OPTIONS.key, value)}>\n                  <Rating\n                    value={value}\n                    selected={selectedRating.has(value)}\n                    showHover\n                  />\n                </button>\n              ))}\n            </div>\n          </AccordionContent>\n        </AccordionItem>\n      </Accordion>\n      {filterCount > 0 && (\n        <Button\n          onClick={() => {\n            resetFilters();\n            setIsFilterOpen(false);\n          }}\n          label={`Clear All (${filterCount})`}\n          variant=\"link\"\n          size=\"lg\"\n        />\n      )}\n    </div>\n  );\n\n  return (\n    <div>\n      <div className=\"hidden lg:block sticky top-10\">{filterItems}</div>\n      <div className=\"block lg:hidden\">\n        <SlideOut\n          isShown={isFilterOpen}\n          title={<span className=\"text-xl text-neutral-900\">Filter</span>}\n          onClose={() => setIsFilterOpen(false)}\n          trigger={\n            <Button\n              label=\"Filter\"\n              variant=\"secondary\"\n              startIcon={RiFilterLine}\n              onClick={() => setIsFilterOpen(!isFilterOpen)}\n            />\n          }>\n          {filterItems}\n        </SlideOut>\n      </div>\n    </div>\n  );\n};\n\nexport default Filter;\n"
    },
    "/src/pages/ProductListing/components/hooks/useProductFilters.js": {
      "code": "import { useState } from 'react';\nimport {\n  CATEGORY_OPTIONS,\n  COLLECTIONS_OPTIONS,\n  COLORS_OPTIONS,\n  RATING_OPTIONS,\n} from 'src/constants';\n\nexport default function useProductFilters() {\n  const [selectedCollections, setSelectedCollections] = useState(new Set());\n  const [selectedCategory, setSelectedCategory] = useState(new Set());\n  const [selectedColors, setSelectedColors] = useState(new Set());\n  const [selectedRating, setSelectedRating] = useState(new Set());\n  const [selectedSort, setSelectedSort] = useState({\n    value: 'created',\n    direction: 'desc',\n  });\n\n  const onSelect = (type, value) => {\n    let newSelectedItems;\n    if (type === COLLECTIONS_OPTIONS.key) {\n      newSelectedItems = new Set(selectedCollections);\n    }\n    if (type === CATEGORY_OPTIONS.key) {\n      newSelectedItems = new Set(selectedCategory);\n    }\n    if (type === COLORS_OPTIONS.key) {\n      newSelectedItems = new Set(selectedColors);\n    }\n    if (type === RATING_OPTIONS.key) {\n      newSelectedItems = new Set(selectedRating);\n    }\n\n    newSelectedItems.has(value)\n      ? newSelectedItems.delete(value)\n      : newSelectedItems.add(value);\n\n    if (type === COLLECTIONS_OPTIONS.key) {\n      setSelectedCollections(newSelectedItems);\n    }\n    if (type === CATEGORY_OPTIONS.key) {\n      setSelectedCategory(newSelectedItems);\n    }\n    if (type === COLORS_OPTIONS.key) {\n      setSelectedColors(newSelectedItems);\n    }\n    if (type === RATING_OPTIONS.key) {\n      setSelectedRating(newSelectedItems);\n    }\n  };\n\n  const resetFilters = () => {\n    setSelectedCollections(new Set());\n    setSelectedCategory(new Set());\n    setSelectedColors(new Set());\n    setSelectedRating(new Set());\n  };\n\n  const filterCount =\n    selectedCollections.size +\n    selectedCategory.size +\n    selectedColors.size +\n    selectedRating.size;\n\n  return {\n    selectedCollections,\n    selectedCategory,\n    selectedColors,\n    selectedRating,\n    selectedSort,\n    filterCount,\n    onSelect,\n    resetFilters,\n    onSortChange: setSelectedSort,\n  };\n}\n"
    },
    "/src/pages/ProductListing/components/ProductListingContext.jsx": {
      "code": "import {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport useProductFilters from './hooks/useProductFilters';\nimport {\n  CATEGORY_OPTIONS,\n  COLLECTIONS_OPTIONS,\n  COLORS_OPTIONS,\n  RATING_OPTIONS,\n} from 'src/constants';\n\nconst ProductListingContext = createContext();\n\nexport const useProductListingContext = () => useContext(ProductListingContext);\n\nconst ProductListingContextProvider = ({ children }) => {\n  const [products, setProducts] = useState(null);\n  const [isProductsLoading, setIsProductsLoading] = useState(true);\n  const {\n    selectedCollections,\n    selectedCategory,\n    selectedColors,\n    selectedRating,\n    selectedSort,\n    filterCount,\n    onSelect,\n    resetFilters,\n    onSortChange,\n  } = useProductFilters();\n\n  const getProducts = useCallback(\n    async ({ colors, collections, ratings, categories, sort }) => {\n      setIsProductsLoading(true);\n\n      let queryString = '';\n      if (\n        colors.size > 0 ||\n        collections.size > 0 ||\n        ratings.size > 0 ||\n        categories.size > 0\n      ) {\n        queryString = [\n          ...Array.from(colors).map(\n            color => `${COLORS_OPTIONS.key}=${encodeURIComponent(color)}`\n          ),\n          ...Array.from(collections).map(\n            collection =>\n              `${COLLECTIONS_OPTIONS.key}=${encodeURIComponent(collection)}`\n          ),\n          ...Array.from(ratings).map(\n            rating => `${RATING_OPTIONS.key}=${encodeURIComponent(rating)}`\n          ),\n          ...Array.from(categories).map(\n            category =>\n              `${CATEGORY_OPTIONS.key}=${encodeURIComponent(category)}`\n          ),\n        ].join('&');\n      }\n\n      queryString = `${queryString ? `${queryString}&` : ''}sort=${\n        sort.value\n      }&direction=${sort.direction}`;\n\n      const data = await fetch(\n        `https://www.greatfrontend.com/api/projects/challenges/e-commerce/products${\n          queryString ? `?${queryString}` : ''\n        }`\n      );\n      const result = await data.json();\n\n      if (!result.error) {\n        setProducts(result.data);\n      }\n      setIsProductsLoading(false);\n    },\n    []\n  );\n\n  useEffect(() => {\n    getProducts({\n      colors: selectedColors,\n      categories: selectedCategory,\n      collections: selectedCollections,\n      ratings: selectedRating,\n      sort: selectedSort,\n    });\n  }, [\n    getProducts,\n    selectedColors,\n    selectedCategory,\n    selectedCollections,\n    selectedRating,\n    selectedSort,\n  ]);\n\n  const value = useMemo(() => {\n    return {\n      products,\n      isProductsLoading,\n\n      selectedCollections,\n      selectedCategory,\n      selectedColors,\n      selectedRating,\n      selectedSort,\n      filterCount,\n      onSelect,\n      resetFilters,\n      onSortChange,\n    };\n  }, [\n    products,\n    isProductsLoading,\n\n    selectedCollections,\n    selectedCategory,\n    selectedColors,\n    selectedRating,\n    selectedSort,\n    filterCount,\n    onSelect,\n    resetFilters,\n    onSortChange,\n  ]);\n\n  return (\n    <ProductListingContext.Provider value={value}>\n      {children}\n    </ProductListingContext.Provider>\n  );\n};\n\nexport default ProductListingContextProvider;\n"
    },
    "/src/pages/ProductListing/components/ProductListingSection.jsx": {
      "code": "import { RiTShirt2Line } from 'react-icons/ri';\nimport clsx from 'clsx';\n\nimport ProductCard from 'src/components/ProductCard';\nimport Button from 'src/components/ui/Button';\nimport { useProductListingContext } from './ProductListingContext';\n\nconst ProductListingSection = () => {\n  const { products, isProductsLoading, filterCount, resetFilters } =\n    useProductListingContext();\n\n  if (isProductsLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (filterCount > 0 && products.length === 0) {\n    return (\n      <div\n        className={clsx(\n          'w-full h-full',\n          'col-span-4 md:col-span-6 lg:col-span-9',\n          'flex items-center justify-center flex-col gap-5'\n        )}>\n        <div\n          className={clsx(\n            'size-12 bg-white rounded-full shadow',\n            'flex items-center justify-center'\n          )}>\n          <RiTShirt2Line className=\"size-6 text-indigo-700\" />\n        </div>\n        <div\n          className={clsx(\n            'flex flex-col items-center gap-2',\n            'text-neutral-900 text-center'\n          )}>\n          <span className=\"font-medium text-xl\">Nothing found just yet</span>\n          <span>\n            Adjust your filters a bit, and let's see what we can find!\n          </span>\n        </div>\n        <Button label=\"Reset filters\" size=\"lg\" onClick={resetFilters} />\n      </div>\n    );\n  }\n\n  return products.map(product => (\n    <div key={product.product_id} className={clsx('col-span-4 md:col-span-3')}>\n      <ProductCard product={product} />\n    </div>\n  ));\n};\n\nexport default ProductListingSection;\n"
    },
    "/src/pages/ProductListing/components/SortByFilter.jsx": {
      "code": "import { Dropdown, DropdownItem } from 'src/components/ui/Dropdown';\n\nimport { useProductListingContext } from './ProductListingContext';\nimport { SORT_OPTIONS } from 'src/constants';\n\nconst SortByFilter = () => {\n  const { onSortChange, selectedSort } = useProductListingContext();\n  return (\n    <Dropdown>\n      {SORT_OPTIONS.map(option => (\n        <DropdownItem\n          key={option.value + option.direction}\n          isSelected={\n            option.value === selectedSort.value &&\n            option.direction === selectedSort.direction\n          }\n          onSelect={() =>\n            onSortChange({ value: option.value, direction: option.direction })\n          }>\n          {option.name}\n        </DropdownItem>\n      ))}\n    </Dropdown>\n  );\n};\n\nexport default SortByFilter;\n"
    },
    "/src/pages/ProductListing/index.js": {
      "code": "import ProductListingPage from './ProductListingPage';\n\nexport default ProductListingPage;\n"
    },
    "/src/pages/ProductListing/ProductListingPage.jsx": {
      "code": "import clsx from 'clsx';\n\nimport Filter from './components/Filter';\nimport ProductListingContextProvider from './components/ProductListingContext';\nimport ProductListingSection from './components/ProductListingSection';\nimport SortByFilter from './components/SortByFilter';\n\nconst ProductListingPage = () => {\n  return (\n    <ProductListingContextProvider>\n      <div\n        className={clsx(\n          'w-full',\n          'px-4 py-12 md:py-[72px] lg:px-24 lg:py-[104px]',\n          'grid grid-cols-4 md:grid-cols-6 lg:grid-cols-12 gap-x-4 md:gap-x-8 gap-y-8'\n        )}>\n        <div\n          className={clsx(\n            'col-span-4 md:col-span-6 lg:col-span-3 lg:pt-4 lg:pr-12',\n            'flex justify-between'\n          )}>\n          <Filter />\n          <div className=\"block lg:hidden\">\n            <SortByFilter />\n          </div>\n        </div>\n\n        <div\n          className={clsx(\n            'col-span-4 md:col-span-6  lg:col-span-9',\n            'flex flex-col items-end gap-8'\n          )}>\n          <div className=\"hidden lg:block\">\n            <SortByFilter />\n          </div>\n\n          <div\n            className={clsx(\n              'w-full h-full',\n              'grid grid-cols-4 md:grid-cols-6 lg:grid-cols-9 gap-8'\n            )}>\n            <ProductListingSection />\n          </div>\n        </div>\n      </div>\n    </ProductListingContextProvider>\n  );\n};\n\nexport default ProductListingPage;\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/index.css",
      "/src/pages/ProductListing/ProductListingPage.jsx"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app",
    "externalResources": [
      "https://cdn.tailwindcss.com"
    ]
  }
}