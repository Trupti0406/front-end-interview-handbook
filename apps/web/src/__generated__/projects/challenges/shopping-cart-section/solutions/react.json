{
  "files": {
    "/jsconfig.json": {
      "code": "{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\"\n  },\n  \"include\": [\"src\"]\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-challenges/shopping-cart-section-solution\",\n  \"version\": \"0.0.1\",\n  \"dependencies\": {\n    \"clsx\": \"^2.1.1\",\n    \"react-icons\": \"^5.2.1\",\n    \"react-router-dom\": \"^6.23.1\",\n    \"usehooks-ts\": \"^3.1.0\",\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta\n      name=\"description\"\n      content=\"Web site created using create-react-app\" />\n    <title>Shopping cart section</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import { Route, Routes } from 'react-router-dom';\n\nimport Layout from './Layout';\nimport CartPage from './pages/Cart';\n\nimport CartContextProvider from './context/CartContext';\n\nfunction App() {\n  return (\n    <CartContextProvider>\n      <Routes>\n        <Route path=\"/\" element={<Layout />}>\n          <Route path=\"/\" element={<CartPage />} />\n        </Route>\n      </Routes>\n    </CartContextProvider>\n  );\n}\n\nexport default App;\n"
    },
    "/src/components/CartControl/CartControl.jsx": {
      "code": "import clsx from 'clsx';\nimport { RiAddFill, RiSubtractFill } from 'react-icons/ri';\n\nimport Tooltip from '../ui/Tooltip';\n\nconst CartControl = ({ quantity, decrement, increment, availableStock }) => {\n  const disabledDecrement = quantity === 1;\n  const disabledIncrement = quantity >= availableStock;\n\n  return (\n    <div\n      className={clsx(\n        'w-[125px] h-9',\n        'flex justify-center items-center gap-3',\n        'py-0.5 px-[5px]',\n        'bg-neutral-50 rounded-md border border-neutral-200'\n      )}\n      role=\"group\"\n      aria-label=\"Product Quantity control\">\n      <button\n        type=\"button\"\n        className={clsx(\n          'flex justify-center items-center rounded',\n          'text-neutral-600 disabled:text-neutral-400',\n          'cursor-pointer disabled:pointer-events-none'\n        )}\n        disabled={disabledDecrement}\n        onClick={decrement}\n        aria-label=\"Decrease quantity\">\n        <RiSubtractFill className=\"size-5 p-0.5 shrink-0\" />\n      </button>\n      <span\n        className=\"flex-1 text-center font-medium text-sm text-neutral-600\"\n        aria-live=\"polite\">\n        {quantity}\n      </span>\n      <Tooltip content=\"Insufficient stock\" show={disabledIncrement}>\n        <button\n          type=\"button\"\n          className={clsx(\n            'flex justify-center items-center rounded',\n            'text-neutral-600 disabled:text-neutral-400',\n            'cursor-pointer disabled:pointer-events-none'\n          )}\n          disabled={disabledIncrement}\n          onClick={increment}\n          aria-label=\"Increase quantity\">\n          <RiAddFill className=\"size-5 p-0.5 shrink-0\" />\n        </button>\n      </Tooltip>\n    </div>\n  );\n};\n\nexport default CartControl;\n"
    },
    "/src/components/CartControl/index.js": {
      "code": "import CartControl from './CartControl';\n\nexport default CartControl;\n"
    },
    "/src/components/ui/Badge/Badge.jsx": {
      "code": "import clsx from 'clsx';\n\nconst sizeClasses = {\n  sm: clsx('h-5', 'py px-[5px]', 'text-xs'),\n  md: clsx('h-6', 'py px-[7px]', 'text-sm'),\n  lg: clsx('h-7', 'py-[3px] px-[9px]', 'text-sm'),\n};\n\nconst variantClasses = {\n  neutral: clsx('bg-gray-50', 'border-neutral-200', 'text-neutral-600'),\n  danger: clsx('bg-red-50', 'border-red-200', 'text-red-600'),\n  warning: clsx('bg-amber-50', 'border-amber-200', 'text-amber-700'),\n  success: clsx('bg-green-50', 'border-green-200', 'text-green-700'),\n  brand: clsx('bg-indigo-50', 'border-indigo-200', 'text-indigo-700'),\n};\n\nconst Badge = ({ label, size = 'md', variant = 'neutral', className }) => {\n  const commonClasses = clsx('rounded-full text-center border');\n  return (\n    <div\n      className={clsx(\n        commonClasses,\n        sizeClasses[size],\n        variantClasses[variant],\n        className\n      )}>\n      {label}\n    </div>\n  );\n};\n\nexport default Badge;\n"
    },
    "/src/components/ui/Badge/index.js": {
      "code": "import Badge from './Badge';\n\nexport default Badge;\n"
    },
    "/src/components/ui/Button/Button.jsx": {
      "code": "import clsx from 'clsx';\n\nimport Link from '../Link';\n\nconst paddingClasses = {\n  md: 'px-3.5 py-2.5',\n  lg: 'px-4 py-2.5',\n  xl: 'px-5 py-3',\n  '2xl': 'px-6 py-4',\n};\n\n// We need this because secondary button has border\nconst secondaryVariantPaddingClasses = {\n  md: 'px-[13px] py-[9px]',\n  lg: 'px-[15px] py-[9px]',\n  xl: 'px-[19px] py-[11px]',\n  '2xl': 'px-[23px] py-[15px]',\n};\n\nconst fontSizeClasses = {\n  md: 'text-sm',\n  lg: 'text-base',\n  xl: 'text-base',\n  '2xl': 'text-lg',\n};\n\nconst spacingClasses = {\n  md: 'gap-x-1.5',\n  lg: 'gap-x-2',\n  xl: 'gap-x-2',\n  '2xl': 'gap-x-3',\n};\n\nconst heightClasses = {\n  md: 'h-10',\n  lg: 'h-11',\n  xl: 'h-12',\n  '2xl': 'h-15',\n};\n\nconst iconOnlySizeClasses = {\n  md: 'size-10',\n  lg: 'size-11',\n  xl: 'size-12',\n  '2xl': 'size-14',\n};\n\nconst iconSizeClasses = {\n  md: 'size-5',\n  lg: 'size-5',\n  xl: 'size-5',\n  '2xl': 'size-6',\n};\n\nconst variantClasses = {\n  primary: clsx(\n    'border-none',\n    'bg-indigo-700',\n    'shadow-custom',\n    'text-white',\n    'hover:bg-indigo-800 focus:bg-indigo-800'\n  ),\n  secondary: clsx(\n    'border border-neutral-200',\n    'bg-white',\n    'shadow-custom',\n    'text-neutral-900',\n    'hover:bg-neutral-50 focus:bg-neutral-50'\n  ),\n  tertiary: clsx(\n    'border-none',\n    'text-indigo-700',\n    'hover:bg-neutral-50 focus:bg-neutral-50'\n  ),\n  danger: clsx(\n    'border-none',\n    'bg-red-600',\n    'text-white',\n    'hover:bg-red-700 focus:bg-red-700 focus:outline-none focus-visible:ring-4 focus-visible:ring-red-600/[.12]'\n  ),\n  link: clsx(\n    'text-indigo-700',\n    'hover:text-indigo-800 focus:text-indigo-800',\n    'rounded focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]'\n  ),\n  'gray-link': clsx(\n    'text-neutral-600',\n    'hover:text-neutral-900 focus:text-neutral-900',\n    'rounded focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n    'px-0.5'\n  ),\n};\n\nconst variantDisabledClasses = {\n  primary: clsx(\n    'disabled:bg-neutral-100',\n    'disabled:text-neutral-400',\n    'disabled:shadow-none'\n  ),\n  secondary: clsx(\n    'disabled:bg-neutral-100',\n    'disabled:text-neutral-400',\n    'disabled:shadow-none'\n  ),\n  tertiary: clsx('disabled:bg-none', 'disabled:text-neutral-400'),\n  danger: clsx('disabled:bg-none', 'disabled:text-neutral-400'),\n  link: clsx('disabled:text-neutral-400'),\n  'gray-link': clsx('disabled:text-neutral-400'),\n};\n\nconst Button = ({\n  label,\n  className,\n  isDisabled,\n  startIcon: StartIcon,\n  endIcon: EndIcon,\n  isLabelHidden,\n  size = 'md',\n  variant = 'primary',\n  iconClassName,\n  href,\n  ...props\n}) => {\n  const isLinkVariant = ['link', 'gray-link'].includes(variant);\n\n  const commonClasses = clsx(\n    'inline-flex items-center justify-center rounded font-medium outline-none cursor-pointer',\n    'focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n    'transition-colors',\n    'text-nowrap',\n    !isLinkVariant && heightClasses[size],\n    !isLinkVariant &&\n      (variant === 'secondary'\n        ? secondaryVariantPaddingClasses[size]\n        : paddingClasses[size]),\n    fontSizeClasses[size],\n    spacingClasses[size],\n    isLabelHidden && iconOnlySizeClasses[size],\n    variantClasses[variant],\n    variantDisabledClasses[variant],\n    isDisabled && 'pointer-events-none'\n  );\n\n  if (href) {\n    return (\n      <Link\n        to={href}\n        variant=\"unstyled\"\n        disabled={isDisabled}\n        className={clsx(commonClasses, className)}\n        {...props}>\n        {StartIcon && (\n          <StartIcon\n            className={clsx('size-5 p-0.5 shrink-0', iconClassName)}\n            aria-hidden=\"true\"\n          />\n        )}\n        {label}\n        {EndIcon && (\n          <EndIcon\n            className={clsx('size-5 p-0.5 shrink-0', iconClassName)}\n            aria-hidden=\"true\"\n          />\n        )}\n      </Link>\n    );\n  }\n\n  const children = isLabelHidden ? (\n    (\n      <StartIcon\n        className={clsx('shrink-0', iconSizeClasses[size], iconClassName)}\n        aria-hidden=\"true\"\n      />\n    ) || (\n      <EndIcon\n        className={clsx('shrink-0', iconSizeClasses[size], iconClassName)}\n        aria-hidden=\"true\"\n      />\n    )\n  ) : (\n    <>\n      {StartIcon && (\n        <StartIcon\n          className={clsx('size-5 p-0.5 shrink-0', iconClassName)}\n          aria-hidden=\"true\"\n        />\n      )}\n      {label}\n      {EndIcon && (\n        <EndIcon\n          className={clsx('size-5 p-0.5 shrink-0', iconClassName)}\n          aria-hidden=\"true\"\n        />\n      )}\n    </>\n  );\n\n  return (\n    <button\n      type=\"button\"\n      className={clsx(commonClasses, className)}\n      disabled={isDisabled}\n      {...props}>\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n"
    },
    "/src/components/ui/Button/index.js": {
      "code": "import Button from './Button';\n\nexport default Button;\n"
    },
    "/src/components/ui/ConfirmModal/ConfirmModal.jsx": {
      "code": "import clsx from 'clsx';\nimport { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { RiCloseLine } from 'react-icons/ri';\n\nimport Button from '../Button';\n\nconst ConfirmModal = ({\n  isOpen,\n  onClose,\n  onAction,\n  title,\n  description,\n  children,\n  primaryActionLabel,\n  secondaryActionLabel,\n  actionBtnSize = 'lg',\n  className,\n}) => {\n  useEffect(() => {\n    if (isOpen) {\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'auto';\n    }\n    return () => {\n      document.body.style.overflow = 'auto';\n    };\n  }, [isOpen]);\n\n  if (!isOpen) return null;\n\n  return createPortal(\n    <div\n      className={clsx(\n        'fixed inset-0  z-modal',\n        'bg-neutral-950 bg-opacity-70',\n        'flex items-center justify-center'\n      )}\n      role=\"dialog\"\n      aria-modal=\"true\">\n      <div\n        className={clsx(\n          'bg-white rounded-lg',\n          'w-[343px]',\n          'p-6',\n          'flex flex-col gap-8',\n          className\n        )}>\n        {children ? (\n          children\n        ) : (\n          <div className=\"flex flex-col gap-1\">\n            <div className={clsx('flex justify-between items-center gap-4')}>\n              <div className=\"font-semibold text-lg\">{title}</div>\n              <button\n                aria-label=\"Close modal\"\n                className=\"text-black text-xl font-semibold\"\n                onClick={onClose}>\n                <RiCloseLine className=\"size-6\" />\n              </button>\n            </div>\n\n            <p className=\"text-sm text-neutral-600\">{description}</p>\n          </div>\n        )}\n        <div className={clsx('flex gap-3')}>\n          {secondaryActionLabel && (\n            <Button\n              label={secondaryActionLabel}\n              variant=\"secondary\"\n              size={actionBtnSize}\n              className=\"flex-1\"\n              onClick={onClose}\n            />\n          )}\n          <Button\n            label={primaryActionLabel}\n            size={actionBtnSize}\n            className=\"flex-1\"\n            onClick={onAction}\n          />\n        </div>\n      </div>\n    </div>,\n    document.body\n  );\n};\n\nexport default ConfirmModal;\n"
    },
    "/src/components/ui/ConfirmModal/index.js": {
      "code": "import ConfirmModal from './ConfirmModal';\n\nexport default ConfirmModal;\n"
    },
    "/src/components/ui/Link/index.js": {
      "code": "import Link from './Link';\n\nexport default Link;\n"
    },
    "/src/components/ui/Link/Link.jsx": {
      "code": "import clsx from 'clsx';\nimport { NavLink, Link as RouterLink } from 'react-router-dom';\n\nconst linkVariantClasses = {\n  primary: clsx(\n    'text-indigo-700',\n    'hover:text-indigo-800 focus:text-indigo-800',\n    'rounded focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n    'px-0.5'\n  ),\n  gray: clsx(\n    'text-neutral-600',\n    'hover:text-neutral-900 focus:text-neutral-900',\n    'rounded focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n    'px-0.5'\n  ),\n  unstyled: '',\n};\n\nconst activeLinkClasses = {\n  primary: 'text-indigo-800',\n  gray: 'text-neutral-900',\n  unstyled: '',\n};\n\nconst Link = ({\n  children,\n  disabled,\n  className,\n  type = 'default',\n  variant = 'primary',\n  ...props\n}) => {\n  const commonClassName = clsx(\n    'font-medium rounded',\n    linkVariantClasses[variant],\n    {\n      'pointer-events-none text-neutral-400': disabled,\n    },\n    className\n  );\n\n  if (type === 'nav') {\n    return (\n      <NavLink\n        {...props}\n        className={({ isActive }) =>\n          clsx(commonClassName, isActive && activeLinkClasses[variant])\n        }>\n        {children}\n      </NavLink>\n    );\n  }\n  return (\n    <RouterLink {...props} className={clsx(commonClassName)}>\n      {children}\n    </RouterLink>\n  );\n};\n\nexport default Link;\n"
    },
    "/src/components/ui/Tag/index.js": {
      "code": "import Tag from './Tag';\n\nexport default Tag;\n"
    },
    "/src/components/ui/Tag/Tag.jsx": {
      "code": "import clsx from 'clsx';\n\nconst Tag = ({ label, onAction, actionIcon: Icon }) => {\n  return (\n    <div\n      className={clsx(\n        'flex justify-center items-center gap-1',\n        'bg-gray-200 rounded',\n        'px-[7px] py-[3px]',\n        'border-[0.5px] border-[#e6e6e6]'\n      )}>\n      <span className=\"font-medium text-sm px-0.5\">{label}</span>\n      {Icon && (\n        <Icon\n          className={clsx(\n            'siz-5 text-black',\n            Icon ? 'cursor-pointer' : 'pointer-events-none'\n          )}\n          onClick={onAction}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Tag;\n"
    },
    "/src/components/ui/TextInput/index.js": {
      "code": "import TextInput from './TextInput';\n\nexport default TextInput;\n"
    },
    "/src/components/ui/TextInput/TextInput.jsx": {
      "code": "import clsx from 'clsx';\nimport { useId } from 'react';\n\nconst TextInput = ({\n  label,\n  placeholder,\n  value,\n  onChange,\n  type,\n  id: idParam,\n  required,\n  isDisabled,\n  errorMessage,\n  hintMessage,\n  startIcon: StartIcon,\n  endIcon: EndIcon,\n  startIconClassName,\n  endIconClassName,\n}) => {\n  const generateId = useId();\n  const id = idParam ?? generateId;\n  const hasError = !!errorMessage;\n\n  const messageId = useId();\n\n  const hasBottomSection = !!errorMessage || !!hintMessage;\n\n  return (\n    <div className={clsx('flex flex-col gap-1.5 w-full', 'relative')}>\n      {label && (\n        <label\n          className={clsx('text-sm font-medium text-neutral-700')}\n          htmlFor={id}>\n          {label}\n        </label>\n      )}\n      <div className=\"relative\">\n        {StartIcon && (\n          <div className=\"pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3.5\">\n            <StartIcon\n              aria-hidden=\"true\"\n              className={clsx('text-neutral-400', 'size-5', startIconClassName)}\n            />\n          </div>\n        )}\n\n        <input\n          id={id}\n          aria-describedby={hasError ? messageId : undefined}\n          aria-invalid={hasError ? true : undefined}\n          type={type}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value, event)}\n          required={required}\n          disabled={isDisabled}\n          className={clsx(\n            'block w-full',\n            'py-[9px] px-[13px]',\n            'outline:none',\n            'border border-neutral-200 disabled:border-neutral-100',\n            'bg-neutral-50',\n            'rounded',\n            'text-sm text-neutral-900 placeholder:text-neutral-500 disabled:text-neutral-400 disabled:placeholder:text-neutral-400',\n            'focus:outline-none',\n            'focus:ring-4 focus:ring-offset-0 focus:ring-indigo-600/[.12] focus:border-indigo-600',\n            hasError && 'focus:ring-red-600/[.12] focus:border-red-600',\n            'disabled:pointer-events-none',\n            StartIcon && 'pl-[41px]',\n            EndIcon && 'pr-[38px]'\n          )}\n        />\n\n        {EndIcon && (\n          <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3.5\">\n            <EndIcon\n              aria-hidden=\"true\"\n              className={clsx('text-neutral-400', 'size-4', endIconClassName)}\n            />\n          </div>\n        )}\n      </div>\n\n      {hasBottomSection && (\n        <div\n          id={messageId}\n          className={clsx(\n            'text-sm text-neutral-500',\n            hasError && 'text-red-600'\n          )}>\n          {errorMessage || hintMessage}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TextInput;\n"
    },
    "/src/components/ui/Tooltip/index.js": {
      "code": "import Tooltip from './Tooltip';\n\nexport default Tooltip;\n"
    },
    "/src/components/ui/Tooltip/Tooltip.jsx": {
      "code": "import clsx from 'clsx';\nimport { useState } from 'react';\n\nconst Tooltip = ({ children, content, position = 'top', show = true }) => {\n  const [visible, setVisible] = useState(false);\n\n  const positions = {\n    top: 'bottom-full left-1/2 transform -translate-x-1/2 mb-2',\n    bottom: 'top-full left-1/2 transform -translate-x-1/2 mt-2',\n    left: 'right-full top-1/2 transform -translate-y-1/2 mr-2',\n    right: 'left-full top-1/2 transform -translate-y-1/2 ml-2',\n  };\n\n  const arrowPositions = {\n    top: 'bottom-[-4px] left-1/2 transform -translate-x-1/2 border-t-neutral-950 border-t-8 border-x-8 border-x-transparent',\n    bottom:\n      'top-[-4px] left-1/2 transform -translate-x-1/2 border-b-neutral-950 border-b-8 border-x-8 border-x-transparent',\n    left: 'right-[-4px] top-1/2 transform -translate-y-1/2 border-l-neutral-950 border-l-8 border-y-8 border-y-transparent',\n    right:\n      'left-[-4px] top-1/2 transform -translate-y-1/2 border-r-neutral-950 border-r-8 border-y-8 border-y-transparent',\n  };\n\n  return (\n    <div\n      className=\"relative flex items-center\"\n      onMouseEnter={() => show && setVisible(true)}\n      onMouseLeave={() => show && setVisible(false)}>\n      {children}\n      {visible && (\n        <div\n          className={clsx(\n            'absolute py-2 px-3 rounded-lg shadow-lg min-w-max max-w-xs',\n            'bg-neutral-950',\n            'text-white text-xs font-medium',\n            positions[position]\n          )}>\n          {content}\n          <div className={clsx('absolute', arrowPositions[position])} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Tooltip;\n"
    },
    "/src/constants.js": {
      "code": "export const COLORS = {\n  white: { value: '#fff', label: 'White' },\n  black: { value: '#000', label: 'Black' },\n  red: { value: '#DC2626', label: 'Red' },\n  orange: { value: '#EA580C', label: 'Orange' },\n  yellow: { value: '#F59E0B', label: 'Yellow' },\n  green: { value: '#10B981', label: 'Green' },\n  blue: { value: '#4F46E5', label: 'Blue' },\n  brown: { value: '#CA8A04', label: 'Brown' },\n  beige: { value: '#d2b08a', label: 'Beige' },\n  pink: { value: '#EC4899', label: 'Pink' },\n};\n\nexport const SIZE = {\n  xs: { short: 'XS', long: 'Extra Small' },\n  sm: { short: 'S', long: 'Small' },\n  md: { short: 'M', long: 'Medium' },\n  lg: { short: 'L', long: 'Large' },\n  xl: { short: 'XL', long: 'Extra Large' },\n};\n"
    },
    "/src/context/CartContext.jsx": {
      "code": "import {\n  createContext,\n  useState,\n  useEffect,\n  useContext,\n  useMemo,\n  useCallback,\n} from 'react';\nimport {\n  getStockChangedData,\n  mergeSampleAndStorageCartItems,\n} from 'src/pages/Cart/utils';\n\nconst CartContext = createContext();\n\nexport const useCartContext = () => useContext(CartContext);\n\nconst CartContextProvider = ({ children }) => {\n  const [cartItems, setCartItems] = useState([]);\n  const [stockChangedItems, setStockChangedItems] = useState([]);\n  const [discount, setDiscount] = useState(null);\n  const [isFetching, setIsFetching] = useState(true);\n  const [checkingStock, setCheckingStock] = useState(false);\n  const [showStockChangedModal, setShowStockChangedModal] = useState(false);\n\n  const updateCartItems = items => {\n    setCartItems(items);\n    localStorage.setItem('cart', JSON.stringify(items));\n  };\n\n  const checkForStockChanged = useCallback(async cartItems => {\n    setCheckingStock(true);\n    const data = await getStockChangedData(cartItems);\n    setStockChangedItems(data);\n    setShowStockChangedModal(data.length > 0);\n    setCheckingStock(false);\n  }, []);\n\n  const getCartItems = useCallback(async () => {\n    setIsFetching(true);\n\n    const data = await fetch(\n      `https://www.greatfrontend.com/api/projects/challenges/e-commerce/cart-sample`\n    );\n    const result = await data.json();\n\n    if (!result.error) {\n      const finalCartItems = mergeSampleAndStorageCartItems(result.items);\n      updateCartItems(finalCartItems);\n      checkForStockChanged(finalCartItems);\n    }\n    setIsFetching(false);\n  }, [checkForStockChanged]);\n\n  useEffect(() => {\n    getCartItems();\n  }, [getCartItems]);\n\n  const removeFromCart = useCallback(\n    item => {\n      const updatedCart = cartItems.filter(\n        cartItem =>\n          !(\n            cartItem.product.product_id === item.product.product_id &&\n            cartItem.unit.color === item.unit.color &&\n            cartItem.unit.size === item.unit.size\n          )\n      );\n      updateCartItems(updatedCart);\n    },\n    [cartItems]\n  );\n\n  const changeQuantity = useCallback(\n    (item, increment = true) => {\n      let updatedCart;\n\n      updatedCart = cartItems.map(cartItem => {\n        if (\n          cartItem.product.product_id === item.product.product_id &&\n          cartItem.unit.color === item.unit.color &&\n          cartItem.unit.size === item.unit.size\n        ) {\n          const finalQuantity = increment\n            ? item.quantity + 1\n            : item.quantity - 1;\n\n          return {\n            ...cartItem,\n            quantity: finalQuantity,\n            total_list_price: finalQuantity * cartItem.unit.list_price,\n            total_sale_price: finalQuantity * cartItem.unit.sale_price,\n          };\n        }\n        return cartItem;\n      });\n\n      updateCartItems(updatedCart);\n    },\n    [cartItems]\n  );\n\n  const acknowledgeStockChanged = useCallback(\n    (cartItems, currentStockItems) => {\n      const updatedCartItems = cartItems.reduce((acc, item) => {\n        const product = currentStockItems.find(\n          cartItem =>\n            cartItem.product.product_id === item.product.product_id &&\n            cartItem.unit.sku === item.unit.sku\n        );\n\n        if (product) {\n          // if there is stock then update the quantity, otherwise remove it\n          if (product.stock > 0) {\n            acc.push({\n              ...item,\n              quantity: product.stock,\n            });\n          }\n        } else {\n          acc.push(item);\n        }\n\n        setShowStockChangedModal(false);\n\n        return acc;\n      }, []);\n\n      updateCartItems(updatedCartItems);\n    },\n    []\n  );\n\n  const value = useMemo(\n    () => ({\n      cartItems,\n      isFetching,\n      discount,\n      stockChangedItems,\n      checkingStock,\n      showStockChangedModal,\n      acknowledgeStockChanged,\n      checkForStockChanged,\n      setDiscount,\n      removeFromCart,\n      incrementQuantity: item => changeQuantity(item, true),\n      decrementQuantity: item => changeQuantity(item, false),\n    }),\n    [\n      cartItems,\n      isFetching,\n      discount,\n      stockChangedItems,\n      checkingStock,\n      showStockChangedModal,\n      acknowledgeStockChanged,\n      checkForStockChanged,\n      setDiscount,\n      removeFromCart,\n      changeQuantity,\n    ]\n  );\n\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n};\n\nexport default CartContextProvider;\n"
    },
    "/src/index.css": {
      "code": "@import url('https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  font-family:\n    'Noto Sans',\n    system-ui,\n    -apple-system,\n    BlinkMacSystemFont,\n    'Segoe UI',\n    Roboto,\n    Oxygen,\n    Ubuntu,\n    Cantarell,\n    'Open Sans',\n    'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility;\n  background: linear-gradient(147.52deg, #f9fafb 8.89%, #d2d6db 100.48%);\n}\n\n/* Custom z-index */\n.z-modal {\n  z-index: 1055;\n}\n\n/* Custom box shadow */\n.shadow-custom {\n  box-shadow:\n    0px 1px 2px 0 rgb(0 0 0 / 0.06),\n    0px 1px 3px 0 rgb(0 0 0 / 0.1);\n}\n"
    },
    "/src/index.js": {
      "code": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n);\n"
    },
    "/src/Layout.jsx": {
      "code": "import clsx from 'clsx';\nimport { Outlet } from 'react-router-dom';\n\nconst Layout = () => {\n  return (\n    <>\n      <main className=\"min-h-screen p-4 max-w-[1440px] mx-auto\">\n        <div\n          className={clsx(\n            'rounded-md bg-white min-h-[calc(100vh_-_32px)]',\n            'shadow-sm md:shadow-md lg:shadow-lg',\n            'text-neutral-900'\n          )}>\n          <Outlet />\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default Layout;\n"
    },
    "/src/pages/Cart/CartPage.jsx": {
      "code": "import clsx from 'clsx';\n\nimport { useCartContext } from 'src/context/CartContext';\nimport CartItemsSection from './components/CartItemsSection';\nimport OrderSummarySection from './components/OrderSummarySection';\nimport EmptyCart from './components/EmptyCart';\n\nconst CartPage = () => {\n  const { isFetching, checkForStockChanged, cartItems } = useCartContext();\n\n  const onSubmitCart = e => {\n    e.preventDefault();\n    checkForStockChanged(cartItems);\n  };\n\n  return (\n    <div\n      className={clsx('px-4 py-12 md:py-16 lg:p-24', 'flex flex-col gap-16')}>\n      <h2 className=\"font-semibold text-3xl md:text-5xl\">Shopping Cart</h2>\n\n      {isFetching ? (\n        <div>Loading...</div>\n      ) : cartItems.length === 0 ? (\n        <EmptyCart />\n      ) : (\n        <form\n          onSubmit={onSubmitCart}\n          className={clsx(\n            'grid grid-cols-4 md:grid-cols-6 lg:grid-cols-12',\n            'gap-x-4 md:gap-x-8 gap-y-16'\n          )}>\n          <CartItemsSection className=\"col-span-4 md:col-span-6 lg:col-span-8\" />\n          <OrderSummarySection className=\"col-span-4 md:col-span-6 lg:col-span-4\" />\n        </form>\n      )}\n    </div>\n  );\n};\n\nexport default CartPage;\n"
    },
    "/src/pages/Cart/components/CartItemsSection.jsx": {
      "code": "import clsx from 'clsx';\nimport { useState } from 'react';\n\nimport CartControl from 'src/components/CartControl';\nimport Button from 'src/components/ui/Button';\nimport Link from 'src/components/ui/Link';\nimport ConfirmModal from 'src/components/ui/ConfirmModal';\n\nimport { useCartContext } from 'src/context/CartContext';\n\nimport { COLORS, SIZE } from 'src/constants';\nimport { formatPrice } from '../utils';\n\nconst CartItemsSection = ({ className }) => {\n  const { cartItems, incrementQuantity, decrementQuantity, removeFromCart } =\n    useCartContext();\n  const [removalConfirmation, setRemovalConfirmation] = useState({\n    show: false,\n    onAction: () => {},\n  });\n\n  const closeRemovalConfirmation = () => {\n    setRemovalConfirmation({\n      show: false,\n      onAction: () => {},\n    });\n  };\n\n  const openRemovalConfirmation = item => {\n    setRemovalConfirmation({\n      show: true,\n      onAction: () => {\n        removeFromCart(item);\n        closeRemovalConfirmation();\n      },\n    });\n  };\n\n  return (\n    <section aria-describedby=\"cart-items-section\" className={clsx(className)}>\n      <h2 className=\"sr-only\">Items in your shopping cart</h2>\n      <ul\n        className={clsx(\n          'divide-y divide-dashed divide-neutral-300',\n          className\n        )}>\n        {cartItems.map(item => {\n          const productUrl = `/products/${item.product.product_id}`;\n          const { unit, product, total_list_price, total_sale_price } = item;\n          const hasDiscount =\n            !!total_sale_price && total_sale_price !== total_list_price;\n\n          return (\n            <li\n              key={product.product_id + unit.size + unit.color}\n              className={clsx(\n                'flex flex-col md:flex-row gap-4 md:gap-8',\n                'py-[31.5px] first:pt-0 last:pb-0'\n              )}>\n              <div className=\"relative\">\n                <img\n                  src={unit.image_url}\n                  alt={`${SIZE[unit.size]?.long ?? unit.size} ${\n                    product.name\n                  } in ${unit.color}`}\n                  className=\"w-full md:min-w-[280px] h-[200px] object-cover rounded-lg\"\n                />\n                <Link\n                  to={productUrl}\n                  variant=\"unstyled\"\n                  className=\"absolute inset-0\"\n                />\n              </div>\n\n              <div className=\"flex flex-col gap-4\">\n                <Link\n                  to={productUrl}\n                  className=\"font-medium text-2xl\"\n                  variant=\"unstyled\">\n                  {product.name}\n                </Link>\n                <span className=\"font-medium text-neutral-600\">\n                  {COLORS[unit.color].label}\n                  {unit.size && (\n                    <>\n                      {' • '}\n                      {SIZE[unit.size]?.long ?? unit.size}\n                    </>\n                  )}\n                </span>\n                <span className=\"text-sm text-neutral-600\">\n                  {product.description}\n                </span>\n                <div className=\"flex items-center gap-4 justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <CartControl\n                      quantity={item.quantity}\n                      increment={() => incrementQuantity(item)}\n                      decrement={() => decrementQuantity(item)}\n                      availableStock={unit.stock}\n                    />\n                    <Button\n                      label=\"Remove\"\n                      variant=\"gray-link\"\n                      onClick={() => openRemovalConfirmation(item)}\n                    />\n                  </div>\n                  <div className=\"flex justify-end items-center gap-2\">\n                    <span className=\"font-medium text-lg text-right text-neutral-900\">\n                      $\n                      {hasDiscount\n                        ? formatPrice(total_sale_price)\n                        : formatPrice(total_list_price)}\n                    </span>\n                    {hasDiscount && (\n                      <span className=\"text-xs line-through text-neutral-600\">\n                        ${formatPrice(total_list_price)}\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n      {removalConfirmation.show && (\n        <ConfirmModal\n          isOpen={removalConfirmation.show}\n          title=\"Confirm Item Removal\"\n          description=\"Are you sure you want to remove this item from your shopping cart?\"\n          primaryActionLabel=\"Yes\"\n          secondaryActionLabel=\"Cancel\"\n          onClose={closeRemovalConfirmation}\n          onAction={removalConfirmation.onAction}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default CartItemsSection;\n"
    },
    "/src/pages/Cart/components/CouponCode.jsx": {
      "code": "import { useState } from 'react';\nimport { RiCloseFill, RiCouponLine } from 'react-icons/ri';\nimport Badge from 'src/components/ui/Badge';\n\nimport Button from 'src/components/ui/Button';\nimport Tag from 'src/components/ui/Tag';\nimport TextInput from 'src/components/ui/TextInput';\n\nimport { useCartContext } from 'src/context/CartContext';\n\nconst CouponCode = () => {\n  const { setDiscount, discount } = useCartContext();\n  const [showAddCoupon, setShowAddCoupon] = useState(false);\n  const [couponCode, setCouponCode] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isChecking, setIsChecking] = useState(false);\n\n  const checkCoupon = async () => {\n    if (!couponCode) {\n      setErrorMessage('Please enter a valid code.');\n      return;\n    }\n    const requestOptions = {\n      method: 'PUT',\n      body: JSON.stringify({\n        coupon_code: couponCode,\n      }),\n    };\n\n    setIsChecking(true);\n    const response = await fetch(\n      'https://www.greatfrontend.com/api/projects/challenges/e-commerce/coupons/apply',\n      requestOptions\n    );\n    const result = await response.json();\n    if (result.error) {\n      setErrorMessage(\"Sorry, but this coupon doesn't exist.\");\n    } else {\n      setDiscount(result);\n      setCouponCode('');\n      setErrorMessage('');\n    }\n    setIsChecking(false);\n  };\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      {discount && (\n        <div className=\"flex items-center gap-2 justify-between\">\n          <Badge label={discount.coupon_code} variant=\"brand\" size=\"lg\" />\n          <span className=\"font-semibold text-lg text-right text-neutral-900\">\n            -\n            {discount.discount_amount\n              ? `$${discount.discount_amount}`\n              : `${discount.discount_percentage}%`}\n          </span>\n        </div>\n      )}\n      {showAddCoupon ? (\n        <div className=\"flex flex-col gap-2 items-start py-1\">\n          <div className=\"flex gap-2 w-full\">\n            <TextInput\n              placeholder=\"Enter coupon code\"\n              label=\"Coupon Code\"\n              value={couponCode}\n              errorMessage={errorMessage}\n              onChange={value => setCouponCode(value)}\n            />\n            <Button\n              label=\"Apply\"\n              variant=\"secondary\"\n              className=\"w-20 shrink-0 mt-[26px]\"\n              onClick={checkCoupon}\n              isDisabled={isChecking}\n            />\n          </div>\n          {discount && (\n            <Tag\n              label={discount.coupon_code}\n              actionIcon={RiCloseFill}\n              onAction={() => setDiscount(null)}\n            />\n          )}\n        </div>\n      ) : (\n        <div className=\"flex justify-end\">\n          <Button\n            onClick={() => setShowAddCoupon(true)}\n            label=\"Add coupon code\"\n            variant=\"link\"\n            size=\"lg\"\n            startIcon={RiCouponLine}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CouponCode;\n"
    },
    "/src/pages/Cart/components/EmptyCart.jsx": {
      "code": "import clsx from 'clsx';\nimport { RiArrowRightLine, RiShoppingCart2Line } from 'react-icons/ri';\nimport Button from 'src/components/ui/Button';\n\nconst EmptyCart = () => {\n  return (\n    <div\n      className={clsx(\n        'grid grid-cols-4 md:grid-cols-6 lg:grid-cols-12',\n        'gap-x-4 gap-y-8 md:gap-x-8',\n      )}>\n      <div\n        className={clsx(\n          'col-span-4 md:col-span-6 lg:col-span-5',\n          'h-[372px] md:h-[400px] lg:h-full',\n          'flex flex-col items-center justify-center gap-5',\n        )}>\n        <div\n          className={clsx(\n            'size-12 shadow-custom rounded-full bg-white',\n            'flex items-center justify-center',\n          )}>\n          <RiShoppingCart2Line className=\"size-6 text-indigo-700\" />\n        </div>\n        <div\n          className={clsx('flex flex-col items-center gap-2', 'text-center')}>\n          <span className=\"text-xl font-medium\">Your cart is empty</span>\n          <span>Let's go explore some products</span>\n        </div>\n        <Button\n          size=\"xl\"\n          label=\"Explore products\"\n          endIcon={RiArrowRightLine}\n          href=\"/products\"\n        />\n      </div>\n      <img\n        src=\"https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/empty-cart.jpg\"\n        alt=\"Empty cart\"\n        className={clsx(\n          'w-full object-cover',\n          'h-[180px] md:h-80 lg:h-full',\n          'col-span-4 md:col-span-6 lg:col-span-7',\n        )}\n      />\n    </div>\n  );\n};\n\nexport default EmptyCart;\n"
    },
    "/src/pages/Cart/components/OrderSummarySection.jsx": {
      "code": "import { useMemo } from 'react';\nimport clsx from 'clsx';\nimport { useMediaQuery } from 'usehooks-ts';\n\nimport Button from 'src/components/ui/Button';\nimport CouponCode from './CouponCode';\nimport StockChangedModal from './StockChangedModal';\n\nimport { useCartContext } from 'src/context/CartContext';\n\nimport { getFinalAmount, getSubtotal } from '../utils';\n\nconst OrderSummarySection = ({ className }) => {\n  const isMobileAndBelow = useMediaQuery('(max-width: 767px)');\n  const { cartItems, discount, checkingStock } = useCartContext();\n\n  const subtotal = useMemo(() => getSubtotal(cartItems), [cartItems]);\n  const finalAmount = useMemo(\n    () => getFinalAmount(subtotal, discount),\n    [subtotal, discount]\n  );\n\n  return (\n    <section\n      aria-describedby=\"cart-summary\"\n      className={clsx(\n        'flex flex-col gap-8',\n        'w-full h-fit',\n        'bg-white',\n        'p-[15px] md:p-[31px] rounded-lg',\n        'border border-neutral-200',\n        className\n      )}>\n      <h2 className=\"font-semibold text-2xl text-neutral-900\">Order Summary</h2>\n\n      <div\n        className={clsx(\n          'flex flex-col',\n          'divide-y divide-dashed divide-neutral-300'\n        )}>\n        <dl className={clsx('flex flex-col gap-4', 'pb-[31.5px]')}>\n          <div className=\"flex items-center gap-2 justify-between\">\n            <span className=\"text-neutral-600\">Subtotal</span>\n            <span className=\"font-semibold text-lg\">${subtotal}</span>\n          </div>\n          <div className=\"flex items-center gap-2 justify-between\">\n            <span className=\"text-neutral-600\">Shipping</span>\n            <span className=\"font-semibold text-lg\">FREE</span>\n          </div>\n\n          <CouponCode />\n        </dl>\n\n        <div className={clsx('flex flex-col gap-8', 'pt-[31.5px]')}>\n          <div className=\"flex gap-4 justify-between\">\n            <span className=\"font-medium text-2xl\">Total</span>\n            <span className=\"font-semibold text-4xl\">${finalAmount}</span>\n          </div>\n          <Button\n            type=\"submit\"\n            label=\"Checkout\"\n            isDisabled={checkingStock}\n            size={isMobileAndBelow ? 'xl' : '2xl'}\n          />\n        </div>\n      </div>\n\n      <StockChangedModal />\n    </section>\n  );\n};\n\nexport default OrderSummarySection;\n"
    },
    "/src/pages/Cart/components/StockChangedModal.jsx": {
      "code": "import clsx from 'clsx';\nimport { RiArrowRightLine } from 'react-icons/ri';\n\nimport ConfirmModal from 'src/components/ui/ConfirmModal';\n\nimport { useCartContext } from 'src/context/CartContext';\n\nimport { COLORS, SIZE } from 'src/constants';\n\nconst StockChangedModal = () => {\n  const {\n    stockChangedItems,\n    cartItems,\n    showStockChangedModal,\n    acknowledgeStockChanged,\n  } = useCartContext();\n\n  if (!showStockChangedModal) {\n    return null;\n  }\n\n  return (\n    <ConfirmModal\n      isOpen={showStockChangedModal}\n      className={clsx('p-8', 'w-[592px]')}\n      actionBtnSize=\"xl\"\n      primaryActionLabel=\"Ok\"\n      onAction={() => acknowledgeStockChanged(cartItems, stockChangedItems)}>\n      <div className=\"flex flex-col gap-8\">\n        <div className={clsx('flex flex-col gap-2')}>\n          <h2 className=\"font-semibold text-xl\">Change of stock</h2>\n          <span className=\"text-sm text-neutral-600\">\n            While you were browsing, certain stocks have become unavailable:\n          </span>\n        </div>\n        <ul\n          className={clsx(\n            'divide-y divide-dashed divide-neutral-300',\n            'max-h-[500px] overflow-y-auto'\n          )}>\n          {stockChangedItems.map(item => {\n            const { unit, product, stock, cartQuantity } = item;\n            return (\n              <li\n                className={clsx(\n                  'flex gap-6',\n                  'py-[31.5px] first:pt-0 last:pb-0'\n                )}>\n                <img\n                  src={unit.image_url}\n                  className=\"size-20 rounded-lg object-cover\"\n                  alt={`${SIZE[unit.size]?.long ?? unit.size} ${\n                    product.name\n                  } in ${unit.color}`}\n                />\n                <div className={clsx('flex flex-col gap-2', 'font-medium')}>\n                  <span className=\"text-xl\">{product.name}</span>\n                  <span className=\"text-neutral-600\">\n                    {COLORS[unit.color].label}\n                    {unit.size && (\n                      <>\n                        {' • '}\n                        {SIZE[unit.size]?.long ?? unit.size}\n                      </>\n                    )}\n                  </span>\n                  <div\n                    className={clsx(\n                      'flex items-center gap-2',\n                      'text-neutral-600'\n                    )}>\n                    <span>Quantity: {cartQuantity}</span>\n                    <RiArrowRightLine className=\"size-3\" />\n                    <span>{stock}</span>\n                  </div>\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </ConfirmModal>\n  );\n};\n\nexport default StockChangedModal;\n"
    },
    "/src/pages/Cart/index.js": {
      "code": "import CartPage from './CartPage';\n\nexport default CartPage;\n"
    },
    "/src/pages/Cart/utils.js": {
      "code": "export const getSubtotal = items => {\n  const totalAmount = items.reduce((acc, item) => {\n    const price = !!item.total_sale_price\n      ? item.total_sale_price\n      : item.total_list_price;\n    return acc + price;\n  }, 0);\n\n  return totalAmount.toFixed(2);\n};\n\nexport const getFinalAmount = (subtotal, discount) => {\n  if (discount) {\n    const discountAmount = discount.discount_amount\n      ? discount.discount_amount\n      : subtotal * (discount.discount_percentage / 100);\n\n    return (subtotal - discountAmount).toFixed(2);\n  }\n\n  return subtotal;\n};\n\n// Fake stock change data\nexport const getStockChangedData = items => {\n  const products = [\n    {\n      product: {\n        product_id: 'stepsoft-socks',\n        name: 'StepSoft Socks',\n      },\n      unit: {\n        sku: 'ss-orange-xs',\n        size: 'xs',\n        color: 'orange',\n        image_url:\n          'https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/stepsoft-socks/stepsoft-socks-1.jpg',\n      },\n      stock: 5,\n    },\n    {\n      product: {\n        product_id: 'elemental-sneakers',\n        name: 'Elemental Sneakers',\n      },\n      unit: {\n        sku: 'es-beige-6',\n        size: '6',\n        color: 'beige',\n        image_url:\n          'https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/elemental-sneakers/elemental-sneakers-3.jpg',\n      },\n      stock: 3,\n    },\n    {\n      product: {\n        product_id: 'azure-attitude-shades',\n        name: 'Azure Attitude Shades',\n      },\n      unit: {\n        sku: 'aas-blue',\n        size: null,\n        color: 'blue',\n        image_url:\n          'https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/azure-attitude-shades/azure-attitude-shades-1.jpg',\n      },\n      stock: 2,\n    },\n  ];\n  const filteredProducts = products.reduce((acc, item) => {\n    const product = items.find(\n      cartItem =>\n        cartItem.product.product_id === item.product.product_id &&\n        cartItem.unit.sku === item.unit.sku &&\n        cartItem.quantity > item.stock\n    );\n    if (product) {\n      acc.push({\n        ...item,\n        cartQuantity: product ? product.quantity : item.quantity,\n      });\n    }\n    return acc;\n  }, []);\n  return new Promise(resolve => {\n    setTimeout(() => resolve(filteredProducts), 250);\n  });\n};\n\n\nexport const mergeSampleAndStorageCartItems = sampleCartItems => {\n  // Retrieve cart from localStorage\n  const storedCartItems = JSON.parse(localStorage.getItem('cart')) || [];\n  const mergedMap = new Map();\n\n  // Add items from the sample cart items to the map\n  sampleCartItems.forEach(item => {\n    mergedMap.set(item.unit.sku, item);\n  });\n\n  // Add items from the local storage to the map (overwrites duplicates from sampleCartItems)\n  storedCartItems.forEach(item => {\n    mergedMap.set(item.unit.sku, item);\n  });\n\n  // Convert the map back to an array\n  return Array.from(mergedMap.values());\n};\n\nexport const formatPrice = price =>\n  Number.isInteger(price) ? price : price.toFixed(2);"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/index.css",
      "/src/pages/Cart/CartPage.jsx"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app",
    "externalResources": [
      "https://cdn.tailwindcss.com"
    ]
  }
}