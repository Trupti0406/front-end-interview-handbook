generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model EmailSubscriber {
  id        String    @id(map: "EmailSubscribers_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email     String    @unique(map: "EmailSubscribers_email_key")
  createdAt DateTime? @default(now()) @db.Timestamp(6)
}

model FeedbackMessage {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  message   String    @db.VarChar
  email     String?
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  resolved  Boolean   @default(false)
  owner     String?   @default("yangshun")
  userEmail String?
  comments  String?   @db.VarChar
  metadata  Json?     @db.Json
}

model Profile {
  id               String    @id(map: "profile_pkey") @db.Uuid
  username         String    @unique @default(dbgenerated("SUBSTRING((gen_random_uuid())::text FROM 1 FOR 8)")) @db.Citext
  name             String?
  avatarUrl        String?
  title            String?
  bio              String?
  githubUsername   String?
  linkedInUsername String?
  website          String?
  startWorkDate    DateTime?
  currentStatus    String?

  stripeCustomer String?
  premium        Boolean @default(false)
  plan           String?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt

  QuestionProgress                        QuestionProgress[]
  LearningSession                         LearningSession[]
  questionDiscussionPosts                 QuestionDiscussionPost[]
  questionJavaScriptSubmissions           QuestionJavaScriptSubmission[]
  questionJavaScriptCommunitySolutions    QuestionJavaScriptCommunitySolution[]
  questionUserInterfaceSaves              QuestionUserInterfaceSave[]
  questionUserInterfaceCommunitySolutions QuestionUserInterfaceCommunitySolution[]
  projectsProfile                         ProjectsProfile?
  rewardsTaskCompletions                  RewardsTaskCompletion[]
  comments                                DiscussionComment[]
  commentVotes                            DiscussionCommentVote[]
}

model QuestionProgress {
  id        String   @id(map: "question_progress_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  format    String
  slug      String
  status    String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  userId    String   @db.Uuid
  profile   Profile  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model QuestionDiscussionPost {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  format    String
  slug      String
  contents  String
  userId    String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt
  profile   Profile  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum QuestionSubmissionResult {
  CORRECT
  WRONG
}

enum QuestionWorkingLanguage {
  JS
  TS
}

model QuestionJavaScriptSubmission {
  id        String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  slug      String
  code      String
  language  QuestionWorkingLanguage
  result    QuestionSubmissionResult
  userId    String                   @db.Uuid
  createdAt DateTime                 @default(now()) @db.Timestamptz(6)
  profile   Profile                  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum QuestionUserInterfaceFramework {
  REACT
  VANILLA
  ANGULAR
  SVELTE
  VUE
}

model QuestionUserInterfaceSave {
  id        String                         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String
  slug      String
  files     String
  framework QuestionUserInterfaceFramework
  userId    String                         @db.Uuid
  createdAt DateTime                       @default(now()) @db.Timestamptz(6)
  updatedAt DateTime                       @default(now()) @updatedAt
  profile   Profile                        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model QuestionJavaScriptCommunitySolution {
  id        String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  slug      String
  title     String
  writeup   String
  code      String
  language  QuestionWorkingLanguage
  userId    String                  @db.Uuid
  createdAt DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt DateTime                @default(now()) @updatedAt
  profile   Profile                 @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model QuestionUserInterfaceCommunitySolution {
  id        String                         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  slug      String
  title     String
  writeup   String
  files     String
  framework QuestionUserInterfaceFramework
  userId    String                         @db.Uuid
  createdAt DateTime                       @default(now()) @db.Timestamptz(6)
  updatedAt DateTime                       @default(now()) @updatedAt
  profile   Profile                        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum LearningSessionStatus {
  IN_PROGRESS
  STOPPED
}

model LearningSession {
  id        String                    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId    String                    @db.Uuid
  key       String
  status    LearningSessionStatus     @default(IN_PROGRESS)
  createdAt DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime                  @default(now()) @updatedAt
  stoppedAt DateTime?                 @db.Timestamptz(6)
  profile   Profile?                  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  progress  LearningSessionProgress[]
}

enum LearningSessionProgressStatus {
  COMPLETED
}

model LearningSessionProgress {
  id        String                        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  key       String
  sessionId String                        @db.Uuid
  status    LearningSessionProgressStatus
  createdAt DateTime                      @default(now()) @db.Timestamptz(6)
  session   LearningSession               @relation(fields: [sessionId], references: [id])

  @@unique([sessionId, key])
}

model ProjectsProfile {
  id               String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId           String   @unique @db.Uuid
  points           Int      @default(0)
  motivations      String[]
  skillsProficient String[]
  skillsToGrow     String[]

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt

  userProfile                    Profile                           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sessions                       ProjectsChallengeSession[]
  submissions                    ProjectsChallengeSubmission[]
  votesGiven                     ProjectsChallengeSubmissionVote[]
  ProjectsChallengeSubmissionPin ProjectsChallengeSubmissionPin[]
}

enum ProjectsChallengeSessionStatus {
  IN_PROGRESS
  STOPPED
  COMPLETED
}

model ProjectsChallengeSession {
  id              String                         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  profileId       String                         @db.Uuid
  slug            String
  status          ProjectsChallengeSessionStatus @default(IN_PROGRESS)
  roadmapSkills   String[]
  techStackSkills String[]

  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @updatedAt
  stoppedAt DateTime? @db.Timestamptz(6)

  projectsProfile ProjectsProfile @relation(fields: [profileId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

// This model only exists to allow models that are connected to a challenge
// to sort by certain fields e.g. difficulty.
model ProjectsChallengeDetails {
  slug       String @id @unique
  difficulty Int

  submissions ProjectsChallengeSubmission[]
}

model ProjectsChallengeSubmission {
  id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  profileId       String   @db.Uuid
  slug            String
  title           String
  summary         String
  repositoryUrl   String
  deploymentUrls  Json
  implementation  String
  views           Int      @default(0)
  roadmapSkills   String[]
  techStackSkills String[]

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt
  editedAt  DateTime @default(now()) @db.Timestamptz(6) // Manually edited by the user.

  challengeDetails     ProjectsChallengeDetails?                        @relation(fields: [slug], references: [slug])
  projectsProfile      ProjectsProfile?                                 @relation(fields: [profileId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  votes                ProjectsChallengeSubmissionVote[]
  pins                 ProjectsChallengeSubmissionPin[]
  recommendationAll    ProjectsChallengeSubmissionRecommendationAll?
  recommendationLearn  ProjectsChallengeSubmissionRecommendationLearn?
  recommendationMentor ProjectsChallengeSubmissionRecommendationMentor?
}

model ProjectsChallengeSubmissionPin {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  submissionId String   @db.Uuid
  profileId    String   @db.Uuid
  createdAt    DateTime @default(now()) @db.Timestamptz(6)

  submission      ProjectsChallengeSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  projectsProfile ProjectsProfile             @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([submissionId, profileId])
}

model ProjectsChallengeSubmissionVote {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  submissionId String   @db.Uuid
  profileId    String   @db.Uuid
  createdAt    DateTime @default(now()) @db.Timestamptz(6)

  submission      ProjectsChallengeSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  projectsProfile ProjectsProfile             @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([submissionId, profileId])
}

enum DiscussionCommentDomain {
  PROJECTS_CHALLENGE
  PROJECTS_SUBMISSION
}

model DiscussionComment {
  id              String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  entityId        String
  domain          DiscussionCommentDomain
  parentCommentId String?                 @db.Uuid

  body     String
  category String?
  userId   String  @db.Uuid

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt

  author        Profile                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  parentComment DiscussionComment?      @relation("DiscussionThread", fields: [parentCommentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies       DiscussionComment[]     @relation("DiscussionThread")
  votes         DiscussionCommentVote[]
}

model DiscussionCommentVote {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  commentId String   @db.Uuid
  userId    String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  comment DiscussionComment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  author  Profile           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([commentId, userId])
}

model RewardsTaskCompletion {
  id         String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId     String  @db.Uuid
  campaign   String
  action     String
  identifier String
  profile    Profile @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now()) @db.Timestamptz(6)

  @@unique([userId, campaign, action])
}

view ProjectsChallengeSubmissionRecommendationAll {
  id    String @id @db.Uuid
  score Int

  submission ProjectsChallengeSubmission @relation(fields: [id], references: [id])
}

view ProjectsChallengeSubmissionRecommendationLearn {
  id    String @id @db.Uuid
  score Int

  submission ProjectsChallengeSubmission @relation(fields: [id], references: [id])
}

view ProjectsChallengeSubmissionRecommendationMentor {
  id    String @id @db.Uuid
  score Int

  submission ProjectsChallengeSubmission @relation(fields: [id], references: [id])
}
