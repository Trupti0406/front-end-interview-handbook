generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EmailSubscriber {
  id        String    @id(map: "EmailSubscribers_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email     String    @unique(map: "EmailSubscribers_email_key")
  createdAt DateTime? @default(now()) @db.Timestamp(6)
}

model FeedbackMessage {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  message   String    @db.VarChar
  email     String?
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  resolved  Boolean   @default(false)
  owner     String?   @default("yangshun")
  userEmail String?
  comments  String?   @db.VarChar
  metadata  Json?     @db.Json
}

model Profile {
  id               String    @id(map: "profile_pkey") @db.Uuid
  username         String    @unique @default(dbgenerated("SUBSTRING((gen_random_uuid())::text FROM 1 FOR 8)")) @db.Citext
  name             String?
  avatarUrl        String?
  title            String?
  bio              String?
  githubUsername   String?
  linkedInUsername String?
  website          String?
  startWorkDate    DateTime?
  currentStatus    String?

  stripeCustomer String?
  premium        Boolean @default(false)
  plan           String?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt

  QuestionProgress                        QuestionProgress[]
  LearningSession                         LearningSession[]
  questionDiscussionPosts                 QuestionDiscussionPost[]
  questionJavaScriptSubmissions           QuestionJavaScriptSubmission[]
  questionJavaScriptCommunitySolutions    QuestionJavaScriptCommunitySolution[]
  questionUserInterfaceSaves              QuestionUserInterfaceSave[]
  questionUserInterfaceCommunitySolutions QuestionUserInterfaceCommunitySolution[]
  projectsProfile                         ProjectsProfile[]
}

model QuestionProgress {
  id        String   @id(map: "question_progress_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  format    String
  slug      String
  status    String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  userId    String   @db.Uuid
  profile   Profile  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model QuestionDiscussionPost {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  format    String
  slug      String
  contents  String
  userId    String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
  profile   Profile  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum QuestionSubmissionResult {
  CORRECT
  WRONG
}

enum QuestionWorkingLanguage {
  JS
  TS
}

model QuestionJavaScriptSubmission {
  id        String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  slug      String
  code      String
  language  QuestionWorkingLanguage
  result    QuestionSubmissionResult
  userId    String                   @db.Uuid
  createdAt DateTime                 @default(now()) @db.Timestamptz(6)
  profile   Profile                  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum QuestionUserInterfaceFramework {
  REACT
  VANILLA
  ANGULAR
  SVELTE
  VUE
}

model QuestionUserInterfaceSave {
  id        String                         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String
  slug      String
  files     String
  framework QuestionUserInterfaceFramework
  userId    String                         @db.Uuid
  createdAt DateTime                       @default(now()) @db.Timestamptz(6)
  updatedAt DateTime                       @updatedAt
  profile   Profile                        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model QuestionJavaScriptCommunitySolution {
  id        String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  slug      String
  title     String
  writeup   String
  code      String
  language  QuestionWorkingLanguage
  userId    String                  @db.Uuid
  createdAt DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt DateTime                @updatedAt
  profile   Profile                 @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model QuestionUserInterfaceCommunitySolution {
  id        String                         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  slug      String
  title     String
  writeup   String
  files     String
  framework QuestionUserInterfaceFramework
  userId    String                         @db.Uuid
  createdAt DateTime                       @default(now()) @db.Timestamptz(6)
  updatedAt DateTime                       @updatedAt
  profile   Profile                        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum LearningSessionStatus {
  IN_PROGRESS
  STOPPED
}

model LearningSession {
  id        String                    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId    String                    @db.Uuid
  key       String
  status    LearningSessionStatus     @default(IN_PROGRESS)
  createdAt DateTime                  @default(now()) @db.Timestamptz(6)
  stoppedAt DateTime?                 @db.Timestamptz(6)
  profile   Profile?                  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  progress  LearningSessionProgress[]
}

enum LearningSessionProgressStatus {
  COMPLETED
}

model LearningSessionProgress {
  id        String                        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  key       String
  sessionId String                        @db.Uuid
  status    LearningSessionProgressStatus
  createdAt DateTime                      @default(now()) @db.Timestamptz(6)
  session   LearningSession               @relation(fields: [sessionId], references: [id])

  @@unique([sessionId, key])
}

model ProjectsProfile {
  id                  String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId              String   @unique @db.Uuid
  userProfile         Profile? @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  primaryMotivation   String?
  secondaryMotivation String?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  sessions    ProjectsProjectSession[]
  submissions ProjectsProjectSubmission[]
}

enum ProjectsProjectSessionStatus {
  IN_PROGRESS
  STOPPED
  COMPLETED
}

model ProjectsProjectSession {
  id        String                       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  profileId String                       @db.Uuid
  slug      String
  status    ProjectsProjectSessionStatus @default(IN_PROGRESS)
  createdAt DateTime                     @default(now()) @db.Timestamptz(6)
  stoppedAt DateTime?                    @db.Timestamptz(6)

  profile ProjectsProfile? @relation(fields: [profileId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ProjectsProjectSubmission {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  profileId     String   @db.Uuid
  slug          String
  title         String
  summary       String
  repositoryUrl String
  deploymentUrl String
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime @updatedAt

  profile ProjectsProfile? @relation(fields: [profileId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
