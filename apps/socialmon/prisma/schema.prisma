generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  replies       RedditPostReply[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model RedditPost {
  id              String    @id @db.VarChar
  title           String    @db.VarChar
  content         String    @db.VarChar
  postedAt        DateTime  @db.Timestamp(6)
  permalink       String    @db.VarChar
  response        String?   @db.VarChar
  subreddit       String    @db.VarChar
  createdAt       DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime  @default(now()) @updatedAt
  keywords        String[]
  reply           RedditPostReply?

  upvoteCount     Int       @default(0)
  commentsCount   Int       @default(0)
  statsUpdatedAt  DateTime  @default(now()) @db.Timestamptz(6)
}

model RedditUser {
  id            String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username      String       @db.VarChar
  password      String       @db.VarChar

  replies       RedditPostReply[]

  @@unique([id, username])
}


model RedditPostReply {
  id                    String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content               String    @db.VarChar
  createdAt             DateTime  @default(now()) @db.Timestamptz(6)
  permalink             String @db.VarChar
  postId                String @db.VarChar @unique
  redditUserId          String @db.Uuid
  userId                String

  post                  RedditPost  @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  redditUser            RedditUser @relation(fields: [redditUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
